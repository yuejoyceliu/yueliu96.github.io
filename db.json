{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/images/1.jpg","path":"images/1.jpg","modified":1,"renderable":0},{"_id":"source/images/2.jpg","path":"images/2.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3305519480e87918ce500bbba9a6f5d0054d11ad","modified":1553656783838},{"_id":"source/CNAME","hash":"34b0caf4553966b44e77c33fc9be806570c103a8","modified":1553656783839},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1553656783872},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1553656783872},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1553656783873},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1553656783873},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1553656783873},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1553656783873},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1553656783873},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1553656783874},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1553656783874},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1553656783874},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1553656783874},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1553656783875},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1553656783875},{"_id":"themes/next/_config.yml","hash":"662d037c053f70762589353133039afb51a5b557","modified":1553656783875},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1553656783876},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1553656783898},{"_id":"source/_posts/Coordinate-Transformation.md","hash":"39e146361e7db47af421eff87d379cd6caa990a1","modified":1573693298300},{"_id":"source/_posts/.DS_Store","hash":"981ecf162d47bee47d54ff3bc395bae44ea0ceba","modified":1555629743418},{"_id":"source/_posts/Gaussian-Troubleshooting.md","hash":"6672e965f725b38d8093bd40c357cd019811fe6d","modified":1554704556592},{"_id":"source/_posts/Estimation-of-Random-Variables.md","hash":"0e9020d639a924ea3abd0f803c434782c8443e76","modified":1572495531230},{"_id":"source/_posts/Gaussian-on-Hyak.md","hash":"b8c486c7945aa9115c7f58b04d428faf458e5b15","modified":1554704550831},{"_id":"source/_posts/Hyak-Tips.md","hash":"4785400883869824675581c2b40d604912e24170","modified":1572320128520},{"_id":"source/_posts/Jointly-Gaussian-Variables.md","hash":"9eb1bd54c55058033d5b2a7067dc61664887fda3","modified":1572408136463},{"_id":"source/_posts/Mopac-with-Cuby4.md","hash":"379d6c93cf01326fe11231206224fa059a244a18","modified":1572305487131},{"_id":"source/_posts/Newton-X-on-Hyak.md","hash":"7b1f66b0d461c2420acebcd62c59380b9a417227","modified":1554704547297},{"_id":"source/tags/index.md","hash":"7a3dbc2db7783440e1e1265294488c986083ba2f","modified":1553656783845},{"_id":"source/categories/index.md","hash":"e990de558ab07030e63299e19b6890b46ebea2cc","modified":1553656783844},{"_id":"source/images/1.jpg","hash":"2fdff1a3c058e5372b6d203c064f000ba95fb4bd","modified":1553656783845},{"_id":"source/images/2.jpg","hash":"e33b4160050646dfca5df19826522c652ebaa330","modified":1553656783845},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1553656783876},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1553656783876},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1553656783876},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1553656783876},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1553656783877},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1553656783877},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1553656783877},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1553656783877},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1553656783877},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1553656783878},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1553656783878},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1553656783878},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1553656783878},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1553656783879},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1553656783879},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1553656783879},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1553656783880},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1553656783896},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1553656783896},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1553656783897},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1553656783897},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1553656783897},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1553656783897},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1553656783898},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1553656783898},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1553656783899},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1553656783976},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1553656783977},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1553656783977},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783929},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553656783880},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1553656783880},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1553656783880},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1553656783880},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1553656783881},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1553656783881},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1553656783882},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1553656783882},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1553656783882},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1553656783883},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1553656783883},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1553656783884},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1553656783885},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1553656783885},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1553656783885},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1553656783887},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1553656783887},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1553656783888},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1553656783893},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1553656783893},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1553656783894},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1553656783894},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1553656783894},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1553656783894},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1553656783895},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1553656783900},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1553656783900},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1553656783900},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1553656783900},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1553656783901},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1553656783901},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1553656783901},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1553656783901},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1553656783902},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1553656783928},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1553656783929},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1553656783929},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1553656783929},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1553656783929},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1553656783930},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1553656783930},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1553656783930},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1553656783931},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1553656783931},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1553656783931},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1553656783931},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1553656783932},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1553656783932},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553656783932},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1553656783933},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1553656783933},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1553656783933},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1553656783934},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783887},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783888},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783920},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783920},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783921},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783927},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1553656783928},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1553656783883},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1553656783884},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1553656783885},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1553656783885},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1553656783885},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1553656783886},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1553656783886},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1553656783886},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1553656783886},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1553656783887},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553656783887},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1553656783888},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1553656783889},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1553656783888},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1553656783889},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1553656783889},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1553656783889},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1553656783890},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1553656783890},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1553656783890},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1553656783890},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1553656783890},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1553656783890},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1553656783891},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1553656783891},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1553656783891},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1553656783891},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1553656783892},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1553656783892},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1553656783892},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1553656783892},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1553656783892},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1553656783893},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1553656783893},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1553656783895},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1553656783896},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1553656783896},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1553656783896},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1553656783920},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1553656783920},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1553656783921},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1553656783921},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1553656783927},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1553656783927},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1553656783928},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4d43faad01147b4a7d874698cd4029a973bd9144","modified":1553656783928},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1553656783934},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1553656783934},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1553656783934},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1553656783935},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1553656783935},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1553656783936},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1553656783937},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1553656783937},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1553656783938},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1553656783938},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1553656783938},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1553656783946},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1553656783943},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1553656783947},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1553656783952},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1553656783952},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1553656783952},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1553656783952},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1553656783961},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1553656783954},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1553656783954},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1553656783954},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1553656783954},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1553656783954},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1553656783962},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1553656783963},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1553656783963},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1553656783963},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1553656783963},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1553656783964},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1553656783964},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1553656783964},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1553656783965},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1553656783965},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1553656783965},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1553656783965},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1553656783966},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1553656783966},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1553656783966},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1553656783966},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1553656783966},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1553656783967},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1553656783967},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1553656783967},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1553656783967},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1553656783967},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1553656783968},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1553656783968},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1553656783968},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1553656783969},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1553656783973},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1553656783973},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1553656783975},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1553656783976},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1553656783976},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1553656783962},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1553656783895},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1553656783895},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1553656783902},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1553656783902},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1553656783903},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1553656783903},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1553656783903},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1553656783907},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1553656783913},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1553656783918},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1553656783918},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1553656783919},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1553656783919},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1553656783919},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1553656783920},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1553656783920},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1553656783921},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1553656783922},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1553656783922},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1553656783922},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1553656783922},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1553656783922},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553656783923},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1553656783923},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1553656783924},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1553656783924},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1553656783924},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1553656783925},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1553656783925},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1553656783925},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1553656783926},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1553656783926},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1553656783926},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1553656783927},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1553656783927},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1553656783937},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1553656783942},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1553656783942},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1553656783947},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1553656783947},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1553656783948},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1553656783948},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1553656783948},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1553656783948},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1553656783951},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1553656783951},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1553656783952},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1553656783953},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1553656783953},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1553656783955},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1553656783955},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1553656783956},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1553656783972},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1553656783973},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1553656783941},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1553656783961},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1553656783961},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1553656783975},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1553656783903},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1553656783905},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1553656783905},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1553656783904},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1553656783905},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1553656783904},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1553656783904},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1553656783904},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1553656783904},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1553656783906},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1553656783906},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1553656783905},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1553656783906},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1553656783911},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1553656783907},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1553656783912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1553656783912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1553656783912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1553656783912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1553656783912},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1553656783913},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1553656783913},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1553656783913},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1553656783913},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1553656783907},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1553656783907},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1553656783908},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1553656783908},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1553656783908},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1553656783908},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1553656783909},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1553656783909},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1553656783910},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1553656783910},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1553656783910},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1553656783910},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1553656783911},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1553656783911},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1553656783911},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1553656783914},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1553656783914},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1553656783914},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1553656783914},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1553656783915},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1553656783915},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1553656783915},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1553656783915},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1553656783915},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1553656783916},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1553656783916},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1553656783916},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1553656783916},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1553656783917},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1553656783917},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1553656783917},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1553656783917},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1553656783917},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1553656783918},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1553656783923},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553656783923},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1553656783925},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1553656783939},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1553656783939},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1553656783940},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1553656783940},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1553656783939},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1553656783942},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1553656783949},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1553656783950},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1553656783950},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1553656783950},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1553656783950},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1553656783950},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1553656783956},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1553656783958},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1553656783960},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1553656783946},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1553656783972},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1553656783959}],"Category":[{"name":"Probability & Random Process","_id":"ck2y0eaz50004mhmofbnhu8k7"},{"name":"Turecek Lab Tutorial","_id":"ck2y0eazh000bmhmo6pbs4zms"}],"Data":[],"Page":[{"title":"tags","date":"2018-12-18T07:05:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-17 23:05:29\ntype: \"tags\"\n---\n","updated":"2019-03-27T03:19:43.845Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck2y0eayz0001mhmolw5lzw19","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-12-18T07:03:54.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-17 23:03:54\ntype: \"categories\"\n---\n","updated":"2019-03-27T03:19:43.844Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ck2y0eaz20003mhmoelcgljvk","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Coordinate Transformation","date":"2019-10-28T23:34:41.000Z","_content":"\n# Jacobian Matrix\n\nIf $\\mathbf{f}:\\mathbb{R}^n\\rightarrow \\mathbb{R}^m$ is a function  that maps from n-dimensional Euclidean space to m-dimensional Euclidean space. The Jacobian matrix of $\\mathbf{f}$ is defined to be a $m\\times n$ matrix, denoted by $\\mathbf{J}$, with $\\mathbf{J}_{ij} = \\frac{\\partial f_i}{\\partial x_j}$, or\n\n$$\\mathbf{J^f_x} = \\begin{bmatrix} \\frac{\\partial f_1}{\\partial x_1} & \\cdots & \\frac{\\partial f_1}{\\partial x_n}\\\\\n\\vdots &\\ddots &\\vdots\\\\\n\\frac{\\partial f_m}{\\partial x_1} & \\cdots & \\frac{\\partial f_m}{\\partial x_n} \\end{bmatrix} $$\n\n\nwhere $\\mathbf{f} = \\mathbf{J_x^f}\\cdot \\mathbf{x}$. Similarly, $\\mathbf{x} = \\mathbf{J_f^x}\\times \\mathbf{f}$ and $\\mathbf{J_f^x} = \\mathbf{J_x^f}^{-1}$\n\n# Coordination Transformation\n\nGiven a function $f_X(\\mathbf{x})$ and two vectors withe the same dimension $\\mathbf{x}$ and $\\mathbf{z}$, how to find $f_Z(\\mathbf{z})$?\n\n## one-to-one map\nFind Jacobian matrix $J^z_x$ or $J^x_z$, so that $z = J^z_x \\cdot x$ and $x = J_z^x \\cdot z$\n\n$$f_Z(\\mathbf{z}) = \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) = f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| $$\n\n## many-to-one map\n\n$$\\begin{aligned}f_Z(\\mathbf{z}) &= \\sum_{x: g(x)=z} \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) \\\\\n&= \\sum_{x: g(x)=z} f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| \\end{aligned}$$\n  \n# example\n\n## Question\n\nLet X, Y be continuous random variables with the following joint probability distribution function (p.d.f.)\n$$f_{X,Y} = 2e^{-(x+y)},\\; 0<x<y$$\nDefine $z=x+y$, $w=\\frac{y}{x}$, determine the joint p.d.f. of z, w.\n## Answer\n\n$$ x=\\frac{z}{w+1}, \\; y= \\frac{zw}{w+1}\\\\$$\n\n- To find the joint p.d.f.\n\n$$\\begin{aligned}\nJ_{xy}^{zw} &= \\begin{bmatrix} 1 & 1\\\\ -\\frac{y}{x^2} & \\frac{1}{x}\\end{bmatrix} \\\\\n|J_{xy}^{zw}| &= \\frac{1}{x}+\\frac{y}{x^2} = \\frac{(w+1)^2}{z}\\\\\nf_{Z,W} &= 2e^{-z} \\times |J^{xy}_{zw}| = \\frac{2ze^{-z}}{(w+1)^2} \\end{aligned}$$\n<!-- \n- How to find the marginal p.d.f.?\n  - For a given value z, $f_Z(z)$ equals the sum of all $f_{X,Y}(x,y)$ satisfying $x+y=z$. This means, for a provided z and x, y is uniquely determined (i.e. z-x). We can integral over x in the range of $(0,\\frac{z}{2})$ since $x<y$ and $x+y=z$.\n\n    $$f_Z(z) = \\int_{0}^{\\frac{z}{2}} 2e^{-(x+z-x)} \\mathrm{d}x = ze^{-z}$$\n\n  - Similarly, to get $f_W(w)$, we can integral over x for all $y = wx$ from $0$ to $+\\infty$.\n    \n    $$f_W(w) = \\int_{0}^{+\\infty}2e^{-(x+wx)}\\mathrm{d}x = \\frac{2}{w+1}$$\n\n- Since $f_{Z,W}(z,w)\\neq f_Z(z)\\cdot f_W(w)$, they are not independent. -->\n\n<!-- # Expectation and Variance\n\nFor $\\mathbf{X}$ and $\\mathbf{Y} = \\mathbf{A}\\mathbf{X}$, if $E[\\mathbf{X}]=\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$, then $E[\\mathbf{Y}]=\\mathbf{A}\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$ -->\n\n\n# Relevant Note\n\n- $A=\\begin{bmatrix}a&b\\\\c&d\\end{bmatrix}$, $A^{-1} = \\frac{1}{|A|} \\times \\begin{bmatrix} d & -b \\\\\\\\ -c & a \\end{bmatrix}$, where $|A|=ad-bc$\n","source":"_posts/Coordinate-Transformation.md","raw":"---\ntitle: Coordinate Transformation\ndate: 2019-10-28 16:34:41\ntags:\n- Math\n- Probability\ncategories:\n- Probability & Random Process\n---\n\n# Jacobian Matrix\n\nIf $\\mathbf{f}:\\mathbb{R}^n\\rightarrow \\mathbb{R}^m$ is a function  that maps from n-dimensional Euclidean space to m-dimensional Euclidean space. The Jacobian matrix of $\\mathbf{f}$ is defined to be a $m\\times n$ matrix, denoted by $\\mathbf{J}$, with $\\mathbf{J}_{ij} = \\frac{\\partial f_i}{\\partial x_j}$, or\n\n$$\\mathbf{J^f_x} = \\begin{bmatrix} \\frac{\\partial f_1}{\\partial x_1} & \\cdots & \\frac{\\partial f_1}{\\partial x_n}\\\\\n\\vdots &\\ddots &\\vdots\\\\\n\\frac{\\partial f_m}{\\partial x_1} & \\cdots & \\frac{\\partial f_m}{\\partial x_n} \\end{bmatrix} $$\n\n\nwhere $\\mathbf{f} = \\mathbf{J_x^f}\\cdot \\mathbf{x}$. Similarly, $\\mathbf{x} = \\mathbf{J_f^x}\\times \\mathbf{f}$ and $\\mathbf{J_f^x} = \\mathbf{J_x^f}^{-1}$\n\n# Coordination Transformation\n\nGiven a function $f_X(\\mathbf{x})$ and two vectors withe the same dimension $\\mathbf{x}$ and $\\mathbf{z}$, how to find $f_Z(\\mathbf{z})$?\n\n## one-to-one map\nFind Jacobian matrix $J^z_x$ or $J^x_z$, so that $z = J^z_x \\cdot x$ and $x = J_z^x \\cdot z$\n\n$$f_Z(\\mathbf{z}) = \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) = f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| $$\n\n## many-to-one map\n\n$$\\begin{aligned}f_Z(\\mathbf{z}) &= \\sum_{x: g(x)=z} \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) \\\\\n&= \\sum_{x: g(x)=z} f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| \\end{aligned}$$\n  \n# example\n\n## Question\n\nLet X, Y be continuous random variables with the following joint probability distribution function (p.d.f.)\n$$f_{X,Y} = 2e^{-(x+y)},\\; 0<x<y$$\nDefine $z=x+y$, $w=\\frac{y}{x}$, determine the joint p.d.f. of z, w.\n## Answer\n\n$$ x=\\frac{z}{w+1}, \\; y= \\frac{zw}{w+1}\\\\$$\n\n- To find the joint p.d.f.\n\n$$\\begin{aligned}\nJ_{xy}^{zw} &= \\begin{bmatrix} 1 & 1\\\\ -\\frac{y}{x^2} & \\frac{1}{x}\\end{bmatrix} \\\\\n|J_{xy}^{zw}| &= \\frac{1}{x}+\\frac{y}{x^2} = \\frac{(w+1)^2}{z}\\\\\nf_{Z,W} &= 2e^{-z} \\times |J^{xy}_{zw}| = \\frac{2ze^{-z}}{(w+1)^2} \\end{aligned}$$\n<!-- \n- How to find the marginal p.d.f.?\n  - For a given value z, $f_Z(z)$ equals the sum of all $f_{X,Y}(x,y)$ satisfying $x+y=z$. This means, for a provided z and x, y is uniquely determined (i.e. z-x). We can integral over x in the range of $(0,\\frac{z}{2})$ since $x<y$ and $x+y=z$.\n\n    $$f_Z(z) = \\int_{0}^{\\frac{z}{2}} 2e^{-(x+z-x)} \\mathrm{d}x = ze^{-z}$$\n\n  - Similarly, to get $f_W(w)$, we can integral over x for all $y = wx$ from $0$ to $+\\infty$.\n    \n    $$f_W(w) = \\int_{0}^{+\\infty}2e^{-(x+wx)}\\mathrm{d}x = \\frac{2}{w+1}$$\n\n- Since $f_{Z,W}(z,w)\\neq f_Z(z)\\cdot f_W(w)$, they are not independent. -->\n\n<!-- # Expectation and Variance\n\nFor $\\mathbf{X}$ and $\\mathbf{Y} = \\mathbf{A}\\mathbf{X}$, if $E[\\mathbf{X}]=\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$, then $E[\\mathbf{Y}]=\\mathbf{A}\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$ -->\n\n\n# Relevant Note\n\n- $A=\\begin{bmatrix}a&b\\\\c&d\\end{bmatrix}$, $A^{-1} = \\frac{1}{|A|} \\times \\begin{bmatrix} d & -b \\\\\\\\ -c & a \\end{bmatrix}$, where $|A|=ad-bc$\n","slug":"Coordinate-Transformation","published":1,"updated":"2019-11-14T01:01:38.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eayt0000mhmore24aj5o","content":"<h1 id=\"Jacobian-Matrix\"><a href=\"#Jacobian-Matrix\" class=\"headerlink\" title=\"Jacobian Matrix\"></a>Jacobian Matrix</h1><p>If $\\mathbf{f}:\\mathbb{R}^n\\rightarrow \\mathbb{R}^m$ is a function  that maps from n-dimensional Euclidean space to m-dimensional Euclidean space. The Jacobian matrix of $\\mathbf{f}$ is defined to be a $m\\times n$ matrix, denoted by $\\mathbf{J}$, with $\\mathbf{J}_{ij} = \\frac{\\partial f_i}{\\partial x_j}$, or</p>\n<p>$$\\mathbf{J^f_x} = \\begin{bmatrix} \\frac{\\partial f_1}{\\partial x_1} &amp; \\cdots &amp; \\frac{\\partial f_1}{\\partial x_n}\\\\<br>\\vdots &amp;\\ddots &amp;\\vdots\\\\<br>\\frac{\\partial f_m}{\\partial x_1} &amp; \\cdots &amp; \\frac{\\partial f_m}{\\partial x_n} \\end{bmatrix} $$</p>\n<p>where $\\mathbf{f} = \\mathbf{J_x^f}\\cdot \\mathbf{x}$. Similarly, $\\mathbf{x} = \\mathbf{J_f^x}\\times \\mathbf{f}$ and $\\mathbf{J_f^x} = \\mathbf{J_x^f}^{-1}$</p>\n<h1 id=\"Coordination-Transformation\"><a href=\"#Coordination-Transformation\" class=\"headerlink\" title=\"Coordination Transformation\"></a>Coordination Transformation</h1><p>Given a function $f_X(\\mathbf{x})$ and two vectors withe the same dimension $\\mathbf{x}$ and $\\mathbf{z}$, how to find $f_Z(\\mathbf{z})$?</p>\n<h2 id=\"one-to-one-map\"><a href=\"#one-to-one-map\" class=\"headerlink\" title=\"one-to-one map\"></a>one-to-one map</h2><p>Find Jacobian matrix $J^z_x$ or $J^x_z$, so that $z = J^z_x \\cdot x$ and $x = J_z^x \\cdot z$</p>\n<p>$$f_Z(\\mathbf{z}) = \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) = f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| $$</p>\n<h2 id=\"many-to-one-map\"><a href=\"#many-to-one-map\" class=\"headerlink\" title=\"many-to-one map\"></a>many-to-one map</h2><p>$$\\begin{aligned}f_Z(\\mathbf{z}) &amp;= \\sum_{x: g(x)=z} \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) \\\\<br>&amp;= \\sum_{x: g(x)=z} f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| \\end{aligned}$$</p>\n<h1 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h1><h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><p>Let X, Y be continuous random variables with the following joint probability distribution function (p.d.f.)<br>$$f_{X,Y} = 2e^{-(x+y)},\\; 0&lt;x&lt;y$$<br>Define $z=x+y$, $w=\\frac{y}{x}$, determine the joint p.d.f. of z, w.</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><p>$$ x=\\frac{z}{w+1}, \\; y= \\frac{zw}{w+1}\\\\$$</p>\n<ul>\n<li>To find the joint p.d.f.</li>\n</ul>\n<p>$$\\begin{aligned}<br>J_{xy}^{zw} &amp;= \\begin{bmatrix} 1 &amp; 1\\ -\\frac{y}{x^2} &amp; \\frac{1}{x}\\end{bmatrix} \\\\<br>|J_{xy}^{zw}| &amp;= \\frac{1}{x}+\\frac{y}{x^2} = \\frac{(w+1)^2}{z}\\\\<br>f_{Z,W} &amp;= 2e^{-z} \\times |J^{xy}_{zw}| = \\frac{2ze^{-z}}{(w+1)^2} \\end{aligned}$$<br>&lt;!– </p>\n<ul>\n<li><p>How to find the marginal p.d.f.?</p>\n<ul>\n<li><p>For a given value z, $f_Z(z)$ equals the sum of all $f_{X,Y}(x,y)$ satisfying $x+y=z$. This means, for a provided z and x, y is uniquely determined (i.e. z-x). We can integral over x in the range of $(0,\\frac{z}{2})$ since $x&lt;y$ and $x+y=z$.</p>\n<p>$$f_Z(z) = \\int_{0}^{\\frac{z}{2}} 2e^{-(x+z-x)} \\mathrm{d}x = ze^{-z}$$</p>\n</li>\n<li><p>Similarly, to get $f_W(w)$, we can integral over x for all $y = wx$ from $0$ to $+\\infty$.</p>\n<p>$$f_W(w) = \\int_{0}^{+\\infty}2e^{-(x+wx)}\\mathrm{d}x = \\frac{2}{w+1}$$</p>\n</li>\n</ul>\n</li>\n<li><p>Since $f_{Z,W}(z,w)\\neq f_Z(z)\\cdot f_W(w)$, they are not independent. –&gt;</p>\n</li>\n</ul>\n<!-- # Expectation and Variance\n\nFor $\\mathbf{X}$ and $\\mathbf{Y} = \\mathbf{A}\\mathbf{X}$, if $E[\\mathbf{X}]=\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$, then $E[\\mathbf{Y}]=\\mathbf{A}\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$ -->\n<h1 id=\"Relevant-Note\"><a href=\"#Relevant-Note\" class=\"headerlink\" title=\"Relevant Note\"></a>Relevant Note</h1><ul>\n<li>$A=\\begin{bmatrix}a&amp;b\\\\c&amp;d\\end{bmatrix}$, $A^{-1} = \\frac{1}{|A|} \\times \\begin{bmatrix} d &amp; -b \\\\\\ -c &amp; a \\end{bmatrix}$, where $|A|=ad-bc$</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jacobian-Matrix\"><a href=\"#Jacobian-Matrix\" class=\"headerlink\" title=\"Jacobian Matrix\"></a>Jacobian Matrix</h1><p>If $\\mathbf{f}:\\mathbb{R}^n\\rightarrow \\mathbb{R}^m$ is a function  that maps from n-dimensional Euclidean space to m-dimensional Euclidean space. The Jacobian matrix of $\\mathbf{f}$ is defined to be a $m\\times n$ matrix, denoted by $\\mathbf{J}$, with $\\mathbf{J}_{ij} = \\frac{\\partial f_i}{\\partial x_j}$, or</p>\n<p>$$\\mathbf{J^f_x} = \\begin{bmatrix} \\frac{\\partial f_1}{\\partial x_1} &amp; \\cdots &amp; \\frac{\\partial f_1}{\\partial x_n}\\\\<br>\\vdots &amp;\\ddots &amp;\\vdots\\\\<br>\\frac{\\partial f_m}{\\partial x_1} &amp; \\cdots &amp; \\frac{\\partial f_m}{\\partial x_n} \\end{bmatrix} $$</p>\n<p>where $\\mathbf{f} = \\mathbf{J_x^f}\\cdot \\mathbf{x}$. Similarly, $\\mathbf{x} = \\mathbf{J_f^x}\\times \\mathbf{f}$ and $\\mathbf{J_f^x} = \\mathbf{J_x^f}^{-1}$</p>\n<h1 id=\"Coordination-Transformation\"><a href=\"#Coordination-Transformation\" class=\"headerlink\" title=\"Coordination Transformation\"></a>Coordination Transformation</h1><p>Given a function $f_X(\\mathbf{x})$ and two vectors withe the same dimension $\\mathbf{x}$ and $\\mathbf{z}$, how to find $f_Z(\\mathbf{z})$?</p>\n<h2 id=\"one-to-one-map\"><a href=\"#one-to-one-map\" class=\"headerlink\" title=\"one-to-one map\"></a>one-to-one map</h2><p>Find Jacobian matrix $J^z_x$ or $J^x_z$, so that $z = J^z_x \\cdot x$ and $x = J_z^x \\cdot z$</p>\n<p>$$f_Z(\\mathbf{z}) = \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) = f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| $$</p>\n<h2 id=\"many-to-one-map\"><a href=\"#many-to-one-map\" class=\"headerlink\" title=\"many-to-one map\"></a>many-to-one map</h2><p>$$\\begin{aligned}f_Z(\\mathbf{z}) &amp;= \\sum_{x: g(x)=z} \\left|\\mathbf{J^x_z}\\right| \\cdot f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}}) \\\\<br>&amp;= \\sum_{x: g(x)=z} f_X(\\mathbf{\\mathbf{J_z^x}\\cdot\\mathbf{x}})/|\\mathbf{J^z_x}| \\end{aligned}$$</p>\n<h1 id=\"example\"><a href=\"#example\" class=\"headerlink\" title=\"example\"></a>example</h1><h2 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h2><p>Let X, Y be continuous random variables with the following joint probability distribution function (p.d.f.)<br>$$f_{X,Y} = 2e^{-(x+y)},\\; 0&lt;x&lt;y$$<br>Define $z=x+y$, $w=\\frac{y}{x}$, determine the joint p.d.f. of z, w.</p>\n<h2 id=\"Answer\"><a href=\"#Answer\" class=\"headerlink\" title=\"Answer\"></a>Answer</h2><p>$$ x=\\frac{z}{w+1}, \\; y= \\frac{zw}{w+1}\\\\$$</p>\n<ul>\n<li>To find the joint p.d.f.</li>\n</ul>\n<p>$$\\begin{aligned}<br>J_{xy}^{zw} &amp;= \\begin{bmatrix} 1 &amp; 1\\ -\\frac{y}{x^2} &amp; \\frac{1}{x}\\end{bmatrix} \\\\<br>|J_{xy}^{zw}| &amp;= \\frac{1}{x}+\\frac{y}{x^2} = \\frac{(w+1)^2}{z}\\\\<br>f_{Z,W} &amp;= 2e^{-z} \\times |J^{xy}_{zw}| = \\frac{2ze^{-z}}{(w+1)^2} \\end{aligned}$$<br>&lt;!– </p>\n<ul>\n<li><p>How to find the marginal p.d.f.?</p>\n<ul>\n<li><p>For a given value z, $f_Z(z)$ equals the sum of all $f_{X,Y}(x,y)$ satisfying $x+y=z$. This means, for a provided z and x, y is uniquely determined (i.e. z-x). We can integral over x in the range of $(0,\\frac{z}{2})$ since $x&lt;y$ and $x+y=z$.</p>\n<p>$$f_Z(z) = \\int_{0}^{\\frac{z}{2}} 2e^{-(x+z-x)} \\mathrm{d}x = ze^{-z}$$</p>\n</li>\n<li><p>Similarly, to get $f_W(w)$, we can integral over x for all $y = wx$ from $0$ to $+\\infty$.</p>\n<p>$$f_W(w) = \\int_{0}^{+\\infty}2e^{-(x+wx)}\\mathrm{d}x = \\frac{2}{w+1}$$</p>\n</li>\n</ul>\n</li>\n<li><p>Since $f_{Z,W}(z,w)\\neq f_Z(z)\\cdot f_W(w)$, they are not independent. –&gt;</p>\n</li>\n</ul>\n<!-- # Expectation and Variance\n\nFor $\\mathbf{X}$ and $\\mathbf{Y} = \\mathbf{A}\\mathbf{X}$, if $E[\\mathbf{X}]=\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$, then $E[\\mathbf{Y}]=\\mathbf{A}\\mathbf{\\mu}$ and $Cov[\\mathbf{X}]=\\mathbf{\\Sigma}$ -->\n<h1 id=\"Relevant-Note\"><a href=\"#Relevant-Note\" class=\"headerlink\" title=\"Relevant Note\"></a>Relevant Note</h1><ul>\n<li>$A=\\begin{bmatrix}a&amp;b\\\\c&amp;d\\end{bmatrix}$, $A^{-1} = \\frac{1}{|A|} \\times \\begin{bmatrix} d &amp; -b \\\\\\ -c &amp; a \\end{bmatrix}$, where $|A|=ad-bc$</li>\n</ul>\n"},{"title":"Estimation of Random Variables","date":"2019-10-31T00:25:32.000Z","_content":"\n*Estimate the value of an inaccessible random variable X in terms of the observation of an accessible random variable Y*\n\n# MAP and ML Estimators\n\n- Maximum a posteriori estimater\n\n$$\nP[X=x | Y=y]=\\frac{P[Y=y | X=x] P[X=x]}{P[Y=y]}\n$$\n\n$$\n\\max _{x} P[X=x | Y=y]\n$$\n\n$$\n\\max _{x} P[Y=y | X=x]\n$$\n","source":"_posts/Estimation-of-Random-Variables.md","raw":"---\ntitle: Estimation of Random Variables\ndate: 2019-10-30 17:25:32\ntags:\n- Probability\n- Math\ncategories:\n- Probability & Random Process\n---\n\n*Estimate the value of an inaccessible random variable X in terms of the observation of an accessible random variable Y*\n\n# MAP and ML Estimators\n\n- Maximum a posteriori estimater\n\n$$\nP[X=x | Y=y]=\\frac{P[Y=y | X=x] P[X=x]}{P[Y=y]}\n$$\n\n$$\n\\max _{x} P[X=x | Y=y]\n$$\n\n$$\n\\max _{x} P[Y=y | X=x]\n$$\n","slug":"Estimation-of-Random-Variables","published":1,"updated":"2019-10-31T04:18:51.230Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eaz10002mhmoudee6kr2","content":"<p><em>Estimate the value of an inaccessible random variable X in terms of the observation of an accessible random variable Y</em></p>\n<h1 id=\"MAP-and-ML-Estimators\"><a href=\"#MAP-and-ML-Estimators\" class=\"headerlink\" title=\"MAP and ML Estimators\"></a>MAP and ML Estimators</h1><ul>\n<li>Maximum a posteriori estimater</li>\n</ul>\n<p>$$<br>P[X=x | Y=y]=\\frac{P[Y=y | X=x] P[X=x]}{P[Y=y]}<br>$$</p>\n<p>$$<br>\\max _{x} P[X=x | Y=y]<br>$$</p>\n<p>$$<br>\\max _{x} P[Y=y | X=x]<br>$$</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>Estimate the value of an inaccessible random variable X in terms of the observation of an accessible random variable Y</em></p>\n<h1 id=\"MAP-and-ML-Estimators\"><a href=\"#MAP-and-ML-Estimators\" class=\"headerlink\" title=\"MAP and ML Estimators\"></a>MAP and ML Estimators</h1><ul>\n<li>Maximum a posteriori estimater</li>\n</ul>\n<p>$$<br>P[X=x | Y=y]=\\frac{P[Y=y | X=x] P[X=x]}{P[Y=y]}<br>$$</p>\n<p>$$<br>\\max _{x} P[X=x | Y=y]<br>$$</p>\n<p>$$<br>\\max _{x} P[Y=y | X=x]<br>$$</p>\n"},{"title":"Hyak Tips","date":"2018-12-31T21:41:04.000Z","_content":"\nTips on: [file transfer](#scp) | [memory & disk space](#memdisk) | [python scripts](#pyscripts) | [Run python: No such file or directory](#nofile) | [squeue format](#squeue) | to be continue...\n\nHyak Mox Overview website: [click me](https://wiki.cac.washington.edu/display/hyakusers/Hyak+mox+Overview)\n\n# <jump id='scp'>File Transfer</jump>\n\n- from ikt to mox\n  \n  ```\n  hyakbbcp myfile mox1.hyak.uw.edu:mydirectory\n  hyakbbcp -r myfolder mox1.hyak.uw.edu:mydirectory\n  ```\n\n- from mox to ikt\n\n  ```\n  hyakbbcp myfile ikt1.hyak.uw.edu:mydirectory\n  hyakbbcp -r myfolder ikt1.hyak.uw.edu:mydirectory\n  ```\n- into hyak\n  \n  ```\n  scp myfile user@mox.hyak.uw.edu:path/of/destination\n  ```\n- out of hyak\n  \n  ```\n  scp user@ikt.hyak.uw.edu:path/of/your/file .\n  ```\n\n- into or out of hyak by sftp\n  \n  ```bash\n  sftp user@mox.hyak.uw.edu\n  get myfile   #move myfile from hyak to local direcotry\n  get -r myfolder \n  put myfile   #move myfile from local directory to hyak\n  put -r myfolder\n  ls           #list files and folders on hyak directory\n  lls          #list files and folders on local directory\n  ```\n\n# <jump id='memdisk'>Memory and Disk Space</jump>\n\n- Commonality\n  - Place to hold data\n  - Unit: bytes, kilobytes, megabytes, etc\n- Difference\n  - Memory is known as random access memory (RAM), which stores actively running programs on the computer. The more memory is, the more it is able to run complex programs and more programs at the same time.\n  - Disk space is a spindle of magnetic discs to store files you download, install or save.\n- Command\n  - mem: `free -g` (g:GB,m:MB,k:KB)\n  - disk space: \n    - `df -h`\n    - Hyak has usage_report.txt available on every partition (e.g. /gscratch/stf/usage_report.txt) recording the disk space usage. One can quickly know the usage by writing a simple python scripts:\n    \n    ```python\n    #!/usr/bin/env python\n\n    PTT = ['stf','chem','ilahie','scrubbed']\n    try:\n        print('%-10s%-12s%-12s%-12s%-12s%-15s%-16s' % ('Name','Use(GB)','Quota(GB)','Limit(GB)','Files','FilesQuota','FilesLimit'))\n        for p in PTT:\n            f = '/gscratch/'+p+'/usage_report.txt'\n            with open(f,'r') as fo:\n                lines = fo.readlines()\n            s = lines[2].split()\n            print('%-10s%-12s%-12s%-12s%-12s%-15s%-16s' % (s[0],s[2],s[3],s[4],s[6],s[7],s[8]))\n    except BaseException as err:\n        print(err)\n    ```\n\n    If store it to [gscratch_space.py](https://github.com/yueliu96/scripts_for_lab/blob/master/gscratch_space.py) in the home directory and run this script as `~/gscratch_space.py`, we can get:\n    \n    ```txt\n    Name      Use(GB)     Quota(GB)   Limit(GB)   Files       FilesQuota     FilesLimit      \n    stf       24437       45500       50050       3064981     68250000       75075000        \n    chem      8884        9000        9900        2327984     9000000        9900000         \n    ilahie    29325       35500       39050       1522158     53250000       58575000     \n    scrubbed  91518       200000      220000      12174263    200000000      220000000   \n    ```\n\n# <jump id='pyscripts'>Python Scripts</jump>\n\n- It's a good choice to store useful python scripts in user's home directory, whose quotas are set to 10 GB with a limit of 5,000 files. \n- Python scripts starting with `#!/usr/bin/env python`, can be executed by `directory/pyfile ...` besides `python pyfile ...`. \n- Use `chmod u+x pyfile` if it isn't executable\n- Batch operation of python scripts by bash command `for ...; do ...; done`\n  - example: \n   \n     If *xyz2gjf$.$py* (usage: `python xyz2gjf.py xyz-file` )is in a subdirecotry *myscripts* of home directory, run `chmod u+x ~/myscripts/xyz2gjf.py` first if it is not executable, move to a directory containing several xyz files and run `for i in *xyz; do ~/myscripts/xyz2gjf.py $i; done` to convert all *xyz files to gjf format.\n\n# <jump id='nofile'>Run python: No such file or directory</jump>\n\nIf python scripts can be executed with `python script.py` but fails with `./script.py`:\n\n- Make sure add `#!/usr/bin/env python` at the head of the script\n- Make sure use `chmod u+x script.py` to make it executable\n\nIf it still fails:\n\n- `vi scripts.py` to open it\n- `:set ff=unix` to change it file format\n- `:wq` to save it\n\n# <jump id='squeue'>Squeue Format</jump>\n\nadd `export SQUEUE_FORMAT=\"the-format-you-like\"` to ~/.bash_profile file and then run `source ~/.bash_profile`\n\n- My own version:\n  \n  ```bash\n  export SQUEUE_FORMAT=\"%.7i %9P %15j %.8u %.2t %.12M %.12L %.5C %.7m  %.4D %R\"\n  ```\n    what is like:\n\n    ```\n      JOBID PARTITION NAME          USER ST         TIME    TIME_LEFT  CPUS MIN_MEM  NODE NODELIST(REASON)\n     547841 chem      gN1_ccsd  yueliu96  R   1-23:14:00  10-12:46:00    28    245G     1 n2079  \n    ```\n- Note:\n  - `%.`: align rigt\n  - `%` withou dot: aligh left\n  - integer: length of occupied space\n  - different letters correspond to diffrent items, see [link](https://slurm.schedmd.com/squeue.html) for details\n\n","source":"_posts/Hyak-Tips.md","raw":"---\ntitle: Hyak Tips\ndate: 2018-12-31 13:41:04\ntags:\n- Hyak\ncategories:\n- Turecek Lab Tutorial\n---\n\nTips on: [file transfer](#scp) | [memory & disk space](#memdisk) | [python scripts](#pyscripts) | [Run python: No such file or directory](#nofile) | [squeue format](#squeue) | to be continue...\n\nHyak Mox Overview website: [click me](https://wiki.cac.washington.edu/display/hyakusers/Hyak+mox+Overview)\n\n# <jump id='scp'>File Transfer</jump>\n\n- from ikt to mox\n  \n  ```\n  hyakbbcp myfile mox1.hyak.uw.edu:mydirectory\n  hyakbbcp -r myfolder mox1.hyak.uw.edu:mydirectory\n  ```\n\n- from mox to ikt\n\n  ```\n  hyakbbcp myfile ikt1.hyak.uw.edu:mydirectory\n  hyakbbcp -r myfolder ikt1.hyak.uw.edu:mydirectory\n  ```\n- into hyak\n  \n  ```\n  scp myfile user@mox.hyak.uw.edu:path/of/destination\n  ```\n- out of hyak\n  \n  ```\n  scp user@ikt.hyak.uw.edu:path/of/your/file .\n  ```\n\n- into or out of hyak by sftp\n  \n  ```bash\n  sftp user@mox.hyak.uw.edu\n  get myfile   #move myfile from hyak to local direcotry\n  get -r myfolder \n  put myfile   #move myfile from local directory to hyak\n  put -r myfolder\n  ls           #list files and folders on hyak directory\n  lls          #list files and folders on local directory\n  ```\n\n# <jump id='memdisk'>Memory and Disk Space</jump>\n\n- Commonality\n  - Place to hold data\n  - Unit: bytes, kilobytes, megabytes, etc\n- Difference\n  - Memory is known as random access memory (RAM), which stores actively running programs on the computer. The more memory is, the more it is able to run complex programs and more programs at the same time.\n  - Disk space is a spindle of magnetic discs to store files you download, install or save.\n- Command\n  - mem: `free -g` (g:GB,m:MB,k:KB)\n  - disk space: \n    - `df -h`\n    - Hyak has usage_report.txt available on every partition (e.g. /gscratch/stf/usage_report.txt) recording the disk space usage. One can quickly know the usage by writing a simple python scripts:\n    \n    ```python\n    #!/usr/bin/env python\n\n    PTT = ['stf','chem','ilahie','scrubbed']\n    try:\n        print('%-10s%-12s%-12s%-12s%-12s%-15s%-16s' % ('Name','Use(GB)','Quota(GB)','Limit(GB)','Files','FilesQuota','FilesLimit'))\n        for p in PTT:\n            f = '/gscratch/'+p+'/usage_report.txt'\n            with open(f,'r') as fo:\n                lines = fo.readlines()\n            s = lines[2].split()\n            print('%-10s%-12s%-12s%-12s%-12s%-15s%-16s' % (s[0],s[2],s[3],s[4],s[6],s[7],s[8]))\n    except BaseException as err:\n        print(err)\n    ```\n\n    If store it to [gscratch_space.py](https://github.com/yueliu96/scripts_for_lab/blob/master/gscratch_space.py) in the home directory and run this script as `~/gscratch_space.py`, we can get:\n    \n    ```txt\n    Name      Use(GB)     Quota(GB)   Limit(GB)   Files       FilesQuota     FilesLimit      \n    stf       24437       45500       50050       3064981     68250000       75075000        \n    chem      8884        9000        9900        2327984     9000000        9900000         \n    ilahie    29325       35500       39050       1522158     53250000       58575000     \n    scrubbed  91518       200000      220000      12174263    200000000      220000000   \n    ```\n\n# <jump id='pyscripts'>Python Scripts</jump>\n\n- It's a good choice to store useful python scripts in user's home directory, whose quotas are set to 10 GB with a limit of 5,000 files. \n- Python scripts starting with `#!/usr/bin/env python`, can be executed by `directory/pyfile ...` besides `python pyfile ...`. \n- Use `chmod u+x pyfile` if it isn't executable\n- Batch operation of python scripts by bash command `for ...; do ...; done`\n  - example: \n   \n     If *xyz2gjf$.$py* (usage: `python xyz2gjf.py xyz-file` )is in a subdirecotry *myscripts* of home directory, run `chmod u+x ~/myscripts/xyz2gjf.py` first if it is not executable, move to a directory containing several xyz files and run `for i in *xyz; do ~/myscripts/xyz2gjf.py $i; done` to convert all *xyz files to gjf format.\n\n# <jump id='nofile'>Run python: No such file or directory</jump>\n\nIf python scripts can be executed with `python script.py` but fails with `./script.py`:\n\n- Make sure add `#!/usr/bin/env python` at the head of the script\n- Make sure use `chmod u+x script.py` to make it executable\n\nIf it still fails:\n\n- `vi scripts.py` to open it\n- `:set ff=unix` to change it file format\n- `:wq` to save it\n\n# <jump id='squeue'>Squeue Format</jump>\n\nadd `export SQUEUE_FORMAT=\"the-format-you-like\"` to ~/.bash_profile file and then run `source ~/.bash_profile`\n\n- My own version:\n  \n  ```bash\n  export SQUEUE_FORMAT=\"%.7i %9P %15j %.8u %.2t %.12M %.12L %.5C %.7m  %.4D %R\"\n  ```\n    what is like:\n\n    ```\n      JOBID PARTITION NAME          USER ST         TIME    TIME_LEFT  CPUS MIN_MEM  NODE NODELIST(REASON)\n     547841 chem      gN1_ccsd  yueliu96  R   1-23:14:00  10-12:46:00    28    245G     1 n2079  \n    ```\n- Note:\n  - `%.`: align rigt\n  - `%` withou dot: aligh left\n  - integer: length of occupied space\n  - different letters correspond to diffrent items, see [link](https://slurm.schedmd.com/squeue.html) for details\n\n","slug":"Hyak-Tips","published":1,"updated":"2019-10-29T03:35:28.520Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eaz70006mhmowtowok1b","content":"<p>Tips on: <a href=\"#scp\">file transfer</a> | <a href=\"#memdisk\">memory &amp; disk space</a> | <a href=\"#pyscripts\">python scripts</a> | <a href=\"#nofile\">Run python: No such file or directory</a> | <a href=\"#squeue\">squeue format</a> | to be continue…</p>\n<p>Hyak Mox Overview website: <a href=\"https://wiki.cac.washington.edu/display/hyakusers/Hyak+mox+Overview\" target=\"_blank\" rel=\"noopener\">click me</a></p>\n<h1 id=\"File-Transfer\"><a href=\"#File-Transfer\" class=\"headerlink\" title=\"File Transfer\"></a><jump id=\"scp\">File Transfer</jump></h1><ul>\n<li><p>from ikt to mox</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hyakbbcp myfile mox1.hyak.uw.edu:mydirectory</span><br><span class=\"line\">hyakbbcp -r myfolder mox1.hyak.uw.edu:mydirectory</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>from mox to ikt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hyakbbcp myfile ikt1.hyak.uw.edu:mydirectory</span><br><span class=\"line\">hyakbbcp -r myfolder ikt1.hyak.uw.edu:mydirectory</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>into hyak</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp myfile user@mox.hyak.uw.edu:path/of/destination</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>out of hyak</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp user@ikt.hyak.uw.edu:path/of/your/file .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>into or out of hyak by sftp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp user@mox.hyak.uw.edu</span><br><span class=\"line\">get myfile   <span class=\"comment\">#move myfile from hyak to local direcotry</span></span><br><span class=\"line\">get -r myfolder </span><br><span class=\"line\">put myfile   <span class=\"comment\">#move myfile from local directory to hyak</span></span><br><span class=\"line\">put -r myfolder</span><br><span class=\"line\">ls           <span class=\"comment\">#list files and folders on hyak directory</span></span><br><span class=\"line\">lls          <span class=\"comment\">#list files and folders on local directory</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Memory-and-Disk-Space\"><a href=\"#Memory-and-Disk-Space\" class=\"headerlink\" title=\"Memory and Disk Space\"></a><jump id=\"memdisk\">Memory and Disk Space</jump></h1><ul>\n<li>Commonality<ul>\n<li>Place to hold data</li>\n<li>Unit: bytes, kilobytes, megabytes, etc</li>\n</ul>\n</li>\n<li>Difference<ul>\n<li>Memory is known as random access memory (RAM), which stores actively running programs on the computer. The more memory is, the more it is able to run complex programs and more programs at the same time.</li>\n<li>Disk space is a spindle of magnetic discs to store files you download, install or save.</li>\n</ul>\n</li>\n<li><p>Command</p>\n<ul>\n<li>mem: <code>free -g</code> (g:GB,m:MB,k:KB)</li>\n<li><p>disk space: </p>\n<ul>\n<li><code>df -h</code></li>\n<li>Hyak has usage_report.txt available on every partition (e.g. /gscratch/stf/usage_report.txt) recording the disk space usage. One can quickly know the usage by writing a simple python scripts:</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\">PTT = [<span class=\"string\">'stf'</span>,<span class=\"string\">'chem'</span>,<span class=\"string\">'ilahie'</span>,<span class=\"string\">'scrubbed'</span>]</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'%-10s%-12s%-12s%-12s%-12s%-15s%-16s'</span> % (<span class=\"string\">'Name'</span>,<span class=\"string\">'Use(GB)'</span>,<span class=\"string\">'Quota(GB)'</span>,<span class=\"string\">'Limit(GB)'</span>,<span class=\"string\">'Files'</span>,<span class=\"string\">'FilesQuota'</span>,<span class=\"string\">'FilesLimit'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> PTT:</span><br><span class=\"line\">        f = <span class=\"string\">'/gscratch/'</span>+p+<span class=\"string\">'/usage_report.txt'</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(f,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> fo:</span><br><span class=\"line\">            lines = fo.readlines()</span><br><span class=\"line\">        s = lines[<span class=\"number\">2</span>].split()</span><br><span class=\"line\">        print(<span class=\"string\">'%-10s%-12s%-12s%-12s%-12s%-15s%-16s'</span> % (s[<span class=\"number\">0</span>],s[<span class=\"number\">2</span>],s[<span class=\"number\">3</span>],s[<span class=\"number\">4</span>],s[<span class=\"number\">6</span>],s[<span class=\"number\">7</span>],s[<span class=\"number\">8</span>]))</span><br><span class=\"line\"><span class=\"keyword\">except</span> BaseException <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(err)</span><br></pre></td></tr></table></figure>\n<p>If store it to <a href=\"https://github.com/yueliu96/scripts_for_lab/blob/master/gscratch_space.py\" target=\"_blank\" rel=\"noopener\">gscratch_space.py</a> in the home directory and run this script as <code>~/gscratch_space.py</code>, we can get:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name      Use(GB)     Quota(GB)   Limit(GB)   Files       FilesQuota     FilesLimit      </span><br><span class=\"line\">stf       24437       45500       50050       3064981     68250000       75075000        </span><br><span class=\"line\">chem      8884        9000        9900        2327984     9000000        9900000         </span><br><span class=\"line\">ilahie    29325       35500       39050       1522158     53250000       58575000     </span><br><span class=\"line\">scrubbed  91518       200000      220000      12174263    200000000      220000000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Python-Scripts\"><a href=\"#Python-Scripts\" class=\"headerlink\" title=\"Python Scripts\"></a><jump id=\"pyscripts\">Python Scripts</jump></h1><ul>\n<li>It’s a good choice to store useful python scripts in user’s home directory, whose quotas are set to 10 GB with a limit of 5,000 files. </li>\n<li>Python scripts starting with <code>#!/usr/bin/env python</code>, can be executed by <code>directory/pyfile ...</code> besides <code>python pyfile ...</code>. </li>\n<li>Use <code>chmod u+x pyfile</code> if it isn’t executable</li>\n<li><p>Batch operation of python scripts by bash command <code>for ...; do ...; done</code></p>\n<ul>\n<li><p>example: </p>\n<p> If <em>xyz2gjf$.$py</em> (usage: <code>python xyz2gjf.py xyz-file</code> )is in a subdirecotry <em>myscripts</em> of home directory, run <code>chmod u+x ~/myscripts/xyz2gjf.py</code> first if it is not executable, move to a directory containing several xyz files and run <code>for i in *xyz; do ~/myscripts/xyz2gjf.py $i; done</code> to convert all *xyz files to gjf format.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Run-python-No-such-file-or-directory\"><a href=\"#Run-python-No-such-file-or-directory\" class=\"headerlink\" title=\"Run python: No such file or directory\"></a><jump id=\"nofile\">Run python: No such file or directory</jump></h1><p>If python scripts can be executed with <code>python script.py</code> but fails with <code>./script.py</code>:</p>\n<ul>\n<li>Make sure add <code>#!/usr/bin/env python</code> at the head of the script</li>\n<li>Make sure use <code>chmod u+x script.py</code> to make it executable</li>\n</ul>\n<p>If it still fails:</p>\n<ul>\n<li><code>vi scripts.py</code> to open it</li>\n<li><code>:set ff=unix</code> to change it file format</li>\n<li><code>:wq</code> to save it</li>\n</ul>\n<h1 id=\"Squeue-Format\"><a href=\"#Squeue-Format\" class=\"headerlink\" title=\"Squeue Format\"></a><jump id=\"squeue\">Squeue Format</jump></h1><p>add <code>export SQUEUE_FORMAT=&quot;the-format-you-like&quot;</code> to ~/.bash_profile file and then run <code>source ~/.bash_profile</code></p>\n<ul>\n<li><p>My own version:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> SQUEUE_FORMAT=<span class=\"string\">\"%.7i %9P %15j %.8u %.2t %.12M %.12L %.5C %.7m  %.4D %R\"</span></span><br></pre></td></tr></table></figure>\n<p>  what is like:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> JOBID PARTITION NAME          USER ST         TIME    TIME_LEFT  CPUS MIN_MEM  NODE NODELIST(REASON)</span><br><span class=\"line\">547841 chem      gN1_ccsd  yueliu96  R   1-23:14:00  10-12:46:00    28    245G     1 n2079</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Note:</p>\n<ul>\n<li><code>%.</code>: align rigt</li>\n<li><code>%</code> withou dot: aligh left</li>\n<li>integer: length of occupied space</li>\n<li>different letters correspond to diffrent items, see <a href=\"https://slurm.schedmd.com/squeue.html\" target=\"_blank\" rel=\"noopener\">link</a> for details</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Tips on: <a href=\"#scp\">file transfer</a> | <a href=\"#memdisk\">memory &amp; disk space</a> | <a href=\"#pyscripts\">python scripts</a> | <a href=\"#nofile\">Run python: No such file or directory</a> | <a href=\"#squeue\">squeue format</a> | to be continue…</p>\n<p>Hyak Mox Overview website: <a href=\"https://wiki.cac.washington.edu/display/hyakusers/Hyak+mox+Overview\" target=\"_blank\" rel=\"noopener\">click me</a></p>\n<h1 id=\"File-Transfer\"><a href=\"#File-Transfer\" class=\"headerlink\" title=\"File Transfer\"></a><jump id=\"scp\">File Transfer</jump></h1><ul>\n<li><p>from ikt to mox</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hyakbbcp myfile mox1.hyak.uw.edu:mydirectory</span><br><span class=\"line\">hyakbbcp -r myfolder mox1.hyak.uw.edu:mydirectory</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>from mox to ikt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hyakbbcp myfile ikt1.hyak.uw.edu:mydirectory</span><br><span class=\"line\">hyakbbcp -r myfolder ikt1.hyak.uw.edu:mydirectory</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>into hyak</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp myfile user@mox.hyak.uw.edu:path/of/destination</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>out of hyak</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp user@ikt.hyak.uw.edu:path/of/your/file .</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>into or out of hyak by sftp</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sftp user@mox.hyak.uw.edu</span><br><span class=\"line\">get myfile   <span class=\"comment\">#move myfile from hyak to local direcotry</span></span><br><span class=\"line\">get -r myfolder </span><br><span class=\"line\">put myfile   <span class=\"comment\">#move myfile from local directory to hyak</span></span><br><span class=\"line\">put -r myfolder</span><br><span class=\"line\">ls           <span class=\"comment\">#list files and folders on hyak directory</span></span><br><span class=\"line\">lls          <span class=\"comment\">#list files and folders on local directory</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"Memory-and-Disk-Space\"><a href=\"#Memory-and-Disk-Space\" class=\"headerlink\" title=\"Memory and Disk Space\"></a><jump id=\"memdisk\">Memory and Disk Space</jump></h1><ul>\n<li>Commonality<ul>\n<li>Place to hold data</li>\n<li>Unit: bytes, kilobytes, megabytes, etc</li>\n</ul>\n</li>\n<li>Difference<ul>\n<li>Memory is known as random access memory (RAM), which stores actively running programs on the computer. The more memory is, the more it is able to run complex programs and more programs at the same time.</li>\n<li>Disk space is a spindle of magnetic discs to store files you download, install or save.</li>\n</ul>\n</li>\n<li><p>Command</p>\n<ul>\n<li>mem: <code>free -g</code> (g:GB,m:MB,k:KB)</li>\n<li><p>disk space: </p>\n<ul>\n<li><code>df -h</code></li>\n<li>Hyak has usage_report.txt available on every partition (e.g. /gscratch/stf/usage_report.txt) recording the disk space usage. One can quickly know the usage by writing a simple python scripts:</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\">PTT = [<span class=\"string\">'stf'</span>,<span class=\"string\">'chem'</span>,<span class=\"string\">'ilahie'</span>,<span class=\"string\">'scrubbed'</span>]</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'%-10s%-12s%-12s%-12s%-12s%-15s%-16s'</span> % (<span class=\"string\">'Name'</span>,<span class=\"string\">'Use(GB)'</span>,<span class=\"string\">'Quota(GB)'</span>,<span class=\"string\">'Limit(GB)'</span>,<span class=\"string\">'Files'</span>,<span class=\"string\">'FilesQuota'</span>,<span class=\"string\">'FilesLimit'</span>))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> PTT:</span><br><span class=\"line\">        f = <span class=\"string\">'/gscratch/'</span>+p+<span class=\"string\">'/usage_report.txt'</span></span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(f,<span class=\"string\">'r'</span>) <span class=\"keyword\">as</span> fo:</span><br><span class=\"line\">            lines = fo.readlines()</span><br><span class=\"line\">        s = lines[<span class=\"number\">2</span>].split()</span><br><span class=\"line\">        print(<span class=\"string\">'%-10s%-12s%-12s%-12s%-12s%-15s%-16s'</span> % (s[<span class=\"number\">0</span>],s[<span class=\"number\">2</span>],s[<span class=\"number\">3</span>],s[<span class=\"number\">4</span>],s[<span class=\"number\">6</span>],s[<span class=\"number\">7</span>],s[<span class=\"number\">8</span>]))</span><br><span class=\"line\"><span class=\"keyword\">except</span> BaseException <span class=\"keyword\">as</span> err:</span><br><span class=\"line\">    print(err)</span><br></pre></td></tr></table></figure>\n<p>If store it to <a href=\"https://github.com/yueliu96/scripts_for_lab/blob/master/gscratch_space.py\" target=\"_blank\" rel=\"noopener\">gscratch_space.py</a> in the home directory and run this script as <code>~/gscratch_space.py</code>, we can get:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Name      Use(GB)     Quota(GB)   Limit(GB)   Files       FilesQuota     FilesLimit      </span><br><span class=\"line\">stf       24437       45500       50050       3064981     68250000       75075000        </span><br><span class=\"line\">chem      8884        9000        9900        2327984     9000000        9900000         </span><br><span class=\"line\">ilahie    29325       35500       39050       1522158     53250000       58575000     </span><br><span class=\"line\">scrubbed  91518       200000      220000      12174263    200000000      220000000</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Python-Scripts\"><a href=\"#Python-Scripts\" class=\"headerlink\" title=\"Python Scripts\"></a><jump id=\"pyscripts\">Python Scripts</jump></h1><ul>\n<li>It’s a good choice to store useful python scripts in user’s home directory, whose quotas are set to 10 GB with a limit of 5,000 files. </li>\n<li>Python scripts starting with <code>#!/usr/bin/env python</code>, can be executed by <code>directory/pyfile ...</code> besides <code>python pyfile ...</code>. </li>\n<li>Use <code>chmod u+x pyfile</code> if it isn’t executable</li>\n<li><p>Batch operation of python scripts by bash command <code>for ...; do ...; done</code></p>\n<ul>\n<li><p>example: </p>\n<p> If <em>xyz2gjf$.$py</em> (usage: <code>python xyz2gjf.py xyz-file</code> )is in a subdirecotry <em>myscripts</em> of home directory, run <code>chmod u+x ~/myscripts/xyz2gjf.py</code> first if it is not executable, move to a directory containing several xyz files and run <code>for i in *xyz; do ~/myscripts/xyz2gjf.py $i; done</code> to convert all *xyz files to gjf format.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Run-python-No-such-file-or-directory\"><a href=\"#Run-python-No-such-file-or-directory\" class=\"headerlink\" title=\"Run python: No such file or directory\"></a><jump id=\"nofile\">Run python: No such file or directory</jump></h1><p>If python scripts can be executed with <code>python script.py</code> but fails with <code>./script.py</code>:</p>\n<ul>\n<li>Make sure add <code>#!/usr/bin/env python</code> at the head of the script</li>\n<li>Make sure use <code>chmod u+x script.py</code> to make it executable</li>\n</ul>\n<p>If it still fails:</p>\n<ul>\n<li><code>vi scripts.py</code> to open it</li>\n<li><code>:set ff=unix</code> to change it file format</li>\n<li><code>:wq</code> to save it</li>\n</ul>\n<h1 id=\"Squeue-Format\"><a href=\"#Squeue-Format\" class=\"headerlink\" title=\"Squeue Format\"></a><jump id=\"squeue\">Squeue Format</jump></h1><p>add <code>export SQUEUE_FORMAT=&quot;the-format-you-like&quot;</code> to ~/.bash_profile file and then run <code>source ~/.bash_profile</code></p>\n<ul>\n<li><p>My own version:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> SQUEUE_FORMAT=<span class=\"string\">\"%.7i %9P %15j %.8u %.2t %.12M %.12L %.5C %.7m  %.4D %R\"</span></span><br></pre></td></tr></table></figure>\n<p>  what is like:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> JOBID PARTITION NAME          USER ST         TIME    TIME_LEFT  CPUS MIN_MEM  NODE NODELIST(REASON)</span><br><span class=\"line\">547841 chem      gN1_ccsd  yueliu96  R   1-23:14:00  10-12:46:00    28    245G     1 n2079</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Note:</p>\n<ul>\n<li><code>%.</code>: align rigt</li>\n<li><code>%</code> withou dot: aligh left</li>\n<li>integer: length of occupied space</li>\n<li>different letters correspond to diffrent items, see <a href=\"https://slurm.schedmd.com/squeue.html\" target=\"_blank\" rel=\"noopener\">link</a> for details</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Jointly Gaussian Variables","date":"2019-10-30T02:12:09.000Z","_content":"\n# Gaussian Variables\n\n$$x \\sim \\mathcal{N}(\\mu,\\sigma^2) : f(x | \\mu , \\sigma^2) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$\n\n- $\\mu$ is the mean or expectation of the distribution\n- $\\sigma$ is the standard deviation\n- $\\sigma^2$ is the variance\n\n# Jointly Gaussian Variables\n\n$$\\mathbf{X} \\sim \\mathcal{N_k}(\\mathbf{\\mu},\\mathbf{\\Sigma}): f_{\\mathbf{X}}(x_1,\\cdots,x_k) = \\frac{\\exp(-\\frac{1}{2}(\\mathbf{x}-\\mathbf{\\mu})^T\\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\mathbf{\\mu}))}{\\sqrt{(2\\pi)^k|\\mathbf{\\Sigma}|}}$$\n\n- $\\mathbf{\\mu} = E[\\mathbf{X}] = (E[X_1],E[X_2],\\cdots,E[X_k])^T$\n- $\\mathbf{\\Sigma}$: $\\Sigma_{ij} = E[(X_i-\\mu_i)(X_j-\\mu_j)] = Cov[X_i,X_j]$\n\n## Linear Transformation of Gaussian Variables\n\nIf $X\\sim \\mathcal{N_n}(\\mu_x,\\Sigma_x)$ and $Y^m = A^{m\\times n}X^n$, then $Y \\sim \\mathcal{N}(A\\mu_x,A\\Sigma_x A^T)$\n\nProve for $n=m$:\n$$\\begin{aligned}\nf_Y(y) &= f_X(A^{-1}y)/|A|\\\\\n&= \\frac{\\exp(-\\frac{1}{2}(A^{-1}y-\\mu_x)^T\\Sigma_x^{-1}(A^{-1}y-\\mu_x))}{(2\\pi)^{n/2}|\\Sigma_x|^{1/2}|A|}\\\\\n&= \\frac{\\exp(-\\frac{1}{2}(y-A\\mu_x)^T(A\\Sigma_x A^T)^{-1}(y-A\\mu_x))}{(2\\pi)^{n/2}|A\\Sigma_x A^T|^{1/2}}\\\\\n\\end{aligned}$$\n\n## Example\n\n$\\mathbf{X}$: independent, zero-mean, unit-variance Gaussian random variables. Build $\\mathbf{Y}$ in terms of $\\mathbf{X}$ so that $\\mathbf{Y} \\sim \\mathcal{N}(\\mathbf{\\mu},\\mathbf{\\Sigma})$\n\nSolutions:\n\n- Find the matrix satisfying $\\Sigma = AA^T$\n- $Y = A\\mathbf{X}+\\mathbf{\\mu}$","source":"_posts/Jointly-Gaussian-Variables.md","raw":"---\ntitle: Jointly Gaussian Variables\ndate: 2019-10-29 19:12:09\ntags:\n- Math\n- Probability\ncategories:\n- Probability & Random Process\n---\n\n# Gaussian Variables\n\n$$x \\sim \\mathcal{N}(\\mu,\\sigma^2) : f(x | \\mu , \\sigma^2) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$\n\n- $\\mu$ is the mean or expectation of the distribution\n- $\\sigma$ is the standard deviation\n- $\\sigma^2$ is the variance\n\n# Jointly Gaussian Variables\n\n$$\\mathbf{X} \\sim \\mathcal{N_k}(\\mathbf{\\mu},\\mathbf{\\Sigma}): f_{\\mathbf{X}}(x_1,\\cdots,x_k) = \\frac{\\exp(-\\frac{1}{2}(\\mathbf{x}-\\mathbf{\\mu})^T\\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\mathbf{\\mu}))}{\\sqrt{(2\\pi)^k|\\mathbf{\\Sigma}|}}$$\n\n- $\\mathbf{\\mu} = E[\\mathbf{X}] = (E[X_1],E[X_2],\\cdots,E[X_k])^T$\n- $\\mathbf{\\Sigma}$: $\\Sigma_{ij} = E[(X_i-\\mu_i)(X_j-\\mu_j)] = Cov[X_i,X_j]$\n\n## Linear Transformation of Gaussian Variables\n\nIf $X\\sim \\mathcal{N_n}(\\mu_x,\\Sigma_x)$ and $Y^m = A^{m\\times n}X^n$, then $Y \\sim \\mathcal{N}(A\\mu_x,A\\Sigma_x A^T)$\n\nProve for $n=m$:\n$$\\begin{aligned}\nf_Y(y) &= f_X(A^{-1}y)/|A|\\\\\n&= \\frac{\\exp(-\\frac{1}{2}(A^{-1}y-\\mu_x)^T\\Sigma_x^{-1}(A^{-1}y-\\mu_x))}{(2\\pi)^{n/2}|\\Sigma_x|^{1/2}|A|}\\\\\n&= \\frac{\\exp(-\\frac{1}{2}(y-A\\mu_x)^T(A\\Sigma_x A^T)^{-1}(y-A\\mu_x))}{(2\\pi)^{n/2}|A\\Sigma_x A^T|^{1/2}}\\\\\n\\end{aligned}$$\n\n## Example\n\n$\\mathbf{X}$: independent, zero-mean, unit-variance Gaussian random variables. Build $\\mathbf{Y}$ in terms of $\\mathbf{X}$ so that $\\mathbf{Y} \\sim \\mathcal{N}(\\mathbf{\\mu},\\mathbf{\\Sigma})$\n\nSolutions:\n\n- Find the matrix satisfying $\\Sigma = AA^T$\n- $Y = A\\mathbf{X}+\\mathbf{\\mu}$","slug":"Jointly-Gaussian-Variables","published":1,"updated":"2019-10-30T04:02:16.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eazb0007mhmojh7ms5bn","content":"<h1 id=\"Gaussian-Variables\"><a href=\"#Gaussian-Variables\" class=\"headerlink\" title=\"Gaussian Variables\"></a>Gaussian Variables</h1><p>$$x \\sim \\mathcal{N}(\\mu,\\sigma^2) : f(x | \\mu , \\sigma^2) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$</p>\n<ul>\n<li>$\\mu$ is the mean or expectation of the distribution</li>\n<li>$\\sigma$ is the standard deviation</li>\n<li>$\\sigma^2$ is the variance</li>\n</ul>\n<h1 id=\"Jointly-Gaussian-Variables\"><a href=\"#Jointly-Gaussian-Variables\" class=\"headerlink\" title=\"Jointly Gaussian Variables\"></a>Jointly Gaussian Variables</h1><p>$$\\mathbf{X} \\sim \\mathcal{N_k}(\\mathbf{\\mu},\\mathbf{\\Sigma}): f_{\\mathbf{X}}(x_1,\\cdots,x_k) = \\frac{\\exp(-\\frac{1}{2}(\\mathbf{x}-\\mathbf{\\mu})^T\\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\mathbf{\\mu}))}{\\sqrt{(2\\pi)^k|\\mathbf{\\Sigma}|}}$$</p>\n<ul>\n<li>$\\mathbf{\\mu} = E[\\mathbf{X}] = (E[X_1],E[X_2],\\cdots,E[X_k])^T$</li>\n<li>$\\mathbf{\\Sigma}$: $\\Sigma_{ij} = E[(X_i-\\mu_i)(X_j-\\mu_j)] = Cov[X_i,X_j]$</li>\n</ul>\n<h2 id=\"Linear-Transformation-of-Gaussian-Variables\"><a href=\"#Linear-Transformation-of-Gaussian-Variables\" class=\"headerlink\" title=\"Linear Transformation of Gaussian Variables\"></a>Linear Transformation of Gaussian Variables</h2><p>If $X\\sim \\mathcal{N_n}(\\mu_x,\\Sigma_x)$ and $Y^m = A^{m\\times n}X^n$, then $Y \\sim \\mathcal{N}(A\\mu_x,A\\Sigma_x A^T)$</p>\n<p>Prove for $n=m$:<br>$$\\begin{aligned}<br>f_Y(y) &amp;= f_X(A^{-1}y)/|A|\\\\<br>&amp;= \\frac{\\exp(-\\frac{1}{2}(A^{-1}y-\\mu_x)^T\\Sigma_x^{-1}(A^{-1}y-\\mu_x))}{(2\\pi)^{n/2}|\\Sigma_x|^{1/2}|A|}\\\\<br>&amp;= \\frac{\\exp(-\\frac{1}{2}(y-A\\mu_x)^T(A\\Sigma_x A^T)^{-1}(y-A\\mu_x))}{(2\\pi)^{n/2}|A\\Sigma_x A^T|^{1/2}}\\\\<br>\\end{aligned}$$</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>$\\mathbf{X}$: independent, zero-mean, unit-variance Gaussian random variables. Build $\\mathbf{Y}$ in terms of $\\mathbf{X}$ so that $\\mathbf{Y} \\sim \\mathcal{N}(\\mathbf{\\mu},\\mathbf{\\Sigma})$</p>\n<p>Solutions:</p>\n<ul>\n<li>Find the matrix satisfying $\\Sigma = AA^T$</li>\n<li>$Y = A\\mathbf{X}+\\mathbf{\\mu}$</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Gaussian-Variables\"><a href=\"#Gaussian-Variables\" class=\"headerlink\" title=\"Gaussian Variables\"></a>Gaussian Variables</h1><p>$$x \\sim \\mathcal{N}(\\mu,\\sigma^2) : f(x | \\mu , \\sigma^2) = \\frac{1}{\\sqrt{2\\pi \\sigma^2}}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}$$</p>\n<ul>\n<li>$\\mu$ is the mean or expectation of the distribution</li>\n<li>$\\sigma$ is the standard deviation</li>\n<li>$\\sigma^2$ is the variance</li>\n</ul>\n<h1 id=\"Jointly-Gaussian-Variables\"><a href=\"#Jointly-Gaussian-Variables\" class=\"headerlink\" title=\"Jointly Gaussian Variables\"></a>Jointly Gaussian Variables</h1><p>$$\\mathbf{X} \\sim \\mathcal{N_k}(\\mathbf{\\mu},\\mathbf{\\Sigma}): f_{\\mathbf{X}}(x_1,\\cdots,x_k) = \\frac{\\exp(-\\frac{1}{2}(\\mathbf{x}-\\mathbf{\\mu})^T\\mathbf{\\Sigma}^{-1}(\\mathbf{x}-\\mathbf{\\mu}))}{\\sqrt{(2\\pi)^k|\\mathbf{\\Sigma}|}}$$</p>\n<ul>\n<li>$\\mathbf{\\mu} = E[\\mathbf{X}] = (E[X_1],E[X_2],\\cdots,E[X_k])^T$</li>\n<li>$\\mathbf{\\Sigma}$: $\\Sigma_{ij} = E[(X_i-\\mu_i)(X_j-\\mu_j)] = Cov[X_i,X_j]$</li>\n</ul>\n<h2 id=\"Linear-Transformation-of-Gaussian-Variables\"><a href=\"#Linear-Transformation-of-Gaussian-Variables\" class=\"headerlink\" title=\"Linear Transformation of Gaussian Variables\"></a>Linear Transformation of Gaussian Variables</h2><p>If $X\\sim \\mathcal{N_n}(\\mu_x,\\Sigma_x)$ and $Y^m = A^{m\\times n}X^n$, then $Y \\sim \\mathcal{N}(A\\mu_x,A\\Sigma_x A^T)$</p>\n<p>Prove for $n=m$:<br>$$\\begin{aligned}<br>f_Y(y) &amp;= f_X(A^{-1}y)/|A|\\\\<br>&amp;= \\frac{\\exp(-\\frac{1}{2}(A^{-1}y-\\mu_x)^T\\Sigma_x^{-1}(A^{-1}y-\\mu_x))}{(2\\pi)^{n/2}|\\Sigma_x|^{1/2}|A|}\\\\<br>&amp;= \\frac{\\exp(-\\frac{1}{2}(y-A\\mu_x)^T(A\\Sigma_x A^T)^{-1}(y-A\\mu_x))}{(2\\pi)^{n/2}|A\\Sigma_x A^T|^{1/2}}\\\\<br>\\end{aligned}$$</p>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p>$\\mathbf{X}$: independent, zero-mean, unit-variance Gaussian random variables. Build $\\mathbf{Y}$ in terms of $\\mathbf{X}$ so that $\\mathbf{Y} \\sim \\mathcal{N}(\\mathbf{\\mu},\\mathbf{\\Sigma})$</p>\n<p>Solutions:</p>\n<ul>\n<li>Find the matrix satisfying $\\Sigma = AA^T$</li>\n<li>$Y = A\\mathbf{X}+\\mathbf{\\mu}$</li>\n</ul>\n"},{"title":"Gaussian Troubleshooting","date":"2019-01-23T04:05:42.000Z","_content":"\nTroubleshooting about:  [Freq: Negative Frequency](#nfreq) | [Freq job never stops calculating vectors](#vecfreq) | [Opt: Energy Oscillates](#eosc) | [Opt: FormBX had a problem](#formbx) | [Opt-Solution: Inv3 failed in PCMMkU](#pcm) | [Transformation cannot fit in the specified MaxDisk](#maxdisk) | To be continue ...\n\n# <jump id='eosc'>Energy oscillates and opt never converges (I)</jump>\n\nIf during geometry optimization the energy oscillates as shown in the following figure:\n![E_osc](https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc.PNG)\n\nTry ([Reference](https://www.researchgate.net/post/What_are_possible_solutions_when_the_during_geometry_optimization_the_energy_oscillates_as_shown_in_attachment)):\n\n1. restart the geometry optimization from the point with the lowest energy (step 60 marked by a red circle for this case). It works for all of my jobs for now. If it doesn't work, try what is listed below. But the following two methods either runs forever or doesn't help in my cases.\n2. change `opt` to `opt(calcfc)` on the route card\n   - specifies that the force constants be computed at the first point using the current method.\n   - ensures that the calculation starts with accurate second derivatives, but may be too expensive to be practical. \n   - e.g., one of my jobs take 9 hours to finish with `opt(calcfc)` compared to 3 hours without it.\n3. add another keyword [`Integral(UltraFine)`](http://gaussian.com/integral/) on the route card\n   - It is recommended for molecules containing lots of tetrahedral centers and for computing very low frequency modes of systems to use.\n   - Also useful for optimizations of larger molecules with many soft modes such as methyl rotations, making such optimizations more reliable.\n   - But note that it is very important to **use the same gride for all calculations where you intend to compare energies**.\n\n# Energy oscillates and opt never converges (II)\n\nAnother type of energy oscillation is shown in the following figure. Energies always oscillate around a certain number and rarely change due to small gradient values (close to  0). \n\n![RMS small](https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc2.PNG)\n\nSolution:\n\nLoad the output file to GaussView and see how structures change with optimation step numbers. Manually modify the structure by a little bit and reoptimize it again. Usually change the angle between two atoms/groups where structres get stuck.\n\n# <jump id='formbx'>FormBX had a problem</jump>\n\nIf get error message like:\n\n```\n GradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGrad\n Berny optimization.\n Using GEDIIS/GDIIS optimizer.\n Bend failed for angle    33 -    87 -    81\n Tors failed for dihedral    32 -    33 -    87 -    81\n Tors failed for dihedral    34 -    33 -    87 -    81\n Tors failed for dihedral    86 -    33 -    87 -    81\n Tors failed for dihedral    15 -    81 -    87 -    33\n FormBX had a problem.\n Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l103.exe at Tue Jan 22 12:58:22 2019.\n```\n\nThat means the angle formed by atom 33, 87 and 81 is 180$^\\circ$. So, modify it manually and start over optimization again.\n\n# <jump id='pcm'> Inv3 failed in PCMMkU </jump>\n\nThis is related to the solute cavity of the solvent model. The default option for SCRF is Polarizable Continuum Model (PCM), which creates the solute cavities via a set of overlapping spheres centered on the atom and with certain atomic radii. The default atomic radii are small, resulting in the solvent cavity of larger molecules looks like \"cheese\". There are many holes and grooves that are mathematically exposed to the solvent, while these locations are not exposed to solvents in actual systems. This causes the problem of non-convergence during the iteration of the PCM matrix.\n\nTo solve this problem, we can add additional input: [**Surface**=*type*](http://gaussian.com/scrf/): specify the type of molecular surface representing the solute-solvent boundary. Available options are:\n\n- VDW: Van der Waals surface. Uses atomic radii (scaled) and skips the generation of “added spheres” to smooth the surface. This is the default.\n- SES: Solvent Excluding Surface. The surface is generated by the atomic or group spheres and by the spheres created automatically to smooth the surface (“added spheres”). This was the default in Gaussian 03. It can eliminate the above mentioned holes and grooves, but the surface made by this method doesn't change continuously with the change of conformation, causing the potential energy surface isn't continuous and smooth and it is difficult to perform geometric optimization.\n- SAS: Solvent Accessible Surface. The radius of the solvent is added to the unscaled radii of atoms and/or atomic groups. There is no \"cheese problem\" and dicontinuity on SAS surface. But it might underestimate the solvation effect compared to VDW and SES due to the large solute cavity.\n\n![scrf](https://raw.githubusercontent.com/yueliu96/blog_images/master/scrf_surface.png)\n\nA good solution is to optimize with SAS following by single point energy calcuation with SES surface. To optimize with SAS or SES, e.g. add `scrf(pcm, solvent=water, read)` on the route card, and `Surface=SAS` or `Surface=SES AddSph` on the additional section, which is after molecular specification and also terminated with a blank line.\n\n```\n%mem=60gb\n%nprocshared=28\n%chk=test.chk\n# opt wb97xd/6-31+g(d,p) pop=none scf=(xqc,tight) scrf=(pcm,solvent=water,read)\n\nTitle section\n\nCharge Multiplicity\nMolecular Coordinates\n\nsurface=sas\n\n--Link1--\n%chk=test.chk\n%mem=60gb\n%nprocshared=28\n# wb97xd/6-31+g(d,p) pop=none scf=(sqc,tight) scrf=(pcm,solvent=water,read) geom=allcheck\n\nsurface=ses addsph\n! terminate by a blank line\n```\n\n# <jump id='nfreq'> Negative Frequency </jump>\n\nGaussian optimization algorithm uses the gradient descent to find the closest minmum ($f'(x)=0$). However, the gradient of a local maximum point is also 0, which corresponds to a transition state. A transition state should have one negative/imaginary frequency.\n\nFrequencies can be visualized after loading the output file into GaussView. What we should do is locate the imaginary frequency, move the atom/atom group in the direction of this vibration, reoptimize this modified structure and calculate the frequency again.\n\n# <jump id='vecfreq'> Freq Job Never Stops Calculating Vectors</jump>\n\nGaussian uses two different algorithms to do a frequency calculation (solving the CPHF equations) The  standard one uses a lot of RAM memory but is very fast. However, when RAM memory is not enough or the number of CPHF  equations exceeds 5000 by default, gaussian uses another algorithm, this tries to save RAM memory  by storing intermediate results on a hard disk. This takes very long making the calculations practically  inactive.\n\nIf limited by RAM memory, increase it by linkwords `%mem=xxx`. If  CPHF equations exceed 5000 and there is enough memory available, add an extra keyword: `CPHF(MaxInv=10000)` on the route card. This puts the maximum number of  CPHF equations for the basic algorithm to 10,000.\n\n# <jump id='maxdisk'>Transformation cannot fit in the specified MaxDisk</jump>\n\nWe will get this error when specifying `maxdisk=xxx` and the disk is not enough to finish the current job.\n\nThe MaxDisk keyword specifies the amount of disk storage available for scratch data. But some jobs, like CCSD, CCSD(T), QCISD(T), and BD(T) energies have fixed disk which cannot be limited by MaxDisk. In this case, if the disk storage is not enough, we will get error information like:\n\n```\n Semi-Direct transformation.\n ModeAB=           4 MOrb=            51 LenV=   26834989397\n LASXX=   3675829080 LTotXX=  3675829080 LenRXX=  7405142880\n LTotAB=  3729313800 MaxLAS=  4334140395 LenRXY=           0\n NonZer= 11080971960 LenScr= 22248854016 LnRSAI=  4334140395\n LnScr1=  8702274560 LExtra=   897554704 Total=  43587966555\n MaxDsk= 13421772800 SrtSym=           T ITran=            4\n Transformation cannot fit in the specified MaxDisk.\n Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l804.exe at Wed Dec 19 01:05:37 2018.\n Job cpu time:       0 days  7 hours 19 minutes 44.3 seconds.\n Elapsed time:       0 days  0 hours 15 minutes 43.2 seconds.\n File lengths (MBytes):  RWF=  63349 Int=      0 D2E=      0 Chk=     16 Scr=      1\n```\n\nWhere, `MaxDsk=13421772800` means I uses `maxdisk=100G` ($\\frac{13421772800\\times8}{1024^3}$); `Total=43587966555` means the minimum disk should be 325G ($\\frac{43587966555\\times8}{1024^3}$).\n\nFor Hyak, there is around 100G storage space for one node. So we can locate the largest scratch file (read and write file) to `/gscratch/scrubbed/username/` like:\n\n```bash\n%rwf=/gscratch/scrubbed/yueliu96/test.rwf\n%nosave\n```","source":"_posts/Gaussian-Troubleshooting.md","raw":"---\ntitle: Gaussian Troubleshooting\ndate: 2019-01-22 20:05:42\ntags:\n- Software Tutorial\ncategories:\n- Turecek Lab Tutorial\n---\n\nTroubleshooting about:  [Freq: Negative Frequency](#nfreq) | [Freq job never stops calculating vectors](#vecfreq) | [Opt: Energy Oscillates](#eosc) | [Opt: FormBX had a problem](#formbx) | [Opt-Solution: Inv3 failed in PCMMkU](#pcm) | [Transformation cannot fit in the specified MaxDisk](#maxdisk) | To be continue ...\n\n# <jump id='eosc'>Energy oscillates and opt never converges (I)</jump>\n\nIf during geometry optimization the energy oscillates as shown in the following figure:\n![E_osc](https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc.PNG)\n\nTry ([Reference](https://www.researchgate.net/post/What_are_possible_solutions_when_the_during_geometry_optimization_the_energy_oscillates_as_shown_in_attachment)):\n\n1. restart the geometry optimization from the point with the lowest energy (step 60 marked by a red circle for this case). It works for all of my jobs for now. If it doesn't work, try what is listed below. But the following two methods either runs forever or doesn't help in my cases.\n2. change `opt` to `opt(calcfc)` on the route card\n   - specifies that the force constants be computed at the first point using the current method.\n   - ensures that the calculation starts with accurate second derivatives, but may be too expensive to be practical. \n   - e.g., one of my jobs take 9 hours to finish with `opt(calcfc)` compared to 3 hours without it.\n3. add another keyword [`Integral(UltraFine)`](http://gaussian.com/integral/) on the route card\n   - It is recommended for molecules containing lots of tetrahedral centers and for computing very low frequency modes of systems to use.\n   - Also useful for optimizations of larger molecules with many soft modes such as methyl rotations, making such optimizations more reliable.\n   - But note that it is very important to **use the same gride for all calculations where you intend to compare energies**.\n\n# Energy oscillates and opt never converges (II)\n\nAnother type of energy oscillation is shown in the following figure. Energies always oscillate around a certain number and rarely change due to small gradient values (close to  0). \n\n![RMS small](https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc2.PNG)\n\nSolution:\n\nLoad the output file to GaussView and see how structures change with optimation step numbers. Manually modify the structure by a little bit and reoptimize it again. Usually change the angle between two atoms/groups where structres get stuck.\n\n# <jump id='formbx'>FormBX had a problem</jump>\n\nIf get error message like:\n\n```\n GradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGrad\n Berny optimization.\n Using GEDIIS/GDIIS optimizer.\n Bend failed for angle    33 -    87 -    81\n Tors failed for dihedral    32 -    33 -    87 -    81\n Tors failed for dihedral    34 -    33 -    87 -    81\n Tors failed for dihedral    86 -    33 -    87 -    81\n Tors failed for dihedral    15 -    81 -    87 -    33\n FormBX had a problem.\n Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l103.exe at Tue Jan 22 12:58:22 2019.\n```\n\nThat means the angle formed by atom 33, 87 and 81 is 180$^\\circ$. So, modify it manually and start over optimization again.\n\n# <jump id='pcm'> Inv3 failed in PCMMkU </jump>\n\nThis is related to the solute cavity of the solvent model. The default option for SCRF is Polarizable Continuum Model (PCM), which creates the solute cavities via a set of overlapping spheres centered on the atom and with certain atomic radii. The default atomic radii are small, resulting in the solvent cavity of larger molecules looks like \"cheese\". There are many holes and grooves that are mathematically exposed to the solvent, while these locations are not exposed to solvents in actual systems. This causes the problem of non-convergence during the iteration of the PCM matrix.\n\nTo solve this problem, we can add additional input: [**Surface**=*type*](http://gaussian.com/scrf/): specify the type of molecular surface representing the solute-solvent boundary. Available options are:\n\n- VDW: Van der Waals surface. Uses atomic radii (scaled) and skips the generation of “added spheres” to smooth the surface. This is the default.\n- SES: Solvent Excluding Surface. The surface is generated by the atomic or group spheres and by the spheres created automatically to smooth the surface (“added spheres”). This was the default in Gaussian 03. It can eliminate the above mentioned holes and grooves, but the surface made by this method doesn't change continuously with the change of conformation, causing the potential energy surface isn't continuous and smooth and it is difficult to perform geometric optimization.\n- SAS: Solvent Accessible Surface. The radius of the solvent is added to the unscaled radii of atoms and/or atomic groups. There is no \"cheese problem\" and dicontinuity on SAS surface. But it might underestimate the solvation effect compared to VDW and SES due to the large solute cavity.\n\n![scrf](https://raw.githubusercontent.com/yueliu96/blog_images/master/scrf_surface.png)\n\nA good solution is to optimize with SAS following by single point energy calcuation with SES surface. To optimize with SAS or SES, e.g. add `scrf(pcm, solvent=water, read)` on the route card, and `Surface=SAS` or `Surface=SES AddSph` on the additional section, which is after molecular specification and also terminated with a blank line.\n\n```\n%mem=60gb\n%nprocshared=28\n%chk=test.chk\n# opt wb97xd/6-31+g(d,p) pop=none scf=(xqc,tight) scrf=(pcm,solvent=water,read)\n\nTitle section\n\nCharge Multiplicity\nMolecular Coordinates\n\nsurface=sas\n\n--Link1--\n%chk=test.chk\n%mem=60gb\n%nprocshared=28\n# wb97xd/6-31+g(d,p) pop=none scf=(sqc,tight) scrf=(pcm,solvent=water,read) geom=allcheck\n\nsurface=ses addsph\n! terminate by a blank line\n```\n\n# <jump id='nfreq'> Negative Frequency </jump>\n\nGaussian optimization algorithm uses the gradient descent to find the closest minmum ($f'(x)=0$). However, the gradient of a local maximum point is also 0, which corresponds to a transition state. A transition state should have one negative/imaginary frequency.\n\nFrequencies can be visualized after loading the output file into GaussView. What we should do is locate the imaginary frequency, move the atom/atom group in the direction of this vibration, reoptimize this modified structure and calculate the frequency again.\n\n# <jump id='vecfreq'> Freq Job Never Stops Calculating Vectors</jump>\n\nGaussian uses two different algorithms to do a frequency calculation (solving the CPHF equations) The  standard one uses a lot of RAM memory but is very fast. However, when RAM memory is not enough or the number of CPHF  equations exceeds 5000 by default, gaussian uses another algorithm, this tries to save RAM memory  by storing intermediate results on a hard disk. This takes very long making the calculations practically  inactive.\n\nIf limited by RAM memory, increase it by linkwords `%mem=xxx`. If  CPHF equations exceed 5000 and there is enough memory available, add an extra keyword: `CPHF(MaxInv=10000)` on the route card. This puts the maximum number of  CPHF equations for the basic algorithm to 10,000.\n\n# <jump id='maxdisk'>Transformation cannot fit in the specified MaxDisk</jump>\n\nWe will get this error when specifying `maxdisk=xxx` and the disk is not enough to finish the current job.\n\nThe MaxDisk keyword specifies the amount of disk storage available for scratch data. But some jobs, like CCSD, CCSD(T), QCISD(T), and BD(T) energies have fixed disk which cannot be limited by MaxDisk. In this case, if the disk storage is not enough, we will get error information like:\n\n```\n Semi-Direct transformation.\n ModeAB=           4 MOrb=            51 LenV=   26834989397\n LASXX=   3675829080 LTotXX=  3675829080 LenRXX=  7405142880\n LTotAB=  3729313800 MaxLAS=  4334140395 LenRXY=           0\n NonZer= 11080971960 LenScr= 22248854016 LnRSAI=  4334140395\n LnScr1=  8702274560 LExtra=   897554704 Total=  43587966555\n MaxDsk= 13421772800 SrtSym=           T ITran=            4\n Transformation cannot fit in the specified MaxDisk.\n Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l804.exe at Wed Dec 19 01:05:37 2018.\n Job cpu time:       0 days  7 hours 19 minutes 44.3 seconds.\n Elapsed time:       0 days  0 hours 15 minutes 43.2 seconds.\n File lengths (MBytes):  RWF=  63349 Int=      0 D2E=      0 Chk=     16 Scr=      1\n```\n\nWhere, `MaxDsk=13421772800` means I uses `maxdisk=100G` ($\\frac{13421772800\\times8}{1024^3}$); `Total=43587966555` means the minimum disk should be 325G ($\\frac{43587966555\\times8}{1024^3}$).\n\nFor Hyak, there is around 100G storage space for one node. So we can locate the largest scratch file (read and write file) to `/gscratch/scrubbed/username/` like:\n\n```bash\n%rwf=/gscratch/scrubbed/yueliu96/test.rwf\n%nosave\n```","slug":"Gaussian-Troubleshooting","published":1,"updated":"2019-04-08T06:22:36.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eb0a000qmhmoouvgu0u2","content":"<p>Troubleshooting about:  <a href=\"#nfreq\">Freq: Negative Frequency</a> | <a href=\"#vecfreq\">Freq job never stops calculating vectors</a> | <a href=\"#eosc\">Opt: Energy Oscillates</a> | <a href=\"#formbx\">Opt: FormBX had a problem</a> | <a href=\"#pcm\">Opt-Solution: Inv3 failed in PCMMkU</a> | <a href=\"#maxdisk\">Transformation cannot fit in the specified MaxDisk</a> | To be continue …</p>\n<h1 id=\"Energy-oscillates-and-opt-never-converges-I\"><a href=\"#Energy-oscillates-and-opt-never-converges-I\" class=\"headerlink\" title=\"Energy oscillates and opt never converges (I)\"></a><jump id=\"eosc\">Energy oscillates and opt never converges (I)</jump></h1><p>If during geometry optimization the energy oscillates as shown in the following figure:<br><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc.PNG\" alt=\"E_osc\"></p>\n<p>Try (<a href=\"https://www.researchgate.net/post/What_are_possible_solutions_when_the_during_geometry_optimization_the_energy_oscillates_as_shown_in_attachment\" target=\"_blank\" rel=\"noopener\">Reference</a>):</p>\n<ol>\n<li>restart the geometry optimization from the point with the lowest energy (step 60 marked by a red circle for this case). It works for all of my jobs for now. If it doesn’t work, try what is listed below. But the following two methods either runs forever or doesn’t help in my cases.</li>\n<li>change <code>opt</code> to <code>opt(calcfc)</code> on the route card<ul>\n<li>specifies that the force constants be computed at the first point using the current method.</li>\n<li>ensures that the calculation starts with accurate second derivatives, but may be too expensive to be practical. </li>\n<li>e.g., one of my jobs take 9 hours to finish with <code>opt(calcfc)</code> compared to 3 hours without it.</li>\n</ul>\n</li>\n<li>add another keyword <a href=\"http://gaussian.com/integral/\" target=\"_blank\" rel=\"noopener\"><code>Integral(UltraFine)</code></a> on the route card<ul>\n<li>It is recommended for molecules containing lots of tetrahedral centers and for computing very low frequency modes of systems to use.</li>\n<li>Also useful for optimizations of larger molecules with many soft modes such as methyl rotations, making such optimizations more reliable.</li>\n<li>But note that it is very important to <strong>use the same gride for all calculations where you intend to compare energies</strong>.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Energy-oscillates-and-opt-never-converges-II\"><a href=\"#Energy-oscillates-and-opt-never-converges-II\" class=\"headerlink\" title=\"Energy oscillates and opt never converges (II)\"></a>Energy oscillates and opt never converges (II)</h1><p>Another type of energy oscillation is shown in the following figure. Energies always oscillate around a certain number and rarely change due to small gradient values (close to  0). </p>\n<p><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc2.PNG\" alt=\"RMS small\"></p>\n<p>Solution:</p>\n<p>Load the output file to GaussView and see how structures change with optimation step numbers. Manually modify the structure by a little bit and reoptimize it again. Usually change the angle between two atoms/groups where structres get stuck.</p>\n<h1 id=\"FormBX-had-a-problem\"><a href=\"#FormBX-had-a-problem\" class=\"headerlink\" title=\"FormBX had a problem\"></a><jump id=\"formbx\">FormBX had a problem</jump></h1><p>If get error message like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGrad</span><br><span class=\"line\">Berny optimization.</span><br><span class=\"line\">Using GEDIIS/GDIIS optimizer.</span><br><span class=\"line\">Bend failed for angle    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    32 -    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    34 -    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    86 -    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    15 -    81 -    87 -    33</span><br><span class=\"line\">FormBX had a problem.</span><br><span class=\"line\">Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l103.exe at Tue Jan 22 12:58:22 2019.</span><br></pre></td></tr></table></figure>\n<p>That means the angle formed by atom 33, 87 and 81 is 180$^\\circ$. So, modify it manually and start over optimization again.</p>\n<h1 id=\"Inv3-failed-in-PCMMkU\"><a href=\"#Inv3-failed-in-PCMMkU\" class=\"headerlink\" title=\" Inv3 failed in PCMMkU \"></a><jump id=\"pcm\"> Inv3 failed in PCMMkU </jump></h1><p>This is related to the solute cavity of the solvent model. The default option for SCRF is Polarizable Continuum Model (PCM), which creates the solute cavities via a set of overlapping spheres centered on the atom and with certain atomic radii. The default atomic radii are small, resulting in the solvent cavity of larger molecules looks like “cheese”. There are many holes and grooves that are mathematically exposed to the solvent, while these locations are not exposed to solvents in actual systems. This causes the problem of non-convergence during the iteration of the PCM matrix.</p>\n<p>To solve this problem, we can add additional input: <a href=\"http://gaussian.com/scrf/\" target=\"_blank\" rel=\"noopener\"><strong>Surface</strong>=<em>type</em></a>: specify the type of molecular surface representing the solute-solvent boundary. Available options are:</p>\n<ul>\n<li>VDW: Van der Waals surface. Uses atomic radii (scaled) and skips the generation of “added spheres” to smooth the surface. This is the default.</li>\n<li>SES: Solvent Excluding Surface. The surface is generated by the atomic or group spheres and by the spheres created automatically to smooth the surface (“added spheres”). This was the default in Gaussian 03. It can eliminate the above mentioned holes and grooves, but the surface made by this method doesn’t change continuously with the change of conformation, causing the potential energy surface isn’t continuous and smooth and it is difficult to perform geometric optimization.</li>\n<li>SAS: Solvent Accessible Surface. The radius of the solvent is added to the unscaled radii of atoms and/or atomic groups. There is no “cheese problem” and dicontinuity on SAS surface. But it might underestimate the solvation effect compared to VDW and SES due to the large solute cavity.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/scrf_surface.png\" alt=\"scrf\"></p>\n<p>A good solution is to optimize with SAS following by single point energy calcuation with SES surface. To optimize with SAS or SES, e.g. add <code>scrf(pcm, solvent=water, read)</code> on the route card, and <code>Surface=SAS</code> or <code>Surface=SES AddSph</code> on the additional section, which is after molecular specification and also terminated with a blank line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=60gb</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%chk=test.chk</span><br><span class=\"line\"># opt wb97xd/6-31+g(d,p) pop=none scf=(xqc,tight) scrf=(pcm,solvent=water,read)</span><br><span class=\"line\"></span><br><span class=\"line\">Title section</span><br><span class=\"line\"></span><br><span class=\"line\">Charge Multiplicity</span><br><span class=\"line\">Molecular Coordinates</span><br><span class=\"line\"></span><br><span class=\"line\">surface=sas</span><br><span class=\"line\"></span><br><span class=\"line\">--Link1--</span><br><span class=\"line\">%chk=test.chk</span><br><span class=\"line\">%mem=60gb</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\"># wb97xd/6-31+g(d,p) pop=none scf=(sqc,tight) scrf=(pcm,solvent=water,read) geom=allcheck</span><br><span class=\"line\"></span><br><span class=\"line\">surface=ses addsph</span><br><span class=\"line\">! terminate by a blank line</span><br></pre></td></tr></table></figure>\n<h1 id=\"Negative-Frequency\"><a href=\"#Negative-Frequency\" class=\"headerlink\" title=\" Negative Frequency \"></a><jump id=\"nfreq\"> Negative Frequency </jump></h1><p>Gaussian optimization algorithm uses the gradient descent to find the closest minmum ($f’(x)=0$). However, the gradient of a local maximum point is also 0, which corresponds to a transition state. A transition state should have one negative/imaginary frequency.</p>\n<p>Frequencies can be visualized after loading the output file into GaussView. What we should do is locate the imaginary frequency, move the atom/atom group in the direction of this vibration, reoptimize this modified structure and calculate the frequency again.</p>\n<h1 id=\"Freq-Job-Never-Stops-Calculating-Vectors\"><a href=\"#Freq-Job-Never-Stops-Calculating-Vectors\" class=\"headerlink\" title=\" Freq Job Never Stops Calculating Vectors\"></a><jump id=\"vecfreq\"> Freq Job Never Stops Calculating Vectors</jump></h1><p>Gaussian uses two different algorithms to do a frequency calculation (solving the CPHF equations) The  standard one uses a lot of RAM memory but is very fast. However, when RAM memory is not enough or the number of CPHF  equations exceeds 5000 by default, gaussian uses another algorithm, this tries to save RAM memory  by storing intermediate results on a hard disk. This takes very long making the calculations practically  inactive.</p>\n<p>If limited by RAM memory, increase it by linkwords <code>%mem=xxx</code>. If  CPHF equations exceed 5000 and there is enough memory available, add an extra keyword: <code>CPHF(MaxInv=10000)</code> on the route card. This puts the maximum number of  CPHF equations for the basic algorithm to 10,000.</p>\n<h1 id=\"Transformation-cannot-fit-in-the-specified-MaxDisk\"><a href=\"#Transformation-cannot-fit-in-the-specified-MaxDisk\" class=\"headerlink\" title=\"Transformation cannot fit in the specified MaxDisk\"></a><jump id=\"maxdisk\">Transformation cannot fit in the specified MaxDisk</jump></h1><p>We will get this error when specifying <code>maxdisk=xxx</code> and the disk is not enough to finish the current job.</p>\n<p>The MaxDisk keyword specifies the amount of disk storage available for scratch data. But some jobs, like CCSD, CCSD(T), QCISD(T), and BD(T) energies have fixed disk which cannot be limited by MaxDisk. In this case, if the disk storage is not enough, we will get error information like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Semi-Direct transformation.</span><br><span class=\"line\">ModeAB=           4 MOrb=            51 LenV=   26834989397</span><br><span class=\"line\">LASXX=   3675829080 LTotXX=  3675829080 LenRXX=  7405142880</span><br><span class=\"line\">LTotAB=  3729313800 MaxLAS=  4334140395 LenRXY=           0</span><br><span class=\"line\">NonZer= 11080971960 LenScr= 22248854016 LnRSAI=  4334140395</span><br><span class=\"line\">LnScr1=  8702274560 LExtra=   897554704 Total=  43587966555</span><br><span class=\"line\">MaxDsk= 13421772800 SrtSym=           T ITran=            4</span><br><span class=\"line\">Transformation cannot fit in the specified MaxDisk.</span><br><span class=\"line\">Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l804.exe at Wed Dec 19 01:05:37 2018.</span><br><span class=\"line\">Job cpu time:       0 days  7 hours 19 minutes 44.3 seconds.</span><br><span class=\"line\">Elapsed time:       0 days  0 hours 15 minutes 43.2 seconds.</span><br><span class=\"line\">File lengths (MBytes):  RWF=  63349 Int=      0 D2E=      0 Chk=     16 Scr=      1</span><br></pre></td></tr></table></figure>\n<p>Where, <code>MaxDsk=13421772800</code> means I uses <code>maxdisk=100G</code> ($\\frac{13421772800\\times8}{1024^3}$); <code>Total=43587966555</code> means the minimum disk should be 325G ($\\frac{43587966555\\times8}{1024^3}$).</p>\n<p>For Hyak, there is around 100G storage space for one node. So we can locate the largest scratch file (read and write file) to <code>/gscratch/scrubbed/username/</code> like:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%rwf=/gscratch/scrubbed/yueliu96/test.rwf</span><br><span class=\"line\">%nosave</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Troubleshooting about:  <a href=\"#nfreq\">Freq: Negative Frequency</a> | <a href=\"#vecfreq\">Freq job never stops calculating vectors</a> | <a href=\"#eosc\">Opt: Energy Oscillates</a> | <a href=\"#formbx\">Opt: FormBX had a problem</a> | <a href=\"#pcm\">Opt-Solution: Inv3 failed in PCMMkU</a> | <a href=\"#maxdisk\">Transformation cannot fit in the specified MaxDisk</a> | To be continue …</p>\n<h1 id=\"Energy-oscillates-and-opt-never-converges-I\"><a href=\"#Energy-oscillates-and-opt-never-converges-I\" class=\"headerlink\" title=\"Energy oscillates and opt never converges (I)\"></a><jump id=\"eosc\">Energy oscillates and opt never converges (I)</jump></h1><p>If during geometry optimization the energy oscillates as shown in the following figure:<br><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc.PNG\" alt=\"E_osc\"></p>\n<p>Try (<a href=\"https://www.researchgate.net/post/What_are_possible_solutions_when_the_during_geometry_optimization_the_energy_oscillates_as_shown_in_attachment\" target=\"_blank\" rel=\"noopener\">Reference</a>):</p>\n<ol>\n<li>restart the geometry optimization from the point with the lowest energy (step 60 marked by a red circle for this case). It works for all of my jobs for now. If it doesn’t work, try what is listed below. But the following two methods either runs forever or doesn’t help in my cases.</li>\n<li>change <code>opt</code> to <code>opt(calcfc)</code> on the route card<ul>\n<li>specifies that the force constants be computed at the first point using the current method.</li>\n<li>ensures that the calculation starts with accurate second derivatives, but may be too expensive to be practical. </li>\n<li>e.g., one of my jobs take 9 hours to finish with <code>opt(calcfc)</code> compared to 3 hours without it.</li>\n</ul>\n</li>\n<li>add another keyword <a href=\"http://gaussian.com/integral/\" target=\"_blank\" rel=\"noopener\"><code>Integral(UltraFine)</code></a> on the route card<ul>\n<li>It is recommended for molecules containing lots of tetrahedral centers and for computing very low frequency modes of systems to use.</li>\n<li>Also useful for optimizations of larger molecules with many soft modes such as methyl rotations, making such optimizations more reliable.</li>\n<li>But note that it is very important to <strong>use the same gride for all calculations where you intend to compare energies</strong>.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"Energy-oscillates-and-opt-never-converges-II\"><a href=\"#Energy-oscillates-and-opt-never-converges-II\" class=\"headerlink\" title=\"Energy oscillates and opt never converges (II)\"></a>Energy oscillates and opt never converges (II)</h1><p>Another type of energy oscillation is shown in the following figure. Energies always oscillate around a certain number and rarely change due to small gradient values (close to  0). </p>\n<p><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/energy_osc2.PNG\" alt=\"RMS small\"></p>\n<p>Solution:</p>\n<p>Load the output file to GaussView and see how structures change with optimation step numbers. Manually modify the structure by a little bit and reoptimize it again. Usually change the angle between two atoms/groups where structres get stuck.</p>\n<h1 id=\"FormBX-had-a-problem\"><a href=\"#FormBX-had-a-problem\" class=\"headerlink\" title=\"FormBX had a problem\"></a><jump id=\"formbx\">FormBX had a problem</jump></h1><p>If get error message like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGradGrad</span><br><span class=\"line\">Berny optimization.</span><br><span class=\"line\">Using GEDIIS/GDIIS optimizer.</span><br><span class=\"line\">Bend failed for angle    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    32 -    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    34 -    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    86 -    33 -    87 -    81</span><br><span class=\"line\">Tors failed for dihedral    15 -    81 -    87 -    33</span><br><span class=\"line\">FormBX had a problem.</span><br><span class=\"line\">Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l103.exe at Tue Jan 22 12:58:22 2019.</span><br></pre></td></tr></table></figure>\n<p>That means the angle formed by atom 33, 87 and 81 is 180$^\\circ$. So, modify it manually and start over optimization again.</p>\n<h1 id=\"Inv3-failed-in-PCMMkU\"><a href=\"#Inv3-failed-in-PCMMkU\" class=\"headerlink\" title=\" Inv3 failed in PCMMkU \"></a><jump id=\"pcm\"> Inv3 failed in PCMMkU </jump></h1><p>This is related to the solute cavity of the solvent model. The default option for SCRF is Polarizable Continuum Model (PCM), which creates the solute cavities via a set of overlapping spheres centered on the atom and with certain atomic radii. The default atomic radii are small, resulting in the solvent cavity of larger molecules looks like “cheese”. There are many holes and grooves that are mathematically exposed to the solvent, while these locations are not exposed to solvents in actual systems. This causes the problem of non-convergence during the iteration of the PCM matrix.</p>\n<p>To solve this problem, we can add additional input: <a href=\"http://gaussian.com/scrf/\" target=\"_blank\" rel=\"noopener\"><strong>Surface</strong>=<em>type</em></a>: specify the type of molecular surface representing the solute-solvent boundary. Available options are:</p>\n<ul>\n<li>VDW: Van der Waals surface. Uses atomic radii (scaled) and skips the generation of “added spheres” to smooth the surface. This is the default.</li>\n<li>SES: Solvent Excluding Surface. The surface is generated by the atomic or group spheres and by the spheres created automatically to smooth the surface (“added spheres”). This was the default in Gaussian 03. It can eliminate the above mentioned holes and grooves, but the surface made by this method doesn’t change continuously with the change of conformation, causing the potential energy surface isn’t continuous and smooth and it is difficult to perform geometric optimization.</li>\n<li>SAS: Solvent Accessible Surface. The radius of the solvent is added to the unscaled radii of atoms and/or atomic groups. There is no “cheese problem” and dicontinuity on SAS surface. But it might underestimate the solvation effect compared to VDW and SES due to the large solute cavity.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/scrf_surface.png\" alt=\"scrf\"></p>\n<p>A good solution is to optimize with SAS following by single point energy calcuation with SES surface. To optimize with SAS or SES, e.g. add <code>scrf(pcm, solvent=water, read)</code> on the route card, and <code>Surface=SAS</code> or <code>Surface=SES AddSph</code> on the additional section, which is after molecular specification and also terminated with a blank line.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=60gb</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%chk=test.chk</span><br><span class=\"line\"># opt wb97xd/6-31+g(d,p) pop=none scf=(xqc,tight) scrf=(pcm,solvent=water,read)</span><br><span class=\"line\"></span><br><span class=\"line\">Title section</span><br><span class=\"line\"></span><br><span class=\"line\">Charge Multiplicity</span><br><span class=\"line\">Molecular Coordinates</span><br><span class=\"line\"></span><br><span class=\"line\">surface=sas</span><br><span class=\"line\"></span><br><span class=\"line\">--Link1--</span><br><span class=\"line\">%chk=test.chk</span><br><span class=\"line\">%mem=60gb</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\"># wb97xd/6-31+g(d,p) pop=none scf=(sqc,tight) scrf=(pcm,solvent=water,read) geom=allcheck</span><br><span class=\"line\"></span><br><span class=\"line\">surface=ses addsph</span><br><span class=\"line\">! terminate by a blank line</span><br></pre></td></tr></table></figure>\n<h1 id=\"Negative-Frequency\"><a href=\"#Negative-Frequency\" class=\"headerlink\" title=\" Negative Frequency \"></a><jump id=\"nfreq\"> Negative Frequency </jump></h1><p>Gaussian optimization algorithm uses the gradient descent to find the closest minmum ($f’(x)=0$). However, the gradient of a local maximum point is also 0, which corresponds to a transition state. A transition state should have one negative/imaginary frequency.</p>\n<p>Frequencies can be visualized after loading the output file into GaussView. What we should do is locate the imaginary frequency, move the atom/atom group in the direction of this vibration, reoptimize this modified structure and calculate the frequency again.</p>\n<h1 id=\"Freq-Job-Never-Stops-Calculating-Vectors\"><a href=\"#Freq-Job-Never-Stops-Calculating-Vectors\" class=\"headerlink\" title=\" Freq Job Never Stops Calculating Vectors\"></a><jump id=\"vecfreq\"> Freq Job Never Stops Calculating Vectors</jump></h1><p>Gaussian uses two different algorithms to do a frequency calculation (solving the CPHF equations) The  standard one uses a lot of RAM memory but is very fast. However, when RAM memory is not enough or the number of CPHF  equations exceeds 5000 by default, gaussian uses another algorithm, this tries to save RAM memory  by storing intermediate results on a hard disk. This takes very long making the calculations practically  inactive.</p>\n<p>If limited by RAM memory, increase it by linkwords <code>%mem=xxx</code>. If  CPHF equations exceed 5000 and there is enough memory available, add an extra keyword: <code>CPHF(MaxInv=10000)</code> on the route card. This puts the maximum number of  CPHF equations for the basic algorithm to 10,000.</p>\n<h1 id=\"Transformation-cannot-fit-in-the-specified-MaxDisk\"><a href=\"#Transformation-cannot-fit-in-the-specified-MaxDisk\" class=\"headerlink\" title=\"Transformation cannot fit in the specified MaxDisk\"></a><jump id=\"maxdisk\">Transformation cannot fit in the specified MaxDisk</jump></h1><p>We will get this error when specifying <code>maxdisk=xxx</code> and the disk is not enough to finish the current job.</p>\n<p>The MaxDisk keyword specifies the amount of disk storage available for scratch data. But some jobs, like CCSD, CCSD(T), QCISD(T), and BD(T) energies have fixed disk which cannot be limited by MaxDisk. In this case, if the disk storage is not enough, we will get error information like:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Semi-Direct transformation.</span><br><span class=\"line\">ModeAB=           4 MOrb=            51 LenV=   26834989397</span><br><span class=\"line\">LASXX=   3675829080 LTotXX=  3675829080 LenRXX=  7405142880</span><br><span class=\"line\">LTotAB=  3729313800 MaxLAS=  4334140395 LenRXY=           0</span><br><span class=\"line\">NonZer= 11080971960 LenScr= 22248854016 LnRSAI=  4334140395</span><br><span class=\"line\">LnScr1=  8702274560 LExtra=   897554704 Total=  43587966555</span><br><span class=\"line\">MaxDsk= 13421772800 SrtSym=           T ITran=            4</span><br><span class=\"line\">Transformation cannot fit in the specified MaxDisk.</span><br><span class=\"line\">Error termination via Lnk1e in /sw/contrib/gaussian/g16/B01/g16/l804.exe at Wed Dec 19 01:05:37 2018.</span><br><span class=\"line\">Job cpu time:       0 days  7 hours 19 minutes 44.3 seconds.</span><br><span class=\"line\">Elapsed time:       0 days  0 hours 15 minutes 43.2 seconds.</span><br><span class=\"line\">File lengths (MBytes):  RWF=  63349 Int=      0 D2E=      0 Chk=     16 Scr=      1</span><br></pre></td></tr></table></figure>\n<p>Where, <code>MaxDsk=13421772800</code> means I uses <code>maxdisk=100G</code> ($\\frac{13421772800\\times8}{1024^3}$); <code>Total=43587966555</code> means the minimum disk should be 325G ($\\frac{43587966555\\times8}{1024^3}$).</p>\n<p>For Hyak, there is around 100G storage space for one node. So we can locate the largest scratch file (read and write file) to <code>/gscratch/scrubbed/username/</code> like:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%rwf=/gscratch/scrubbed/yueliu96/test.rwf</span><br><span class=\"line\">%nosave</span><br></pre></td></tr></table></figure>"},{"title":"Mopac with Cuby4","date":"2018-12-29T06:03:11.000Z","_content":"\n*Two types of jobs, optimization and Born-Oppenheimer molecualr-dynamics with pm6 method, are introduced here. Linked python scripts should be useful to setup input and analyze result, which can run both in python2 and in python3.*\n\n*[Mopac](http://openmopac.net/Manual/index.html) is a general-purpose semiempirical molecular orbital package for the study of solid state and molecular structures and reactions. Several semiempirical methods are used to calculate electronic part, among which we usually choose PM6 method to run geometry optimization and BOMD. Just like other computational software packages, Mopac works in 3 steps: create a data file which describes molecular system and specifies job types; command Mopac to carry out the calcualtion with that data-file (on Hyak node); extract the desired result from the output-file.*\n\n# Input Setup\n\n[Cuby](http://cuby4.molecular.cz) provides an unified access to various computational methods available in different software packages, including gaussian, mopac, turbomole, etc. It is a computational chemistry framework written in ruby, which does very little for itself, but calls external softwares to do the calculations and works with their results. To work with cuby, two input files are needed: xyz file and yaml file. \n\n## xyz-file\n\nxyz file contains the geometry of the molecule system -- the first line is the number of atoms, the second line is the comment line (could be blank) and the remaining lines are atoms Cartesian coordinates. Take $H_2O$ as an example:\n\n  ```\n  3\n\n  O                 -0.54954964    0.83729475    0.01780404\n  H                 -0.87000423    1.74223058    0.01780404\n  H                  0.41045036    0.83729475    0.01780404\n  ```\n\n Common input files we use are gaussian input files. The script, [gjfcom2xyz.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py) can convert the input file from gaussian input format to xyz format. \n\n- *Usage*\n  - `python gjfcom2xyz.py input-file`\n- *Descriptions*\n  - use charge and multiplicity (chg&mp) as a key to locate the start of coordinates\n  - every lines containing 4 elements after chg&mp is considered as coordinate line. Valid delimiters: space, spaces and comma.\n\npython script [xyz2gjf.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/xyz2gjf.py) can convert xyz format back to gaussian input format.\n\n- *Usage*\n  - `python xyz2gjf.py xyz-file`\n- *Descriptions*\n  - every line after the second line contains 4 elements and the last three elements are float is considered as coordinate line. Valid delimiters are space or spaces.\n  - route card, charge and multiplicity are defined by default, could be changed later or modified in the scripts.\n\n## yaml-file\n\nyaml file is a list of keywords, which is the bridge to connect cuby with computational softwares. The format is `keyword: option` and there must be a space after colon (:).\n\n### optimize-yaml\n\n*Example--inp.yaml*:\n\n```yaml\njob: optimize\ngeometry: test.xyz\ncharge: 2\nmultiplicity: 1\ninterface: mopac\nmethod: pm6\nspin_restricted: auto_uhf\nmaxcycles: 2000\nprint: timing\nmopac_precise: yes\nmopac_peptide_bond_fix: yes\nmodifiers: dispersion3, h_bonds4\nmodifier_h_bonds:\n  h_bonds4_scale_charged: no\n  h_bonds4_extra_scaling: {}\n```\n\n*Explanations*:\n- job: optimize\n  - simple geometry optimization of molecule specified in test.xyz file\n  - the calculation produces these additional files:\n    - optimized.xyz - the optimized geometry\n    - history_inp.xyz - record of all the steps\n- spin_restricted: auto_uhf\n  - uhf for any open-shell systems, rhf is used for closed shells\n- maxcycles: 2000\n  - maximum number of cycles of optimization or molecular dynamics\n- print: timing\n  - print time spent in the program\n- [mopac_precise](http://openmopac.net/manual/precise.html): yes\n  - use tight thresholds, needed for accurate gradient\n- [mopac_peptide_bond_fix](http://openmopac.net/manual/mmok.html): yes\n  - controls the corerction for peptide bond torsion\n- modifiers\n  - a list of interfaces applied as a modifiers to this calculations.\n\n### dynamics-yaml\n\n*Example--anneal.yaml*:\n\n```yaml\njob: dynamics\ngeometry: test.xyz\ncharge: 2\nmultiplicity: 1\nspin_restricted: auto_uhf\ninterface: mopac\nmethod: pm6\nmopac_precise: yes\nmopac_peptide_bond_fix: yes\nmodifiers: dispersion3, h_bonds4\nmodifier_h_bonds:\n  h_bonds4_scale_charged: no\n  h_bonds4_extra_scaling: {}\nmaxcycles: 20000\ntimestep: 0.001\ninit_temp: 310\ntemperature: 310\nthermostat: berendsen\nthermostat_tc: 0.05\n```\n\n*Explanations*:\n- job: dynamics\n  - molecular dynamics simulation of molecule specified in test.xyz file\n  - the calculation produces these additional files:\n    - last.xyz - the last geometry\n    - trajectory_test.xyz - record of all the cycles (20000 here)\n    - LOG - standard output and error information for every cycle\n- maxcycles: 20000\n  - 20 ps of MD simulation (the default step is 1 fs)\n- init_temp: 310\n  - temperature (K) used to generate initial random velocities\n- temperature: 310\n  - temperature (K) to be maintained by the thermostat\n- thermostat: berendsen\n  - selection of thermostat algorithm\n- thermostat_tc: 0.05\n  - Thermostat time constant (ps) setting strength of the coupling to the thermostat. The exact mening of the value is different in different algorithms.\n\n*Note*:\n- add `scf_cycles: 1000` for open-shell system to define the maximum number of SCF iterations\n\n### Other Keywords\n- `md_region: \"\"` & `trajectory_selection: \"\"`\n  - ex: md_region: \"1-19,22-100\", trajectory_selection: \"1-100\": means load atoms from 1-100 and fix atoms 20-21\n- `job_cleanup: yes | no`\n  - delete directories with external calculations when job finishes successfuly, default is yes\n- `mopac_keywords: \"\"`\n  - extra keywords (in the MOPAC format) added into the input\n  - add keyword \"camp\" if job fails with not self-consistency\n- `scf_convergence: 7`\n  - change SCF convergence threshold (energy): set to $10^{-7}$ a.u.\n- click [here](http://cuby4.molecular.cz/keywords.html) to see more\n\n# Submit to Hyak\n\nBesides xyz and yaml (test.yaml) files, sbatch file (test.sh) also needed:\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=???\n#SBATCH --nodes=1\n#SBATCH --time=??:00:00\n#SBATCH --mem=???GB\n#SBATCH --workdir=????????????\n#SBATCH --partition=???\n#SBATCH --account=???\n\nmodule load contrib/mopac16\nsource /usr/lusers/yueliu96/.rvm/scripts/rvm\nldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so > ldd.log\ncuby4 test.yaml &>LOG    \n## results and error information will be written to file LOG\n## cuby4 test.yaml: same information will be written to slurm file\n```\nrun `sbatch test.sh` to submit it.\n\n## Parallel-Run\n\nMost nodes on hyak.mox have 28 processors, however, the code in MOPAC only allows a single processor to be used for a single calculation. If several calculations to be run, each calculation could be started on a different processor in one node.\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=??????\n#SBATCH --nodes=1\n#SBATCH --time=??:00:00\n#SBATCH --mem=???G\n#SBATCH --workdir=??????\n#SBATCH --partition=???\n#SBATCH --account=???\n\nmodule load parallel-20170722\nmodule load contrib/mopac16\nsource /usr/lusers/yueliu96/.rvm/scripts/rvm\nldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so > ldd.log\ncat tasklists.sh | parallel -j 28\n```\nwhere, tasklists$.$sh is :\n\n```bash\ncd absolute-directory-1; cuby4 test.yaml &>LOG\ncd absolute-directory-2; cuby4 test.yaml &>LOG\n......\n```\n\nthere should exist xyz and yaml files in every absolute directory.\n\n## Scripts for Parallel-Run\n- [pm6opt_parallel.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6opt_parallel.py)\n- [pm6bomd_parallel.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6bomd_parallel.py)\n  \nTo run pm6-optimize or pm6-BOMD for several different molecules, create their xyz files in the working directory:\n\n```\ntest1.xyz test2.xyz test3.xyz\n```\n\nand then run `python pm6opt_parallel.py` or `python pm6bomd_parallel.py`. Then, tasklists$.$sh file, parallel_run$.$sh file and sub-directories for every xyz file will be created. In every xyz sub-folder, xyz and yaml files are created correspondingly:\n\n```\ndtest1  dtest2 dtest3 taskslists.sh parallel_run.sh\n```\n\nin `dtest1`: `test1.xyz inp.yaml` if it is opt job; `test1.xyz anneal.yaml` if it is dynamics job.\n\n# Output Analysis\n\n## opt output\n\nOptimization job produces optimized.xyz and histotry_xxx.xyz (xxx depends on the name of yaml file). The optimized.xyz is the optimized geometry in xyz formatted, where energy value is on the second line.\n\nIn the parallel-run case, one directory has several subdirectories containing finished optimized job (optimized.xyz), python script [extract_pm6opt.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/extract_pm6opt.py) can be used to extract optimized geometry and energy.\n\n- *Usage*:\n  - `python extract_pm6opt.py`\n  - run in the directory containing these subdirectories\n- *Descriptions*:\n  - read optimized.xyz in all subdirectories whose name starts with 'd', change their format from xyz to gaussian input and extract energies from these xyz files\n  - all new files are written to a new directory optresult\n  - the name of the structures and the gaussian input files depends on these subdirectories -- *test* if *dtest*\n\n## dynamics output \n\nDynamics job creates additional file trajectory_*.xyz containing geometry information of all steps, which can be visualized by [VMD](https://www.ks.uiuc.edu/Research/vmd/) software. The user can extract specific snapshots from the trajcetroy according to the stepsize set by VMD. Or use the python script [traj2xyz.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/traj2xyzs.py) to achieve the same goal as VMD extractor.\n\n- *Usage*:\n  - `python traj2xyz.py stride`\n  - stride must be an integer\n  - stride=100: 200 snapshots out of 200000 will be extracted from trajectory\n  - run in the directory containing child-directory where trajectory_*.xyz locates\n- *Descriptions*:\n  - go through all subdirectories to locate trajectory_*.xyz, extract an exact number of geometries from trajectory and wirtten them to new subdirectories correspondingly\n  - the name of new subdirectories and snapshots are based on the name of subdirectories\n  - if originally `dtesta dtestb`, then after run this script: `dtesta dtesta_snapshots dtestb dtestb_snapshots`; in `dtesta_snapshots`: `testa_snap1.xyz testa_snap2.xyz ...`\n","source":"_posts/Mopac-with-Cuby4.md","raw":"---\ntitle: Mopac with Cuby4\ndate: 2018-12-28 22:03:11\ntags:\n- Hyak\n- Software Tutorial\ncategories:\n- Turecek Lab Tutorial\n---\n\n*Two types of jobs, optimization and Born-Oppenheimer molecualr-dynamics with pm6 method, are introduced here. Linked python scripts should be useful to setup input and analyze result, which can run both in python2 and in python3.*\n\n*[Mopac](http://openmopac.net/Manual/index.html) is a general-purpose semiempirical molecular orbital package for the study of solid state and molecular structures and reactions. Several semiempirical methods are used to calculate electronic part, among which we usually choose PM6 method to run geometry optimization and BOMD. Just like other computational software packages, Mopac works in 3 steps: create a data file which describes molecular system and specifies job types; command Mopac to carry out the calcualtion with that data-file (on Hyak node); extract the desired result from the output-file.*\n\n# Input Setup\n\n[Cuby](http://cuby4.molecular.cz) provides an unified access to various computational methods available in different software packages, including gaussian, mopac, turbomole, etc. It is a computational chemistry framework written in ruby, which does very little for itself, but calls external softwares to do the calculations and works with their results. To work with cuby, two input files are needed: xyz file and yaml file. \n\n## xyz-file\n\nxyz file contains the geometry of the molecule system -- the first line is the number of atoms, the second line is the comment line (could be blank) and the remaining lines are atoms Cartesian coordinates. Take $H_2O$ as an example:\n\n  ```\n  3\n\n  O                 -0.54954964    0.83729475    0.01780404\n  H                 -0.87000423    1.74223058    0.01780404\n  H                  0.41045036    0.83729475    0.01780404\n  ```\n\n Common input files we use are gaussian input files. The script, [gjfcom2xyz.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py) can convert the input file from gaussian input format to xyz format. \n\n- *Usage*\n  - `python gjfcom2xyz.py input-file`\n- *Descriptions*\n  - use charge and multiplicity (chg&mp) as a key to locate the start of coordinates\n  - every lines containing 4 elements after chg&mp is considered as coordinate line. Valid delimiters: space, spaces and comma.\n\npython script [xyz2gjf.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/xyz2gjf.py) can convert xyz format back to gaussian input format.\n\n- *Usage*\n  - `python xyz2gjf.py xyz-file`\n- *Descriptions*\n  - every line after the second line contains 4 elements and the last three elements are float is considered as coordinate line. Valid delimiters are space or spaces.\n  - route card, charge and multiplicity are defined by default, could be changed later or modified in the scripts.\n\n## yaml-file\n\nyaml file is a list of keywords, which is the bridge to connect cuby with computational softwares. The format is `keyword: option` and there must be a space after colon (:).\n\n### optimize-yaml\n\n*Example--inp.yaml*:\n\n```yaml\njob: optimize\ngeometry: test.xyz\ncharge: 2\nmultiplicity: 1\ninterface: mopac\nmethod: pm6\nspin_restricted: auto_uhf\nmaxcycles: 2000\nprint: timing\nmopac_precise: yes\nmopac_peptide_bond_fix: yes\nmodifiers: dispersion3, h_bonds4\nmodifier_h_bonds:\n  h_bonds4_scale_charged: no\n  h_bonds4_extra_scaling: {}\n```\n\n*Explanations*:\n- job: optimize\n  - simple geometry optimization of molecule specified in test.xyz file\n  - the calculation produces these additional files:\n    - optimized.xyz - the optimized geometry\n    - history_inp.xyz - record of all the steps\n- spin_restricted: auto_uhf\n  - uhf for any open-shell systems, rhf is used for closed shells\n- maxcycles: 2000\n  - maximum number of cycles of optimization or molecular dynamics\n- print: timing\n  - print time spent in the program\n- [mopac_precise](http://openmopac.net/manual/precise.html): yes\n  - use tight thresholds, needed for accurate gradient\n- [mopac_peptide_bond_fix](http://openmopac.net/manual/mmok.html): yes\n  - controls the corerction for peptide bond torsion\n- modifiers\n  - a list of interfaces applied as a modifiers to this calculations.\n\n### dynamics-yaml\n\n*Example--anneal.yaml*:\n\n```yaml\njob: dynamics\ngeometry: test.xyz\ncharge: 2\nmultiplicity: 1\nspin_restricted: auto_uhf\ninterface: mopac\nmethod: pm6\nmopac_precise: yes\nmopac_peptide_bond_fix: yes\nmodifiers: dispersion3, h_bonds4\nmodifier_h_bonds:\n  h_bonds4_scale_charged: no\n  h_bonds4_extra_scaling: {}\nmaxcycles: 20000\ntimestep: 0.001\ninit_temp: 310\ntemperature: 310\nthermostat: berendsen\nthermostat_tc: 0.05\n```\n\n*Explanations*:\n- job: dynamics\n  - molecular dynamics simulation of molecule specified in test.xyz file\n  - the calculation produces these additional files:\n    - last.xyz - the last geometry\n    - trajectory_test.xyz - record of all the cycles (20000 here)\n    - LOG - standard output and error information for every cycle\n- maxcycles: 20000\n  - 20 ps of MD simulation (the default step is 1 fs)\n- init_temp: 310\n  - temperature (K) used to generate initial random velocities\n- temperature: 310\n  - temperature (K) to be maintained by the thermostat\n- thermostat: berendsen\n  - selection of thermostat algorithm\n- thermostat_tc: 0.05\n  - Thermostat time constant (ps) setting strength of the coupling to the thermostat. The exact mening of the value is different in different algorithms.\n\n*Note*:\n- add `scf_cycles: 1000` for open-shell system to define the maximum number of SCF iterations\n\n### Other Keywords\n- `md_region: \"\"` & `trajectory_selection: \"\"`\n  - ex: md_region: \"1-19,22-100\", trajectory_selection: \"1-100\": means load atoms from 1-100 and fix atoms 20-21\n- `job_cleanup: yes | no`\n  - delete directories with external calculations when job finishes successfuly, default is yes\n- `mopac_keywords: \"\"`\n  - extra keywords (in the MOPAC format) added into the input\n  - add keyword \"camp\" if job fails with not self-consistency\n- `scf_convergence: 7`\n  - change SCF convergence threshold (energy): set to $10^{-7}$ a.u.\n- click [here](http://cuby4.molecular.cz/keywords.html) to see more\n\n# Submit to Hyak\n\nBesides xyz and yaml (test.yaml) files, sbatch file (test.sh) also needed:\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=???\n#SBATCH --nodes=1\n#SBATCH --time=??:00:00\n#SBATCH --mem=???GB\n#SBATCH --workdir=????????????\n#SBATCH --partition=???\n#SBATCH --account=???\n\nmodule load contrib/mopac16\nsource /usr/lusers/yueliu96/.rvm/scripts/rvm\nldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so > ldd.log\ncuby4 test.yaml &>LOG    \n## results and error information will be written to file LOG\n## cuby4 test.yaml: same information will be written to slurm file\n```\nrun `sbatch test.sh` to submit it.\n\n## Parallel-Run\n\nMost nodes on hyak.mox have 28 processors, however, the code in MOPAC only allows a single processor to be used for a single calculation. If several calculations to be run, each calculation could be started on a different processor in one node.\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=??????\n#SBATCH --nodes=1\n#SBATCH --time=??:00:00\n#SBATCH --mem=???G\n#SBATCH --workdir=??????\n#SBATCH --partition=???\n#SBATCH --account=???\n\nmodule load parallel-20170722\nmodule load contrib/mopac16\nsource /usr/lusers/yueliu96/.rvm/scripts/rvm\nldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so > ldd.log\ncat tasklists.sh | parallel -j 28\n```\nwhere, tasklists$.$sh is :\n\n```bash\ncd absolute-directory-1; cuby4 test.yaml &>LOG\ncd absolute-directory-2; cuby4 test.yaml &>LOG\n......\n```\n\nthere should exist xyz and yaml files in every absolute directory.\n\n## Scripts for Parallel-Run\n- [pm6opt_parallel.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6opt_parallel.py)\n- [pm6bomd_parallel.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6bomd_parallel.py)\n  \nTo run pm6-optimize or pm6-BOMD for several different molecules, create their xyz files in the working directory:\n\n```\ntest1.xyz test2.xyz test3.xyz\n```\n\nand then run `python pm6opt_parallel.py` or `python pm6bomd_parallel.py`. Then, tasklists$.$sh file, parallel_run$.$sh file and sub-directories for every xyz file will be created. In every xyz sub-folder, xyz and yaml files are created correspondingly:\n\n```\ndtest1  dtest2 dtest3 taskslists.sh parallel_run.sh\n```\n\nin `dtest1`: `test1.xyz inp.yaml` if it is opt job; `test1.xyz anneal.yaml` if it is dynamics job.\n\n# Output Analysis\n\n## opt output\n\nOptimization job produces optimized.xyz and histotry_xxx.xyz (xxx depends on the name of yaml file). The optimized.xyz is the optimized geometry in xyz formatted, where energy value is on the second line.\n\nIn the parallel-run case, one directory has several subdirectories containing finished optimized job (optimized.xyz), python script [extract_pm6opt.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/extract_pm6opt.py) can be used to extract optimized geometry and energy.\n\n- *Usage*:\n  - `python extract_pm6opt.py`\n  - run in the directory containing these subdirectories\n- *Descriptions*:\n  - read optimized.xyz in all subdirectories whose name starts with 'd', change their format from xyz to gaussian input and extract energies from these xyz files\n  - all new files are written to a new directory optresult\n  - the name of the structures and the gaussian input files depends on these subdirectories -- *test* if *dtest*\n\n## dynamics output \n\nDynamics job creates additional file trajectory_*.xyz containing geometry information of all steps, which can be visualized by [VMD](https://www.ks.uiuc.edu/Research/vmd/) software. The user can extract specific snapshots from the trajcetroy according to the stepsize set by VMD. Or use the python script [traj2xyz.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/traj2xyzs.py) to achieve the same goal as VMD extractor.\n\n- *Usage*:\n  - `python traj2xyz.py stride`\n  - stride must be an integer\n  - stride=100: 200 snapshots out of 200000 will be extracted from trajectory\n  - run in the directory containing child-directory where trajectory_*.xyz locates\n- *Descriptions*:\n  - go through all subdirectories to locate trajectory_*.xyz, extract an exact number of geometries from trajectory and wirtten them to new subdirectories correspondingly\n  - the name of new subdirectories and snapshots are based on the name of subdirectories\n  - if originally `dtesta dtestb`, then after run this script: `dtesta dtesta_snapshots dtestb dtestb_snapshots`; in `dtesta_snapshots`: `testa_snap1.xyz testa_snap2.xyz ...`\n","slug":"Mopac-with-Cuby4","published":1,"updated":"2019-10-28T23:31:27.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eb0b000rmhmoglqavtgw","content":"<p><em>Two types of jobs, optimization and Born-Oppenheimer molecualr-dynamics with pm6 method, are introduced here. Linked python scripts should be useful to setup input and analyze result, which can run both in python2 and in python3.</em></p>\n<p><em><a href=\"http://openmopac.net/Manual/index.html\" target=\"_blank\" rel=\"noopener\">Mopac</a> is a general-purpose semiempirical molecular orbital package for the study of solid state and molecular structures and reactions. Several semiempirical methods are used to calculate electronic part, among which we usually choose PM6 method to run geometry optimization and BOMD. Just like other computational software packages, Mopac works in 3 steps: create a data file which describes molecular system and specifies job types; command Mopac to carry out the calcualtion with that data-file (on Hyak node); extract the desired result from the output-file.</em></p>\n<h1 id=\"Input-Setup\"><a href=\"#Input-Setup\" class=\"headerlink\" title=\"Input Setup\"></a>Input Setup</h1><p><a href=\"http://cuby4.molecular.cz\" target=\"_blank\" rel=\"noopener\">Cuby</a> provides an unified access to various computational methods available in different software packages, including gaussian, mopac, turbomole, etc. It is a computational chemistry framework written in ruby, which does very little for itself, but calls external softwares to do the calculations and works with their results. To work with cuby, two input files are needed: xyz file and yaml file. </p>\n<h2 id=\"xyz-file\"><a href=\"#xyz-file\" class=\"headerlink\" title=\"xyz-file\"></a>xyz-file</h2><p>xyz file contains the geometry of the molecule system – the first line is the number of atoms, the second line is the comment line (could be blank) and the remaining lines are atoms Cartesian coordinates. Take $H_2O$ as an example:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\">O                 -0.54954964    0.83729475    0.01780404</span><br><span class=\"line\">H                 -0.87000423    1.74223058    0.01780404</span><br><span class=\"line\">H                  0.41045036    0.83729475    0.01780404</span><br></pre></td></tr></table></figure>\n<p> Common input files we use are gaussian input files. The script, <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py\" target=\"_blank\" rel=\"noopener\">gjfcom2xyz.py</a> can convert the input file from gaussian input format to xyz format. </p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python gjfcom2xyz.py input-file</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>use charge and multiplicity (chg&amp;mp) as a key to locate the start of coordinates</li>\n<li>every lines containing 4 elements after chg&amp;mp is considered as coordinate line. Valid delimiters: space, spaces and comma.</li>\n</ul>\n</li>\n</ul>\n<p>python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/xyz2gjf.py\" target=\"_blank\" rel=\"noopener\">xyz2gjf.py</a> can convert xyz format back to gaussian input format.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python xyz2gjf.py xyz-file</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>every line after the second line contains 4 elements and the last three elements are float is considered as coordinate line. Valid delimiters are space or spaces.</li>\n<li>route card, charge and multiplicity are defined by default, could be changed later or modified in the scripts.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"yaml-file\"><a href=\"#yaml-file\" class=\"headerlink\" title=\"yaml-file\"></a>yaml-file</h2><p>yaml file is a list of keywords, which is the bridge to connect cuby with computational softwares. The format is <code>keyword: option</code> and there must be a space after colon (:).</p>\n<h3 id=\"optimize-yaml\"><a href=\"#optimize-yaml\" class=\"headerlink\" title=\"optimize-yaml\"></a>optimize-yaml</h3><p><em>Example–inp.yaml</em>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span> <span class=\"string\">optimize</span></span><br><span class=\"line\"><span class=\"attr\">geometry:</span> <span class=\"string\">test.xyz</span></span><br><span class=\"line\"><span class=\"attr\">charge:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">multiplicity:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">interface:</span> <span class=\"string\">mopac</span></span><br><span class=\"line\"><span class=\"attr\">method:</span> <span class=\"string\">pm6</span></span><br><span class=\"line\"><span class=\"attr\">spin_restricted:</span> <span class=\"string\">auto_uhf</span></span><br><span class=\"line\"><span class=\"attr\">maxcycles:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">print:</span> <span class=\"string\">timing</span></span><br><span class=\"line\"><span class=\"attr\">mopac_precise:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">mopac_peptide_bond_fix:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">modifiers:</span> <span class=\"string\">dispersion3,</span> <span class=\"string\">h_bonds4</span></span><br><span class=\"line\"><span class=\"attr\">modifier_h_bonds:</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_scale_charged:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_extra_scaling:</span> <span class=\"string\">&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><em>Explanations</em>:</p>\n<ul>\n<li>job: optimize<ul>\n<li>simple geometry optimization of molecule specified in test.xyz file</li>\n<li>the calculation produces these additional files:<ul>\n<li>optimized.xyz - the optimized geometry</li>\n<li>history_inp.xyz - record of all the steps</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>spin_restricted: auto_uhf<ul>\n<li>uhf for any open-shell systems, rhf is used for closed shells</li>\n</ul>\n</li>\n<li>maxcycles: 2000<ul>\n<li>maximum number of cycles of optimization or molecular dynamics</li>\n</ul>\n</li>\n<li>print: timing<ul>\n<li>print time spent in the program</li>\n</ul>\n</li>\n<li><a href=\"http://openmopac.net/manual/precise.html\" target=\"_blank\" rel=\"noopener\">mopac_precise</a>: yes<ul>\n<li>use tight thresholds, needed for accurate gradient</li>\n</ul>\n</li>\n<li><a href=\"http://openmopac.net/manual/mmok.html\" target=\"_blank\" rel=\"noopener\">mopac_peptide_bond_fix</a>: yes<ul>\n<li>controls the corerction for peptide bond torsion</li>\n</ul>\n</li>\n<li>modifiers<ul>\n<li>a list of interfaces applied as a modifiers to this calculations.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dynamics-yaml\"><a href=\"#dynamics-yaml\" class=\"headerlink\" title=\"dynamics-yaml\"></a>dynamics-yaml</h3><p><em>Example–anneal.yaml</em>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span> <span class=\"string\">dynamics</span></span><br><span class=\"line\"><span class=\"attr\">geometry:</span> <span class=\"string\">test.xyz</span></span><br><span class=\"line\"><span class=\"attr\">charge:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">multiplicity:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">spin_restricted:</span> <span class=\"string\">auto_uhf</span></span><br><span class=\"line\"><span class=\"attr\">interface:</span> <span class=\"string\">mopac</span></span><br><span class=\"line\"><span class=\"attr\">method:</span> <span class=\"string\">pm6</span></span><br><span class=\"line\"><span class=\"attr\">mopac_precise:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">mopac_peptide_bond_fix:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">modifiers:</span> <span class=\"string\">dispersion3,</span> <span class=\"string\">h_bonds4</span></span><br><span class=\"line\"><span class=\"attr\">modifier_h_bonds:</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_scale_charged:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_extra_scaling:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">maxcycles:</span> <span class=\"number\">20000</span></span><br><span class=\"line\"><span class=\"attr\">timestep:</span> <span class=\"number\">0.001</span></span><br><span class=\"line\"><span class=\"attr\">init_temp:</span> <span class=\"number\">310</span></span><br><span class=\"line\"><span class=\"attr\">temperature:</span> <span class=\"number\">310</span></span><br><span class=\"line\"><span class=\"attr\">thermostat:</span> <span class=\"string\">berendsen</span></span><br><span class=\"line\"><span class=\"attr\">thermostat_tc:</span> <span class=\"number\">0.05</span></span><br></pre></td></tr></table></figure>\n<p><em>Explanations</em>:</p>\n<ul>\n<li>job: dynamics<ul>\n<li>molecular dynamics simulation of molecule specified in test.xyz file</li>\n<li>the calculation produces these additional files:<ul>\n<li>last.xyz - the last geometry</li>\n<li>trajectory_test.xyz - record of all the cycles (20000 here)</li>\n<li>LOG - standard output and error information for every cycle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>maxcycles: 20000<ul>\n<li>20 ps of MD simulation (the default step is 1 fs)</li>\n</ul>\n</li>\n<li>init_temp: 310<ul>\n<li>temperature (K) used to generate initial random velocities</li>\n</ul>\n</li>\n<li>temperature: 310<ul>\n<li>temperature (K) to be maintained by the thermostat</li>\n</ul>\n</li>\n<li>thermostat: berendsen<ul>\n<li>selection of thermostat algorithm</li>\n</ul>\n</li>\n<li>thermostat_tc: 0.05<ul>\n<li>Thermostat time constant (ps) setting strength of the coupling to the thermostat. The exact mening of the value is different in different algorithms.</li>\n</ul>\n</li>\n</ul>\n<p><em>Note</em>:</p>\n<ul>\n<li>add <code>scf_cycles: 1000</code> for open-shell system to define the maximum number of SCF iterations</li>\n</ul>\n<h3 id=\"Other-Keywords\"><a href=\"#Other-Keywords\" class=\"headerlink\" title=\"Other Keywords\"></a>Other Keywords</h3><ul>\n<li><code>md_region: &quot;&quot;</code> &amp; <code>trajectory_selection: &quot;&quot;</code><ul>\n<li>ex: md_region: “1-19,22-100”, trajectory_selection: “1-100”: means load atoms from 1-100 and fix atoms 20-21</li>\n</ul>\n</li>\n<li><code>job_cleanup: yes | no</code><ul>\n<li>delete directories with external calculations when job finishes successfuly, default is yes</li>\n</ul>\n</li>\n<li><code>mopac_keywords: &quot;&quot;</code><ul>\n<li>extra keywords (in the MOPAC format) added into the input</li>\n<li>add keyword “camp” if job fails with not self-consistency</li>\n</ul>\n</li>\n<li><code>scf_convergence: 7</code><ul>\n<li>change SCF convergence threshold (energy): set to $10^{-7}$ a.u.</li>\n</ul>\n</li>\n<li>click <a href=\"http://cuby4.molecular.cz/keywords.html\" target=\"_blank\" rel=\"noopener\">here</a> to see more</li>\n</ul>\n<h1 id=\"Submit-to-Hyak\"><a href=\"#Submit-to-Hyak\" class=\"headerlink\" title=\"Submit to Hyak\"></a>Submit to Hyak</h1><p>Besides xyz and yaml (test.yaml) files, sbatch file (test.sh) also needed:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=??:00:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???GB</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=????????????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\">module load contrib/mopac16</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/lusers/yueliu96/.rvm/scripts/rvm</span><br><span class=\"line\">ldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so &gt; ldd.log</span><br><span class=\"line\">cuby4 test.yaml &amp;&gt;LOG    </span><br><span class=\"line\"><span class=\"comment\">## results and error information will be written to file LOG</span></span><br><span class=\"line\"><span class=\"comment\">## cuby4 test.yaml: same information will be written to slurm file</span></span><br></pre></td></tr></table></figure>\n<p>run <code>sbatch test.sh</code> to submit it.</p>\n<h2 id=\"Parallel-Run\"><a href=\"#Parallel-Run\" class=\"headerlink\" title=\"Parallel-Run\"></a>Parallel-Run</h2><p>Most nodes on hyak.mox have 28 processors, however, the code in MOPAC only allows a single processor to be used for a single calculation. If several calculations to be run, each calculation could be started on a different processor in one node.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=??????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=??:00:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???G</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=??????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\">module load parallel-20170722</span><br><span class=\"line\">module load contrib/mopac16</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/lusers/yueliu96/.rvm/scripts/rvm</span><br><span class=\"line\">ldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so &gt; ldd.log</span><br><span class=\"line\">cat tasklists.sh | parallel -j 28</span><br></pre></td></tr></table></figure>\n<p>where, tasklists$.$sh is :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> absolute-directory-1; cuby4 test.yaml &amp;&gt;LOG</span><br><span class=\"line\"><span class=\"built_in\">cd</span> absolute-directory-2; cuby4 test.yaml &amp;&gt;LOG</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>there should exist xyz and yaml files in every absolute directory.</p>\n<h2 id=\"Scripts-for-Parallel-Run\"><a href=\"#Scripts-for-Parallel-Run\" class=\"headerlink\" title=\"Scripts for Parallel-Run\"></a>Scripts for Parallel-Run</h2><ul>\n<li><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6opt_parallel.py\" target=\"_blank\" rel=\"noopener\">pm6opt_parallel.py</a></li>\n<li><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6bomd_parallel.py\" target=\"_blank\" rel=\"noopener\">pm6bomd_parallel.py</a></li>\n</ul>\n<p>To run pm6-optimize or pm6-BOMD for several different molecules, create their xyz files in the working directory:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1.xyz test2.xyz test3.xyz</span><br></pre></td></tr></table></figure>\n<p>and then run <code>python pm6opt_parallel.py</code> or <code>python pm6bomd_parallel.py</code>. Then, tasklists$.$sh file, parallel_run$.$sh file and sub-directories for every xyz file will be created. In every xyz sub-folder, xyz and yaml files are created correspondingly:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtest1  dtest2 dtest3 taskslists.sh parallel_run.sh</span><br></pre></td></tr></table></figure>\n<p>in <code>dtest1</code>: <code>test1.xyz inp.yaml</code> if it is opt job; <code>test1.xyz anneal.yaml</code> if it is dynamics job.</p>\n<h1 id=\"Output-Analysis\"><a href=\"#Output-Analysis\" class=\"headerlink\" title=\"Output Analysis\"></a>Output Analysis</h1><h2 id=\"opt-output\"><a href=\"#opt-output\" class=\"headerlink\" title=\"opt output\"></a>opt output</h2><p>Optimization job produces optimized.xyz and histotry_xxx.xyz (xxx depends on the name of yaml file). The optimized.xyz is the optimized geometry in xyz formatted, where energy value is on the second line.</p>\n<p>In the parallel-run case, one directory has several subdirectories containing finished optimized job (optimized.xyz), python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/extract_pm6opt.py\" target=\"_blank\" rel=\"noopener\">extract_pm6opt.py</a> can be used to extract optimized geometry and energy.</p>\n<ul>\n<li><em>Usage</em>:<ul>\n<li><code>python extract_pm6opt.py</code></li>\n<li>run in the directory containing these subdirectories</li>\n</ul>\n</li>\n<li><em>Descriptions</em>:<ul>\n<li>read optimized.xyz in all subdirectories whose name starts with ‘d’, change their format from xyz to gaussian input and extract energies from these xyz files</li>\n<li>all new files are written to a new directory optresult</li>\n<li>the name of the structures and the gaussian input files depends on these subdirectories – <em>test</em> if <em>dtest</em></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dynamics-output\"><a href=\"#dynamics-output\" class=\"headerlink\" title=\"dynamics output\"></a>dynamics output</h2><p>Dynamics job creates additional file trajectory_*.xyz containing geometry information of all steps, which can be visualized by <a href=\"https://www.ks.uiuc.edu/Research/vmd/\" target=\"_blank\" rel=\"noopener\">VMD</a> software. The user can extract specific snapshots from the trajcetroy according to the stepsize set by VMD. Or use the python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/traj2xyzs.py\" target=\"_blank\" rel=\"noopener\">traj2xyz.py</a> to achieve the same goal as VMD extractor.</p>\n<ul>\n<li><em>Usage</em>:<ul>\n<li><code>python traj2xyz.py stride</code></li>\n<li>stride must be an integer</li>\n<li>stride=100: 200 snapshots out of 200000 will be extracted from trajectory</li>\n<li>run in the directory containing child-directory where trajectory_*.xyz locates</li>\n</ul>\n</li>\n<li><em>Descriptions</em>:<ul>\n<li>go through all subdirectories to locate trajectory_*.xyz, extract an exact number of geometries from trajectory and wirtten them to new subdirectories correspondingly</li>\n<li>the name of new subdirectories and snapshots are based on the name of subdirectories</li>\n<li>if originally <code>dtesta dtestb</code>, then after run this script: <code>dtesta dtesta_snapshots dtestb dtestb_snapshots</code>; in <code>dtesta_snapshots</code>: <code>testa_snap1.xyz testa_snap2.xyz ...</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><em>Two types of jobs, optimization and Born-Oppenheimer molecualr-dynamics with pm6 method, are introduced here. Linked python scripts should be useful to setup input and analyze result, which can run both in python2 and in python3.</em></p>\n<p><em><a href=\"http://openmopac.net/Manual/index.html\" target=\"_blank\" rel=\"noopener\">Mopac</a> is a general-purpose semiempirical molecular orbital package for the study of solid state and molecular structures and reactions. Several semiempirical methods are used to calculate electronic part, among which we usually choose PM6 method to run geometry optimization and BOMD. Just like other computational software packages, Mopac works in 3 steps: create a data file which describes molecular system and specifies job types; command Mopac to carry out the calcualtion with that data-file (on Hyak node); extract the desired result from the output-file.</em></p>\n<h1 id=\"Input-Setup\"><a href=\"#Input-Setup\" class=\"headerlink\" title=\"Input Setup\"></a>Input Setup</h1><p><a href=\"http://cuby4.molecular.cz\" target=\"_blank\" rel=\"noopener\">Cuby</a> provides an unified access to various computational methods available in different software packages, including gaussian, mopac, turbomole, etc. It is a computational chemistry framework written in ruby, which does very little for itself, but calls external softwares to do the calculations and works with their results. To work with cuby, two input files are needed: xyz file and yaml file. </p>\n<h2 id=\"xyz-file\"><a href=\"#xyz-file\" class=\"headerlink\" title=\"xyz-file\"></a>xyz-file</h2><p>xyz file contains the geometry of the molecule system – the first line is the number of atoms, the second line is the comment line (could be blank) and the remaining lines are atoms Cartesian coordinates. Take $H_2O$ as an example:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br><span class=\"line\"></span><br><span class=\"line\">O                 -0.54954964    0.83729475    0.01780404</span><br><span class=\"line\">H                 -0.87000423    1.74223058    0.01780404</span><br><span class=\"line\">H                  0.41045036    0.83729475    0.01780404</span><br></pre></td></tr></table></figure>\n<p> Common input files we use are gaussian input files. The script, <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py\" target=\"_blank\" rel=\"noopener\">gjfcom2xyz.py</a> can convert the input file from gaussian input format to xyz format. </p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python gjfcom2xyz.py input-file</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>use charge and multiplicity (chg&amp;mp) as a key to locate the start of coordinates</li>\n<li>every lines containing 4 elements after chg&amp;mp is considered as coordinate line. Valid delimiters: space, spaces and comma.</li>\n</ul>\n</li>\n</ul>\n<p>python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/xyz2gjf.py\" target=\"_blank\" rel=\"noopener\">xyz2gjf.py</a> can convert xyz format back to gaussian input format.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python xyz2gjf.py xyz-file</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>every line after the second line contains 4 elements and the last three elements are float is considered as coordinate line. Valid delimiters are space or spaces.</li>\n<li>route card, charge and multiplicity are defined by default, could be changed later or modified in the scripts.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"yaml-file\"><a href=\"#yaml-file\" class=\"headerlink\" title=\"yaml-file\"></a>yaml-file</h2><p>yaml file is a list of keywords, which is the bridge to connect cuby with computational softwares. The format is <code>keyword: option</code> and there must be a space after colon (:).</p>\n<h3 id=\"optimize-yaml\"><a href=\"#optimize-yaml\" class=\"headerlink\" title=\"optimize-yaml\"></a>optimize-yaml</h3><p><em>Example–inp.yaml</em>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span> <span class=\"string\">optimize</span></span><br><span class=\"line\"><span class=\"attr\">geometry:</span> <span class=\"string\">test.xyz</span></span><br><span class=\"line\"><span class=\"attr\">charge:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">multiplicity:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">interface:</span> <span class=\"string\">mopac</span></span><br><span class=\"line\"><span class=\"attr\">method:</span> <span class=\"string\">pm6</span></span><br><span class=\"line\"><span class=\"attr\">spin_restricted:</span> <span class=\"string\">auto_uhf</span></span><br><span class=\"line\"><span class=\"attr\">maxcycles:</span> <span class=\"number\">2000</span></span><br><span class=\"line\"><span class=\"attr\">print:</span> <span class=\"string\">timing</span></span><br><span class=\"line\"><span class=\"attr\">mopac_precise:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">mopac_peptide_bond_fix:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">modifiers:</span> <span class=\"string\">dispersion3,</span> <span class=\"string\">h_bonds4</span></span><br><span class=\"line\"><span class=\"attr\">modifier_h_bonds:</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_scale_charged:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_extra_scaling:</span> <span class=\"string\">&#123;&#125;</span></span><br></pre></td></tr></table></figure>\n<p><em>Explanations</em>:</p>\n<ul>\n<li>job: optimize<ul>\n<li>simple geometry optimization of molecule specified in test.xyz file</li>\n<li>the calculation produces these additional files:<ul>\n<li>optimized.xyz - the optimized geometry</li>\n<li>history_inp.xyz - record of all the steps</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>spin_restricted: auto_uhf<ul>\n<li>uhf for any open-shell systems, rhf is used for closed shells</li>\n</ul>\n</li>\n<li>maxcycles: 2000<ul>\n<li>maximum number of cycles of optimization or molecular dynamics</li>\n</ul>\n</li>\n<li>print: timing<ul>\n<li>print time spent in the program</li>\n</ul>\n</li>\n<li><a href=\"http://openmopac.net/manual/precise.html\" target=\"_blank\" rel=\"noopener\">mopac_precise</a>: yes<ul>\n<li>use tight thresholds, needed for accurate gradient</li>\n</ul>\n</li>\n<li><a href=\"http://openmopac.net/manual/mmok.html\" target=\"_blank\" rel=\"noopener\">mopac_peptide_bond_fix</a>: yes<ul>\n<li>controls the corerction for peptide bond torsion</li>\n</ul>\n</li>\n<li>modifiers<ul>\n<li>a list of interfaces applied as a modifiers to this calculations.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"dynamics-yaml\"><a href=\"#dynamics-yaml\" class=\"headerlink\" title=\"dynamics-yaml\"></a>dynamics-yaml</h3><p><em>Example–anneal.yaml</em>:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">job:</span> <span class=\"string\">dynamics</span></span><br><span class=\"line\"><span class=\"attr\">geometry:</span> <span class=\"string\">test.xyz</span></span><br><span class=\"line\"><span class=\"attr\">charge:</span> <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"attr\">multiplicity:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">spin_restricted:</span> <span class=\"string\">auto_uhf</span></span><br><span class=\"line\"><span class=\"attr\">interface:</span> <span class=\"string\">mopac</span></span><br><span class=\"line\"><span class=\"attr\">method:</span> <span class=\"string\">pm6</span></span><br><span class=\"line\"><span class=\"attr\">mopac_precise:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">mopac_peptide_bond_fix:</span> <span class=\"literal\">yes</span></span><br><span class=\"line\"><span class=\"attr\">modifiers:</span> <span class=\"string\">dispersion3,</span> <span class=\"string\">h_bonds4</span></span><br><span class=\"line\"><span class=\"attr\">modifier_h_bonds:</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_scale_charged:</span> <span class=\"literal\">no</span></span><br><span class=\"line\"><span class=\"attr\">  h_bonds4_extra_scaling:</span> <span class=\"string\">&#123;&#125;</span></span><br><span class=\"line\"><span class=\"attr\">maxcycles:</span> <span class=\"number\">20000</span></span><br><span class=\"line\"><span class=\"attr\">timestep:</span> <span class=\"number\">0.001</span></span><br><span class=\"line\"><span class=\"attr\">init_temp:</span> <span class=\"number\">310</span></span><br><span class=\"line\"><span class=\"attr\">temperature:</span> <span class=\"number\">310</span></span><br><span class=\"line\"><span class=\"attr\">thermostat:</span> <span class=\"string\">berendsen</span></span><br><span class=\"line\"><span class=\"attr\">thermostat_tc:</span> <span class=\"number\">0.05</span></span><br></pre></td></tr></table></figure>\n<p><em>Explanations</em>:</p>\n<ul>\n<li>job: dynamics<ul>\n<li>molecular dynamics simulation of molecule specified in test.xyz file</li>\n<li>the calculation produces these additional files:<ul>\n<li>last.xyz - the last geometry</li>\n<li>trajectory_test.xyz - record of all the cycles (20000 here)</li>\n<li>LOG - standard output and error information for every cycle</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>maxcycles: 20000<ul>\n<li>20 ps of MD simulation (the default step is 1 fs)</li>\n</ul>\n</li>\n<li>init_temp: 310<ul>\n<li>temperature (K) used to generate initial random velocities</li>\n</ul>\n</li>\n<li>temperature: 310<ul>\n<li>temperature (K) to be maintained by the thermostat</li>\n</ul>\n</li>\n<li>thermostat: berendsen<ul>\n<li>selection of thermostat algorithm</li>\n</ul>\n</li>\n<li>thermostat_tc: 0.05<ul>\n<li>Thermostat time constant (ps) setting strength of the coupling to the thermostat. The exact mening of the value is different in different algorithms.</li>\n</ul>\n</li>\n</ul>\n<p><em>Note</em>:</p>\n<ul>\n<li>add <code>scf_cycles: 1000</code> for open-shell system to define the maximum number of SCF iterations</li>\n</ul>\n<h3 id=\"Other-Keywords\"><a href=\"#Other-Keywords\" class=\"headerlink\" title=\"Other Keywords\"></a>Other Keywords</h3><ul>\n<li><code>md_region: &quot;&quot;</code> &amp; <code>trajectory_selection: &quot;&quot;</code><ul>\n<li>ex: md_region: “1-19,22-100”, trajectory_selection: “1-100”: means load atoms from 1-100 and fix atoms 20-21</li>\n</ul>\n</li>\n<li><code>job_cleanup: yes | no</code><ul>\n<li>delete directories with external calculations when job finishes successfuly, default is yes</li>\n</ul>\n</li>\n<li><code>mopac_keywords: &quot;&quot;</code><ul>\n<li>extra keywords (in the MOPAC format) added into the input</li>\n<li>add keyword “camp” if job fails with not self-consistency</li>\n</ul>\n</li>\n<li><code>scf_convergence: 7</code><ul>\n<li>change SCF convergence threshold (energy): set to $10^{-7}$ a.u.</li>\n</ul>\n</li>\n<li>click <a href=\"http://cuby4.molecular.cz/keywords.html\" target=\"_blank\" rel=\"noopener\">here</a> to see more</li>\n</ul>\n<h1 id=\"Submit-to-Hyak\"><a href=\"#Submit-to-Hyak\" class=\"headerlink\" title=\"Submit to Hyak\"></a>Submit to Hyak</h1><p>Besides xyz and yaml (test.yaml) files, sbatch file (test.sh) also needed:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=??:00:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???GB</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=????????????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\">module load contrib/mopac16</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/lusers/yueliu96/.rvm/scripts/rvm</span><br><span class=\"line\">ldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so &gt; ldd.log</span><br><span class=\"line\">cuby4 test.yaml &amp;&gt;LOG    </span><br><span class=\"line\"><span class=\"comment\">## results and error information will be written to file LOG</span></span><br><span class=\"line\"><span class=\"comment\">## cuby4 test.yaml: same information will be written to slurm file</span></span><br></pre></td></tr></table></figure>\n<p>run <code>sbatch test.sh</code> to submit it.</p>\n<h2 id=\"Parallel-Run\"><a href=\"#Parallel-Run\" class=\"headerlink\" title=\"Parallel-Run\"></a>Parallel-Run</h2><p>Most nodes on hyak.mox have 28 processors, however, the code in MOPAC only allows a single processor to be used for a single calculation. If several calculations to be run, each calculation could be started on a different processor in one node.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=??????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=??:00:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???G</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=??????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\">module load parallel-20170722</span><br><span class=\"line\">module load contrib/mopac16</span><br><span class=\"line\"><span class=\"built_in\">source</span> /usr/lusers/yueliu96/.rvm/scripts/rvm</span><br><span class=\"line\">ldd /sw/contrib/cuby4/cuby4/classes/algebra/algebra_c.so &gt; ldd.log</span><br><span class=\"line\">cat tasklists.sh | parallel -j 28</span><br></pre></td></tr></table></figure>\n<p>where, tasklists$.$sh is :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> absolute-directory-1; cuby4 test.yaml &amp;&gt;LOG</span><br><span class=\"line\"><span class=\"built_in\">cd</span> absolute-directory-2; cuby4 test.yaml &amp;&gt;LOG</span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n<p>there should exist xyz and yaml files in every absolute directory.</p>\n<h2 id=\"Scripts-for-Parallel-Run\"><a href=\"#Scripts-for-Parallel-Run\" class=\"headerlink\" title=\"Scripts for Parallel-Run\"></a>Scripts for Parallel-Run</h2><ul>\n<li><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6opt_parallel.py\" target=\"_blank\" rel=\"noopener\">pm6opt_parallel.py</a></li>\n<li><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/pm6bomd_parallel.py\" target=\"_blank\" rel=\"noopener\">pm6bomd_parallel.py</a></li>\n</ul>\n<p>To run pm6-optimize or pm6-BOMD for several different molecules, create their xyz files in the working directory:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">test1.xyz test2.xyz test3.xyz</span><br></pre></td></tr></table></figure>\n<p>and then run <code>python pm6opt_parallel.py</code> or <code>python pm6bomd_parallel.py</code>. Then, tasklists$.$sh file, parallel_run$.$sh file and sub-directories for every xyz file will be created. In every xyz sub-folder, xyz and yaml files are created correspondingly:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dtest1  dtest2 dtest3 taskslists.sh parallel_run.sh</span><br></pre></td></tr></table></figure>\n<p>in <code>dtest1</code>: <code>test1.xyz inp.yaml</code> if it is opt job; <code>test1.xyz anneal.yaml</code> if it is dynamics job.</p>\n<h1 id=\"Output-Analysis\"><a href=\"#Output-Analysis\" class=\"headerlink\" title=\"Output Analysis\"></a>Output Analysis</h1><h2 id=\"opt-output\"><a href=\"#opt-output\" class=\"headerlink\" title=\"opt output\"></a>opt output</h2><p>Optimization job produces optimized.xyz and histotry_xxx.xyz (xxx depends on the name of yaml file). The optimized.xyz is the optimized geometry in xyz formatted, where energy value is on the second line.</p>\n<p>In the parallel-run case, one directory has several subdirectories containing finished optimized job (optimized.xyz), python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/extract_pm6opt.py\" target=\"_blank\" rel=\"noopener\">extract_pm6opt.py</a> can be used to extract optimized geometry and energy.</p>\n<ul>\n<li><em>Usage</em>:<ul>\n<li><code>python extract_pm6opt.py</code></li>\n<li>run in the directory containing these subdirectories</li>\n</ul>\n</li>\n<li><em>Descriptions</em>:<ul>\n<li>read optimized.xyz in all subdirectories whose name starts with ‘d’, change their format from xyz to gaussian input and extract energies from these xyz files</li>\n<li>all new files are written to a new directory optresult</li>\n<li>the name of the structures and the gaussian input files depends on these subdirectories – <em>test</em> if <em>dtest</em></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"dynamics-output\"><a href=\"#dynamics-output\" class=\"headerlink\" title=\"dynamics output\"></a>dynamics output</h2><p>Dynamics job creates additional file trajectory_*.xyz containing geometry information of all steps, which can be visualized by <a href=\"https://www.ks.uiuc.edu/Research/vmd/\" target=\"_blank\" rel=\"noopener\">VMD</a> software. The user can extract specific snapshots from the trajcetroy according to the stepsize set by VMD. Or use the python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/traj2xyzs.py\" target=\"_blank\" rel=\"noopener\">traj2xyz.py</a> to achieve the same goal as VMD extractor.</p>\n<ul>\n<li><em>Usage</em>:<ul>\n<li><code>python traj2xyz.py stride</code></li>\n<li>stride must be an integer</li>\n<li>stride=100: 200 snapshots out of 200000 will be extracted from trajectory</li>\n<li>run in the directory containing child-directory where trajectory_*.xyz locates</li>\n</ul>\n</li>\n<li><em>Descriptions</em>:<ul>\n<li>go through all subdirectories to locate trajectory_*.xyz, extract an exact number of geometries from trajectory and wirtten them to new subdirectories correspondingly</li>\n<li>the name of new subdirectories and snapshots are based on the name of subdirectories</li>\n<li>if originally <code>dtesta dtestb</code>, then after run this script: <code>dtesta dtesta_snapshots dtestb dtestb_snapshots</code>; in <code>dtesta_snapshots</code>: <code>testa_snap1.xyz testa_snap2.xyz ...</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"Newton-X on Hyak","date":"2018-12-31T04:30:09.000Z","_content":"\n*[Newton-X](http://www.newtonx.org) is a general-purpose program package for excited-state molecular dynamics, which is used to simulate absorption spectrum with GAUSSIAN09 in our group.*\n\n*There is [a tutorial written by Andy Dang](https://github.com/yueliu96/Turecek-GroupMeeting/blob/master/NX%20Tutorial%20for%20Vibronically%20Broadened%20Spectra.pdf) about why we need Newton-X, how to run it on Hyak and how to analyse its data. One can find another tutorial on [Newton-X website](http://www.newtonx.org), which is also the reference of the following content. A fast setup could be achieved by [my python script](#pscript). Scripts attached here can run both in python2 and in python3.*\n\n# Newton-X Setup\n\n## Procedures\n\n### 1. geometry and normal mode input\n\nIn the working directory prepare two files: one is the optimized geometry in gaussian input format and the other is the normal mode calculation output file (gaussian frequency log file, usually calcuated with b3lyp method):\n\n`opt.gjf  freq.log`\n\n### 2. load newton-x environment\n\nTo work in the newton-x environment on Hyak, run `module load contrib/newtonX` or `module load contrib/newton-x`. Their difference is that newton-x contains other package like gaussin09. \n\nWe can check if we load successfully by command `$NX`, which should produce an info `-bash: /sw/contrib/newtonX/NX-2-B17/bin: Is a directory`. Or run `module list` to see all packages availabe to use.\n\n### 3. convert optimized geometry into newton-x format\n\nConvert optimized geometry (opt.gjf) into xyz format first, could be achieved by script [gjfcom2xyz.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py): `python gjfcom2xyz.py opt.gjf`. opt.xyz could be produced.\n\n`$NX/xyz2nx < opt.xyz` generates newton-x geometry file named *geom*, whose second column is the atomic number, the following three columns are x, y and z coordinates in atomic units (*Bohr*) and the last one contains the atomic masses.\n\n### 4. newton-x working directory\n\nCreat a new directory *TDDFT_SPEC* in the working directory, copy/move *geom* to it, copy/move *freq.log* to it with a new name *freq.out*: \n\n```\nmkdir TDDFT_SPEC\nmv geom TDDFT_SPEC\ncp freq.log TDDFT_SPEC/freq.out\n```\n\n### 5. energy and transition moment input\n\nMove to the directory *TDDFT_SPEC* and create a new subdirectory called *JOB_AD*. Move into *JOB_AD* and prepare two files named, *basis* and *gaussian$.$com*. \n*basis* contains the basis set information, like `6-31+g(d,p)`. *gaussian$.$com* is same with the very first optimized geometry file *opt.gjf* but with different link command lines and route card, like (%rwf and %nosave could be deleted):\n\n```\n%mem=100gb\n%nprocshared=28\n%rwf=gaussian\n%nosave\n%chk=gaussian\n# TD(NStates=10) m062xd/6-31+g(d,p)  pop=none scf=(xqc,tight) Symmetry=None\n```\n\nNote that the subdirectory must be named with *JOB_AD* and the name of these two files must be *basis* and *gaussian$.$com* since Newton-X will search for them.\n\n### 6. newton-x input\n\nBack to the directory *TDDFT_SPEC*, use command `$NX/nxinp` and answer several quesitons by instructions to genetrate the newton-x input file *initqp_input*. Answers to the questions are `1 (Generate initial condition); 2 (Winger); numer of atoms; 300 (number of initial conditions); geom; 4 (gaussian output); freq.out; 0.975 (modified frequency); 310 (temperature); n; 1 (check energy); 1 (ground state); number of states; 1 ; 100 (de, width of restriction); 6.5; 0 (seed value); 1; 7 (exit)`, respectively. Here, the large \"de\" implies that this restriction will not be used. It can be imposed later on.\n\n### 7. splitting jobs\n\nThis step is to split the job among several computers (nodes), could be skipped and go directly to run the newton-x by `$NX/initcond.pl > initcond.log`.\n\n To split the job, run `NX/split_initcond.pl` in the directory *TDDFT_SPEC*. Two questions will be asked, the first one is the number of directories to split the job and the second one is if the job run in a batch system. The answer to the second question is \"n\". This program produces one file named *split_initcond.log* and a directory called *INITIAL_CONDITIONS*. If the answer to the first quesiton is 10, 10 subdirectories called *I1,I2,...,I10* are inside *INITIAL_CONDITIONS*, each one containing a complete set of input files but with 30 (300 $\\div$ 10) initial conditions and iseed=-1 not 0.\n\n ### 8. submit newton-x job\n\nIn every directory containing a complete set of input files  (geom, freq.out, initqp_input and JOB_AD), create a sbatch file to submit the job to Hyak node.\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=???\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-node=28\n#SBATCH --time=??:00:00\n#SBATCH --mem=???G\n#SABTCH --workdir=???????\n#SBATCH --partition=???\n#SBATCH --account=???\n\necho 'This job will run on' $SLURM_JOB_NODELIST\n#set up time\nbegin=$(date +%s)\n\n#load newtonx and gauss09 environment\nmodule load contrib/newton-x\n\n$NX/initcond.pl > initcond.log\n\nend=$(date +%s)\necho 'Elapsed Time: '$(($end-$begin))'s'\n```\n\n## <jump id='pscript'>Scripts</jump>\n\n  python script [newtonx.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/newtonx.py) can do exactly what step 2 to step 8 do.\n\n- *Usage*\n  - `python newtonx.py geometry-gif-file freq-log`\n- *Descriptions*\n  - *TDDFT_SPEC* folder is created, which contains *geom*, *freq.log*, *initqp_input*, *split_initcond.log*, *newtonx$.$sh*, *JOB_AD*, *INITIAL_CONDITIONS*\n  - *I1 I2 ...* in *INITIAL_CONDITIONS*, each subfolder containing a complete set input -- *geom*, *freq.out*, *initqp_input* (iseed=1234,2468,...), *JOB_AD* and a sbatch file -- *nx_submit.sh*\n  - *nx_submit.sh* is the sbatch file same with what is listed in step 8, but with partition=ckpt, account=stf-ckpt.\n  - *newtonx$.$sh* contains a list of bash command like: `cd absolute-path-of-I1; sbatch -p ckpt -A stf-ckpt --time=20:00:00 nx_submit.sh`\n  - after satisfied with everything, run `bash newtonx.sh` to submit all jobs to hyak nodes; the final partition, account and time are decided by the setting in *newtonx$.$sh* even if *newtonx$.$sh* is different from *nx_submit.sh*\n- *Note*\n  - why ckpt?\n    - increasing the number of splitting jobs speeds up the task greatly\n    - [ckpt queue](https://wiki.cac.washington.edu/display/hyakusers/Mox_checkpoint) is a good choice to run short jobs that finish within 4 hours\n  - why iseed=1234,2468,...,1234*n?\n    - different iseed values guarantee no repeated jobs\n    - iseed=-1 may generate a super large number not suit for ckpt queue\n  \n# Newton-X Result\n\n## Procedures\n\n### merge splitting jobs\n\nAfter all sub-tasks finish, go to the directory *INITIAL_CONDITIONS* and run `$NX/merge_initcond.pl`. This program will ask the number of jobs to be merged and it will create a new directory called *I_merged* with merged results. All important data are in *final_optput.1.N* file, which contains transition information from state 1 to state *N*. \n\n### spectrum simulation\n\nMove to this directory and proceed with the spectrum simulation by command `$NX/nxinp`. The answers to the questions it will ask are `5 (spectra); 1 (spectra); 1 (initial state); 2-N (array of final states); F (Absorption); 0 (no restriction); -1(read osc strength from file); local; 1 (random seed); lorentz; 0.1 (delta); 310 (temperature); 1 (refraction index); 0.005 (distance between consecutive points in the spectrum); 3 (kappa: the range of the spectrum is defined between Emin-kappa*delta and Emax+kappa*delta); 7 (exit)`, among which delta contronls the width of the curve.\n\nThe simulated cross section using a Lorentzian line shape with phenomenological broadening $\\delta=0.1eV$ is written to *cross-section.dat*, containing four columns of data -- DE/ev, lambda/nm, sigma/A^2 and +/-error/A^2.\n\n## <jump id='pscript'>Script</jump>\n\nAll the above steps can be achieved by script [nxplot.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/nxplot.py). (This script is to be updated, especially for plot function)\n\n- *Usage*\n  - `python nxplot.py`\n  -  run inside the directory *INITIAL_CONDITIONS*\n- *Descriptions*\n  - check if jobs completed\n  - merge splitting jobs\n  - spectrum simulation\n  - extract the lamda and sigma columns if lamda within 0-1200nm from *cross-section.dat* and written to *cross-section.tsv*\n  - plot *cross-section.tsv* if in python3 environment\n\n","source":"_posts/Newton-X-on-Hyak.md","raw":"---\ntitle: Newton-X on Hyak\ndate: 2018-12-30 20:30:09\ntags:\n- Hyak\n- Software Tutorial\ncategories:\n- Turecek Lab Tutorial\n---\n\n*[Newton-X](http://www.newtonx.org) is a general-purpose program package for excited-state molecular dynamics, which is used to simulate absorption spectrum with GAUSSIAN09 in our group.*\n\n*There is [a tutorial written by Andy Dang](https://github.com/yueliu96/Turecek-GroupMeeting/blob/master/NX%20Tutorial%20for%20Vibronically%20Broadened%20Spectra.pdf) about why we need Newton-X, how to run it on Hyak and how to analyse its data. One can find another tutorial on [Newton-X website](http://www.newtonx.org), which is also the reference of the following content. A fast setup could be achieved by [my python script](#pscript). Scripts attached here can run both in python2 and in python3.*\n\n# Newton-X Setup\n\n## Procedures\n\n### 1. geometry and normal mode input\n\nIn the working directory prepare two files: one is the optimized geometry in gaussian input format and the other is the normal mode calculation output file (gaussian frequency log file, usually calcuated with b3lyp method):\n\n`opt.gjf  freq.log`\n\n### 2. load newton-x environment\n\nTo work in the newton-x environment on Hyak, run `module load contrib/newtonX` or `module load contrib/newton-x`. Their difference is that newton-x contains other package like gaussin09. \n\nWe can check if we load successfully by command `$NX`, which should produce an info `-bash: /sw/contrib/newtonX/NX-2-B17/bin: Is a directory`. Or run `module list` to see all packages availabe to use.\n\n### 3. convert optimized geometry into newton-x format\n\nConvert optimized geometry (opt.gjf) into xyz format first, could be achieved by script [gjfcom2xyz.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py): `python gjfcom2xyz.py opt.gjf`. opt.xyz could be produced.\n\n`$NX/xyz2nx < opt.xyz` generates newton-x geometry file named *geom*, whose second column is the atomic number, the following three columns are x, y and z coordinates in atomic units (*Bohr*) and the last one contains the atomic masses.\n\n### 4. newton-x working directory\n\nCreat a new directory *TDDFT_SPEC* in the working directory, copy/move *geom* to it, copy/move *freq.log* to it with a new name *freq.out*: \n\n```\nmkdir TDDFT_SPEC\nmv geom TDDFT_SPEC\ncp freq.log TDDFT_SPEC/freq.out\n```\n\n### 5. energy and transition moment input\n\nMove to the directory *TDDFT_SPEC* and create a new subdirectory called *JOB_AD*. Move into *JOB_AD* and prepare two files named, *basis* and *gaussian$.$com*. \n*basis* contains the basis set information, like `6-31+g(d,p)`. *gaussian$.$com* is same with the very first optimized geometry file *opt.gjf* but with different link command lines and route card, like (%rwf and %nosave could be deleted):\n\n```\n%mem=100gb\n%nprocshared=28\n%rwf=gaussian\n%nosave\n%chk=gaussian\n# TD(NStates=10) m062xd/6-31+g(d,p)  pop=none scf=(xqc,tight) Symmetry=None\n```\n\nNote that the subdirectory must be named with *JOB_AD* and the name of these two files must be *basis* and *gaussian$.$com* since Newton-X will search for them.\n\n### 6. newton-x input\n\nBack to the directory *TDDFT_SPEC*, use command `$NX/nxinp` and answer several quesitons by instructions to genetrate the newton-x input file *initqp_input*. Answers to the questions are `1 (Generate initial condition); 2 (Winger); numer of atoms; 300 (number of initial conditions); geom; 4 (gaussian output); freq.out; 0.975 (modified frequency); 310 (temperature); n; 1 (check energy); 1 (ground state); number of states; 1 ; 100 (de, width of restriction); 6.5; 0 (seed value); 1; 7 (exit)`, respectively. Here, the large \"de\" implies that this restriction will not be used. It can be imposed later on.\n\n### 7. splitting jobs\n\nThis step is to split the job among several computers (nodes), could be skipped and go directly to run the newton-x by `$NX/initcond.pl > initcond.log`.\n\n To split the job, run `NX/split_initcond.pl` in the directory *TDDFT_SPEC*. Two questions will be asked, the first one is the number of directories to split the job and the second one is if the job run in a batch system. The answer to the second question is \"n\". This program produces one file named *split_initcond.log* and a directory called *INITIAL_CONDITIONS*. If the answer to the first quesiton is 10, 10 subdirectories called *I1,I2,...,I10* are inside *INITIAL_CONDITIONS*, each one containing a complete set of input files but with 30 (300 $\\div$ 10) initial conditions and iseed=-1 not 0.\n\n ### 8. submit newton-x job\n\nIn every directory containing a complete set of input files  (geom, freq.out, initqp_input and JOB_AD), create a sbatch file to submit the job to Hyak node.\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=???\n#SBATCH --nodes=1\n#SBATCH --ntasks-per-node=28\n#SBATCH --time=??:00:00\n#SBATCH --mem=???G\n#SABTCH --workdir=???????\n#SBATCH --partition=???\n#SBATCH --account=???\n\necho 'This job will run on' $SLURM_JOB_NODELIST\n#set up time\nbegin=$(date +%s)\n\n#load newtonx and gauss09 environment\nmodule load contrib/newton-x\n\n$NX/initcond.pl > initcond.log\n\nend=$(date +%s)\necho 'Elapsed Time: '$(($end-$begin))'s'\n```\n\n## <jump id='pscript'>Scripts</jump>\n\n  python script [newtonx.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/newtonx.py) can do exactly what step 2 to step 8 do.\n\n- *Usage*\n  - `python newtonx.py geometry-gif-file freq-log`\n- *Descriptions*\n  - *TDDFT_SPEC* folder is created, which contains *geom*, *freq.log*, *initqp_input*, *split_initcond.log*, *newtonx$.$sh*, *JOB_AD*, *INITIAL_CONDITIONS*\n  - *I1 I2 ...* in *INITIAL_CONDITIONS*, each subfolder containing a complete set input -- *geom*, *freq.out*, *initqp_input* (iseed=1234,2468,...), *JOB_AD* and a sbatch file -- *nx_submit.sh*\n  - *nx_submit.sh* is the sbatch file same with what is listed in step 8, but with partition=ckpt, account=stf-ckpt.\n  - *newtonx$.$sh* contains a list of bash command like: `cd absolute-path-of-I1; sbatch -p ckpt -A stf-ckpt --time=20:00:00 nx_submit.sh`\n  - after satisfied with everything, run `bash newtonx.sh` to submit all jobs to hyak nodes; the final partition, account and time are decided by the setting in *newtonx$.$sh* even if *newtonx$.$sh* is different from *nx_submit.sh*\n- *Note*\n  - why ckpt?\n    - increasing the number of splitting jobs speeds up the task greatly\n    - [ckpt queue](https://wiki.cac.washington.edu/display/hyakusers/Mox_checkpoint) is a good choice to run short jobs that finish within 4 hours\n  - why iseed=1234,2468,...,1234*n?\n    - different iseed values guarantee no repeated jobs\n    - iseed=-1 may generate a super large number not suit for ckpt queue\n  \n# Newton-X Result\n\n## Procedures\n\n### merge splitting jobs\n\nAfter all sub-tasks finish, go to the directory *INITIAL_CONDITIONS* and run `$NX/merge_initcond.pl`. This program will ask the number of jobs to be merged and it will create a new directory called *I_merged* with merged results. All important data are in *final_optput.1.N* file, which contains transition information from state 1 to state *N*. \n\n### spectrum simulation\n\nMove to this directory and proceed with the spectrum simulation by command `$NX/nxinp`. The answers to the questions it will ask are `5 (spectra); 1 (spectra); 1 (initial state); 2-N (array of final states); F (Absorption); 0 (no restriction); -1(read osc strength from file); local; 1 (random seed); lorentz; 0.1 (delta); 310 (temperature); 1 (refraction index); 0.005 (distance between consecutive points in the spectrum); 3 (kappa: the range of the spectrum is defined between Emin-kappa*delta and Emax+kappa*delta); 7 (exit)`, among which delta contronls the width of the curve.\n\nThe simulated cross section using a Lorentzian line shape with phenomenological broadening $\\delta=0.1eV$ is written to *cross-section.dat*, containing four columns of data -- DE/ev, lambda/nm, sigma/A^2 and +/-error/A^2.\n\n## <jump id='pscript'>Script</jump>\n\nAll the above steps can be achieved by script [nxplot.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/nxplot.py). (This script is to be updated, especially for plot function)\n\n- *Usage*\n  - `python nxplot.py`\n  -  run inside the directory *INITIAL_CONDITIONS*\n- *Descriptions*\n  - check if jobs completed\n  - merge splitting jobs\n  - spectrum simulation\n  - extract the lamda and sigma columns if lamda within 0-1200nm from *cross-section.dat* and written to *cross-section.tsv*\n  - plot *cross-section.tsv* if in python3 environment\n\n","slug":"Newton-X-on-Hyak","published":1,"updated":"2019-04-08T06:22:27.297Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eb0d000tmhmosvrfo0zd","content":"<p><em><a href=\"http://www.newtonx.org\" target=\"_blank\" rel=\"noopener\">Newton-X</a> is a general-purpose program package for excited-state molecular dynamics, which is used to simulate absorption spectrum with GAUSSIAN09 in our group.</em></p>\n<p><em>There is <a href=\"https://github.com/yueliu96/Turecek-GroupMeeting/blob/master/NX%20Tutorial%20for%20Vibronically%20Broadened%20Spectra.pdf\" target=\"_blank\" rel=\"noopener\">a tutorial written by Andy Dang</a> about why we need Newton-X, how to run it on Hyak and how to analyse its data. One can find another tutorial on <a href=\"http://www.newtonx.org\" target=\"_blank\" rel=\"noopener\">Newton-X website</a>, which is also the reference of the following content. A fast setup could be achieved by <a href=\"#pscript\">my python script</a>. Scripts attached here can run both in python2 and in python3.</em></p>\n<h1 id=\"Newton-X-Setup\"><a href=\"#Newton-X-Setup\" class=\"headerlink\" title=\"Newton-X Setup\"></a>Newton-X Setup</h1><h2 id=\"Procedures\"><a href=\"#Procedures\" class=\"headerlink\" title=\"Procedures\"></a>Procedures</h2><h3 id=\"1-geometry-and-normal-mode-input\"><a href=\"#1-geometry-and-normal-mode-input\" class=\"headerlink\" title=\"1. geometry and normal mode input\"></a>1. geometry and normal mode input</h3><p>In the working directory prepare two files: one is the optimized geometry in gaussian input format and the other is the normal mode calculation output file (gaussian frequency log file, usually calcuated with b3lyp method):</p>\n<p><code>opt.gjf  freq.log</code></p>\n<h3 id=\"2-load-newton-x-environment\"><a href=\"#2-load-newton-x-environment\" class=\"headerlink\" title=\"2. load newton-x environment\"></a>2. load newton-x environment</h3><p>To work in the newton-x environment on Hyak, run <code>module load contrib/newtonX</code> or <code>module load contrib/newton-x</code>. Their difference is that newton-x contains other package like gaussin09. </p>\n<p>We can check if we load successfully by command <code>$NX</code>, which should produce an info <code>-bash: /sw/contrib/newtonX/NX-2-B17/bin: Is a directory</code>. Or run <code>module list</code> to see all packages availabe to use.</p>\n<h3 id=\"3-convert-optimized-geometry-into-newton-x-format\"><a href=\"#3-convert-optimized-geometry-into-newton-x-format\" class=\"headerlink\" title=\"3. convert optimized geometry into newton-x format\"></a>3. convert optimized geometry into newton-x format</h3><p>Convert optimized geometry (opt.gjf) into xyz format first, could be achieved by script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py\" target=\"_blank\" rel=\"noopener\">gjfcom2xyz.py</a>: <code>python gjfcom2xyz.py opt.gjf</code>. opt.xyz could be produced.</p>\n<p><code>$NX/xyz2nx &lt; opt.xyz</code> generates newton-x geometry file named <em>geom</em>, whose second column is the atomic number, the following three columns are x, y and z coordinates in atomic units (<em>Bohr</em>) and the last one contains the atomic masses.</p>\n<h3 id=\"4-newton-x-working-directory\"><a href=\"#4-newton-x-working-directory\" class=\"headerlink\" title=\"4. newton-x working directory\"></a>4. newton-x working directory</h3><p>Creat a new directory <em>TDDFT_SPEC</em> in the working directory, copy/move <em>geom</em> to it, copy/move <em>freq.log</em> to it with a new name <em>freq.out</em>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir TDDFT_SPEC</span><br><span class=\"line\">mv geom TDDFT_SPEC</span><br><span class=\"line\">cp freq.log TDDFT_SPEC/freq.out</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-energy-and-transition-moment-input\"><a href=\"#5-energy-and-transition-moment-input\" class=\"headerlink\" title=\"5. energy and transition moment input\"></a>5. energy and transition moment input</h3><p>Move to the directory <em>TDDFT_SPEC</em> and create a new subdirectory called <em>JOB_AD</em>. Move into <em>JOB_AD</em> and prepare two files named, <em>basis</em> and <em>gaussian$.$com</em>.<br><em>basis</em> contains the basis set information, like <code>6-31+g(d,p)</code>. <em>gaussian$.$com</em> is same with the very first optimized geometry file <em>opt.gjf</em> but with different link command lines and route card, like (%rwf and %nosave could be deleted):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=100gb</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%rwf=gaussian</span><br><span class=\"line\">%nosave</span><br><span class=\"line\">%chk=gaussian</span><br><span class=\"line\"># TD(NStates=10) m062xd/6-31+g(d,p)  pop=none scf=(xqc,tight) Symmetry=None</span><br></pre></td></tr></table></figure>\n<p>Note that the subdirectory must be named with <em>JOB_AD</em> and the name of these two files must be <em>basis</em> and <em>gaussian$.$com</em> since Newton-X will search for them.</p>\n<h3 id=\"6-newton-x-input\"><a href=\"#6-newton-x-input\" class=\"headerlink\" title=\"6. newton-x input\"></a>6. newton-x input</h3><p>Back to the directory <em>TDDFT_SPEC</em>, use command <code>$NX/nxinp</code> and answer several quesitons by instructions to genetrate the newton-x input file <em>initqp_input</em>. Answers to the questions are <code>1 (Generate initial condition); 2 (Winger); numer of atoms; 300 (number of initial conditions); geom; 4 (gaussian output); freq.out; 0.975 (modified frequency); 310 (temperature); n; 1 (check energy); 1 (ground state); number of states; 1 ; 100 (de, width of restriction); 6.5; 0 (seed value); 1; 7 (exit)</code>, respectively. Here, the large “de” implies that this restriction will not be used. It can be imposed later on.</p>\n<h3 id=\"7-splitting-jobs\"><a href=\"#7-splitting-jobs\" class=\"headerlink\" title=\"7. splitting jobs\"></a>7. splitting jobs</h3><p>This step is to split the job among several computers (nodes), could be skipped and go directly to run the newton-x by <code>$NX/initcond.pl &gt; initcond.log</code>.</p>\n<p> To split the job, run <code>NX/split_initcond.pl</code> in the directory <em>TDDFT_SPEC</em>. Two questions will be asked, the first one is the number of directories to split the job and the second one is if the job run in a batch system. The answer to the second question is “n”. This program produces one file named <em>split_initcond.log</em> and a directory called <em>INITIAL_CONDITIONS</em>. If the answer to the first quesiton is 10, 10 subdirectories called <em>I1,I2,…,I10</em> are inside <em>INITIAL_CONDITIONS</em>, each one containing a complete set of input files but with 30 (300 $\\div$ 10) initial conditions and iseed=-1 not 0.</p>\n<h3 id=\"8-submit-newton-x-job\"><a href=\"#8-submit-newton-x-job\" class=\"headerlink\" title=\"8. submit newton-x job\"></a>8. submit newton-x job</h3><p>In every directory containing a complete set of input files  (geom, freq.out, initqp_input and JOB_AD), create a sbatch file to submit the job to Hyak node.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --ntasks-per-node=28</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=??:00:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???G</span></span><br><span class=\"line\"><span class=\"comment\">#SABTCH --workdir=???????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'This job will run on'</span> <span class=\"variable\">$SLURM_JOB_NODELIST</span></span><br><span class=\"line\"><span class=\"comment\">#set up time</span></span><br><span class=\"line\">begin=$(date +%s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load newtonx and gauss09 environment</span></span><br><span class=\"line\">module load contrib/newton-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$NX</span>/initcond.pl &gt; initcond.log</span><br><span class=\"line\"></span><br><span class=\"line\">end=$(date +%s)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Elapsed Time: '</span>$((<span class=\"variable\">$end</span>-<span class=\"variable\">$begin</span>))<span class=\"string\">'s'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Scripts\"><a href=\"#Scripts\" class=\"headerlink\" title=\"Scripts\"></a><jump id=\"pscript\">Scripts</jump></h2><p>  python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/newtonx.py\" target=\"_blank\" rel=\"noopener\">newtonx.py</a> can do exactly what step 2 to step 8 do.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python newtonx.py geometry-gif-file freq-log</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li><em>TDDFT_SPEC</em> folder is created, which contains <em>geom</em>, <em>freq.log</em>, <em>initqp_input</em>, <em>split_initcond.log</em>, <em>newtonx$.$sh</em>, <em>JOB_AD</em>, <em>INITIAL_CONDITIONS</em></li>\n<li><em>I1 I2 …</em> in <em>INITIAL_CONDITIONS</em>, each subfolder containing a complete set input – <em>geom</em>, <em>freq.out</em>, <em>initqp_input</em> (iseed=1234,2468,…), <em>JOB_AD</em> and a sbatch file – <em>nx_submit.sh</em></li>\n<li><em>nx_submit.sh</em> is the sbatch file same with what is listed in step 8, but with partition=ckpt, account=stf-ckpt.</li>\n<li><em>newtonx$.$sh</em> contains a list of bash command like: <code>cd absolute-path-of-I1; sbatch -p ckpt -A stf-ckpt --time=20:00:00 nx_submit.sh</code></li>\n<li>after satisfied with everything, run <code>bash newtonx.sh</code> to submit all jobs to hyak nodes; the final partition, account and time are decided by the setting in <em>newtonx$.$sh</em> even if <em>newtonx$.$sh</em> is different from <em>nx_submit.sh</em></li>\n</ul>\n</li>\n<li><em>Note</em><ul>\n<li>why ckpt?<ul>\n<li>increasing the number of splitting jobs speeds up the task greatly</li>\n<li><a href=\"https://wiki.cac.washington.edu/display/hyakusers/Mox_checkpoint\" target=\"_blank\" rel=\"noopener\">ckpt queue</a> is a good choice to run short jobs that finish within 4 hours</li>\n</ul>\n</li>\n<li>why iseed=1234,2468,…,1234*n?<ul>\n<li>different iseed values guarantee no repeated jobs</li>\n<li>iseed=-1 may generate a super large number not suit for ckpt queue</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Newton-X-Result\"><a href=\"#Newton-X-Result\" class=\"headerlink\" title=\"Newton-X Result\"></a>Newton-X Result</h1><h2 id=\"Procedures-1\"><a href=\"#Procedures-1\" class=\"headerlink\" title=\"Procedures\"></a>Procedures</h2><h3 id=\"merge-splitting-jobs\"><a href=\"#merge-splitting-jobs\" class=\"headerlink\" title=\"merge splitting jobs\"></a>merge splitting jobs</h3><p>After all sub-tasks finish, go to the directory <em>INITIAL_CONDITIONS</em> and run <code>$NX/merge_initcond.pl</code>. This program will ask the number of jobs to be merged and it will create a new directory called <em>I_merged</em> with merged results. All important data are in <em>final_optput.1.N</em> file, which contains transition information from state 1 to state <em>N</em>. </p>\n<h3 id=\"spectrum-simulation\"><a href=\"#spectrum-simulation\" class=\"headerlink\" title=\"spectrum simulation\"></a>spectrum simulation</h3><p>Move to this directory and proceed with the spectrum simulation by command <code>$NX/nxinp</code>. The answers to the questions it will ask are <code>5 (spectra); 1 (spectra); 1 (initial state); 2-N (array of final states); F (Absorption); 0 (no restriction); -1(read osc strength from file); local; 1 (random seed); lorentz; 0.1 (delta); 310 (temperature); 1 (refraction index); 0.005 (distance between consecutive points in the spectrum); 3 (kappa: the range of the spectrum is defined between Emin-kappa*delta and Emax+kappa*delta); 7 (exit)</code>, among which delta contronls the width of the curve.</p>\n<p>The simulated cross section using a Lorentzian line shape with phenomenological broadening $\\delta=0.1eV$ is written to <em>cross-section.dat</em>, containing four columns of data – DE/ev, lambda/nm, sigma/A^2 and +/-error/A^2.</p>\n<h2 id=\"Script\"><a href=\"#Script\" class=\"headerlink\" title=\"Script\"></a><jump id=\"pscript\">Script</jump></h2><p>All the above steps can be achieved by script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/nxplot.py\" target=\"_blank\" rel=\"noopener\">nxplot.py</a>. (This script is to be updated, especially for plot function)</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python nxplot.py</code></li>\n<li>run inside the directory <em>INITIAL_CONDITIONS</em></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>check if jobs completed</li>\n<li>merge splitting jobs</li>\n<li>spectrum simulation</li>\n<li>extract the lamda and sigma columns if lamda within 0-1200nm from <em>cross-section.dat</em> and written to <em>cross-section.tsv</em></li>\n<li>plot <em>cross-section.tsv</em> if in python3 environment</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><em><a href=\"http://www.newtonx.org\" target=\"_blank\" rel=\"noopener\">Newton-X</a> is a general-purpose program package for excited-state molecular dynamics, which is used to simulate absorption spectrum with GAUSSIAN09 in our group.</em></p>\n<p><em>There is <a href=\"https://github.com/yueliu96/Turecek-GroupMeeting/blob/master/NX%20Tutorial%20for%20Vibronically%20Broadened%20Spectra.pdf\" target=\"_blank\" rel=\"noopener\">a tutorial written by Andy Dang</a> about why we need Newton-X, how to run it on Hyak and how to analyse its data. One can find another tutorial on <a href=\"http://www.newtonx.org\" target=\"_blank\" rel=\"noopener\">Newton-X website</a>, which is also the reference of the following content. A fast setup could be achieved by <a href=\"#pscript\">my python script</a>. Scripts attached here can run both in python2 and in python3.</em></p>\n<h1 id=\"Newton-X-Setup\"><a href=\"#Newton-X-Setup\" class=\"headerlink\" title=\"Newton-X Setup\"></a>Newton-X Setup</h1><h2 id=\"Procedures\"><a href=\"#Procedures\" class=\"headerlink\" title=\"Procedures\"></a>Procedures</h2><h3 id=\"1-geometry-and-normal-mode-input\"><a href=\"#1-geometry-and-normal-mode-input\" class=\"headerlink\" title=\"1. geometry and normal mode input\"></a>1. geometry and normal mode input</h3><p>In the working directory prepare two files: one is the optimized geometry in gaussian input format and the other is the normal mode calculation output file (gaussian frequency log file, usually calcuated with b3lyp method):</p>\n<p><code>opt.gjf  freq.log</code></p>\n<h3 id=\"2-load-newton-x-environment\"><a href=\"#2-load-newton-x-environment\" class=\"headerlink\" title=\"2. load newton-x environment\"></a>2. load newton-x environment</h3><p>To work in the newton-x environment on Hyak, run <code>module load contrib/newtonX</code> or <code>module load contrib/newton-x</code>. Their difference is that newton-x contains other package like gaussin09. </p>\n<p>We can check if we load successfully by command <code>$NX</code>, which should produce an info <code>-bash: /sw/contrib/newtonX/NX-2-B17/bin: Is a directory</code>. Or run <code>module list</code> to see all packages availabe to use.</p>\n<h3 id=\"3-convert-optimized-geometry-into-newton-x-format\"><a href=\"#3-convert-optimized-geometry-into-newton-x-format\" class=\"headerlink\" title=\"3. convert optimized geometry into newton-x format\"></a>3. convert optimized geometry into newton-x format</h3><p>Convert optimized geometry (opt.gjf) into xyz format first, could be achieved by script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gjfcom2xyz.py\" target=\"_blank\" rel=\"noopener\">gjfcom2xyz.py</a>: <code>python gjfcom2xyz.py opt.gjf</code>. opt.xyz could be produced.</p>\n<p><code>$NX/xyz2nx &lt; opt.xyz</code> generates newton-x geometry file named <em>geom</em>, whose second column is the atomic number, the following three columns are x, y and z coordinates in atomic units (<em>Bohr</em>) and the last one contains the atomic masses.</p>\n<h3 id=\"4-newton-x-working-directory\"><a href=\"#4-newton-x-working-directory\" class=\"headerlink\" title=\"4. newton-x working directory\"></a>4. newton-x working directory</h3><p>Creat a new directory <em>TDDFT_SPEC</em> in the working directory, copy/move <em>geom</em> to it, copy/move <em>freq.log</em> to it with a new name <em>freq.out</em>: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir TDDFT_SPEC</span><br><span class=\"line\">mv geom TDDFT_SPEC</span><br><span class=\"line\">cp freq.log TDDFT_SPEC/freq.out</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-energy-and-transition-moment-input\"><a href=\"#5-energy-and-transition-moment-input\" class=\"headerlink\" title=\"5. energy and transition moment input\"></a>5. energy and transition moment input</h3><p>Move to the directory <em>TDDFT_SPEC</em> and create a new subdirectory called <em>JOB_AD</em>. Move into <em>JOB_AD</em> and prepare two files named, <em>basis</em> and <em>gaussian$.$com</em>.<br><em>basis</em> contains the basis set information, like <code>6-31+g(d,p)</code>. <em>gaussian$.$com</em> is same with the very first optimized geometry file <em>opt.gjf</em> but with different link command lines and route card, like (%rwf and %nosave could be deleted):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=100gb</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%rwf=gaussian</span><br><span class=\"line\">%nosave</span><br><span class=\"line\">%chk=gaussian</span><br><span class=\"line\"># TD(NStates=10) m062xd/6-31+g(d,p)  pop=none scf=(xqc,tight) Symmetry=None</span><br></pre></td></tr></table></figure>\n<p>Note that the subdirectory must be named with <em>JOB_AD</em> and the name of these two files must be <em>basis</em> and <em>gaussian$.$com</em> since Newton-X will search for them.</p>\n<h3 id=\"6-newton-x-input\"><a href=\"#6-newton-x-input\" class=\"headerlink\" title=\"6. newton-x input\"></a>6. newton-x input</h3><p>Back to the directory <em>TDDFT_SPEC</em>, use command <code>$NX/nxinp</code> and answer several quesitons by instructions to genetrate the newton-x input file <em>initqp_input</em>. Answers to the questions are <code>1 (Generate initial condition); 2 (Winger); numer of atoms; 300 (number of initial conditions); geom; 4 (gaussian output); freq.out; 0.975 (modified frequency); 310 (temperature); n; 1 (check energy); 1 (ground state); number of states; 1 ; 100 (de, width of restriction); 6.5; 0 (seed value); 1; 7 (exit)</code>, respectively. Here, the large “de” implies that this restriction will not be used. It can be imposed later on.</p>\n<h3 id=\"7-splitting-jobs\"><a href=\"#7-splitting-jobs\" class=\"headerlink\" title=\"7. splitting jobs\"></a>7. splitting jobs</h3><p>This step is to split the job among several computers (nodes), could be skipped and go directly to run the newton-x by <code>$NX/initcond.pl &gt; initcond.log</code>.</p>\n<p> To split the job, run <code>NX/split_initcond.pl</code> in the directory <em>TDDFT_SPEC</em>. Two questions will be asked, the first one is the number of directories to split the job and the second one is if the job run in a batch system. The answer to the second question is “n”. This program produces one file named <em>split_initcond.log</em> and a directory called <em>INITIAL_CONDITIONS</em>. If the answer to the first quesiton is 10, 10 subdirectories called <em>I1,I2,…,I10</em> are inside <em>INITIAL_CONDITIONS</em>, each one containing a complete set of input files but with 30 (300 $\\div$ 10) initial conditions and iseed=-1 not 0.</p>\n<h3 id=\"8-submit-newton-x-job\"><a href=\"#8-submit-newton-x-job\" class=\"headerlink\" title=\"8. submit newton-x job\"></a>8. submit newton-x job</h3><p>In every directory containing a complete set of input files  (geom, freq.out, initqp_input and JOB_AD), create a sbatch file to submit the job to Hyak node.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --ntasks-per-node=28</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=??:00:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???G</span></span><br><span class=\"line\"><span class=\"comment\">#SABTCH --workdir=???????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'This job will run on'</span> <span class=\"variable\">$SLURM_JOB_NODELIST</span></span><br><span class=\"line\"><span class=\"comment\">#set up time</span></span><br><span class=\"line\">begin=$(date +%s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load newtonx and gauss09 environment</span></span><br><span class=\"line\">module load contrib/newton-x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable\">$NX</span>/initcond.pl &gt; initcond.log</span><br><span class=\"line\"></span><br><span class=\"line\">end=$(date +%s)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Elapsed Time: '</span>$((<span class=\"variable\">$end</span>-<span class=\"variable\">$begin</span>))<span class=\"string\">'s'</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Scripts\"><a href=\"#Scripts\" class=\"headerlink\" title=\"Scripts\"></a><jump id=\"pscript\">Scripts</jump></h2><p>  python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/newtonx.py\" target=\"_blank\" rel=\"noopener\">newtonx.py</a> can do exactly what step 2 to step 8 do.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python newtonx.py geometry-gif-file freq-log</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li><em>TDDFT_SPEC</em> folder is created, which contains <em>geom</em>, <em>freq.log</em>, <em>initqp_input</em>, <em>split_initcond.log</em>, <em>newtonx$.$sh</em>, <em>JOB_AD</em>, <em>INITIAL_CONDITIONS</em></li>\n<li><em>I1 I2 …</em> in <em>INITIAL_CONDITIONS</em>, each subfolder containing a complete set input – <em>geom</em>, <em>freq.out</em>, <em>initqp_input</em> (iseed=1234,2468,…), <em>JOB_AD</em> and a sbatch file – <em>nx_submit.sh</em></li>\n<li><em>nx_submit.sh</em> is the sbatch file same with what is listed in step 8, but with partition=ckpt, account=stf-ckpt.</li>\n<li><em>newtonx$.$sh</em> contains a list of bash command like: <code>cd absolute-path-of-I1; sbatch -p ckpt -A stf-ckpt --time=20:00:00 nx_submit.sh</code></li>\n<li>after satisfied with everything, run <code>bash newtonx.sh</code> to submit all jobs to hyak nodes; the final partition, account and time are decided by the setting in <em>newtonx$.$sh</em> even if <em>newtonx$.$sh</em> is different from <em>nx_submit.sh</em></li>\n</ul>\n</li>\n<li><em>Note</em><ul>\n<li>why ckpt?<ul>\n<li>increasing the number of splitting jobs speeds up the task greatly</li>\n<li><a href=\"https://wiki.cac.washington.edu/display/hyakusers/Mox_checkpoint\" target=\"_blank\" rel=\"noopener\">ckpt queue</a> is a good choice to run short jobs that finish within 4 hours</li>\n</ul>\n</li>\n<li>why iseed=1234,2468,…,1234*n?<ul>\n<li>different iseed values guarantee no repeated jobs</li>\n<li>iseed=-1 may generate a super large number not suit for ckpt queue</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Newton-X-Result\"><a href=\"#Newton-X-Result\" class=\"headerlink\" title=\"Newton-X Result\"></a>Newton-X Result</h1><h2 id=\"Procedures-1\"><a href=\"#Procedures-1\" class=\"headerlink\" title=\"Procedures\"></a>Procedures</h2><h3 id=\"merge-splitting-jobs\"><a href=\"#merge-splitting-jobs\" class=\"headerlink\" title=\"merge splitting jobs\"></a>merge splitting jobs</h3><p>After all sub-tasks finish, go to the directory <em>INITIAL_CONDITIONS</em> and run <code>$NX/merge_initcond.pl</code>. This program will ask the number of jobs to be merged and it will create a new directory called <em>I_merged</em> with merged results. All important data are in <em>final_optput.1.N</em> file, which contains transition information from state 1 to state <em>N</em>. </p>\n<h3 id=\"spectrum-simulation\"><a href=\"#spectrum-simulation\" class=\"headerlink\" title=\"spectrum simulation\"></a>spectrum simulation</h3><p>Move to this directory and proceed with the spectrum simulation by command <code>$NX/nxinp</code>. The answers to the questions it will ask are <code>5 (spectra); 1 (spectra); 1 (initial state); 2-N (array of final states); F (Absorption); 0 (no restriction); -1(read osc strength from file); local; 1 (random seed); lorentz; 0.1 (delta); 310 (temperature); 1 (refraction index); 0.005 (distance between consecutive points in the spectrum); 3 (kappa: the range of the spectrum is defined between Emin-kappa*delta and Emax+kappa*delta); 7 (exit)</code>, among which delta contronls the width of the curve.</p>\n<p>The simulated cross section using a Lorentzian line shape with phenomenological broadening $\\delta=0.1eV$ is written to <em>cross-section.dat</em>, containing four columns of data – DE/ev, lambda/nm, sigma/A^2 and +/-error/A^2.</p>\n<h2 id=\"Script\"><a href=\"#Script\" class=\"headerlink\" title=\"Script\"></a><jump id=\"pscript\">Script</jump></h2><p>All the above steps can be achieved by script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/nxplot.py\" target=\"_blank\" rel=\"noopener\">nxplot.py</a>. (This script is to be updated, especially for plot function)</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python nxplot.py</code></li>\n<li>run inside the directory <em>INITIAL_CONDITIONS</em></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>check if jobs completed</li>\n<li>merge splitting jobs</li>\n<li>spectrum simulation</li>\n<li>extract the lamda and sigma columns if lamda within 0-1200nm from <em>cross-section.dat</em> and written to <em>cross-section.tsv</em></li>\n<li>plot <em>cross-section.tsv</em> if in python3 environment</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Gaussian on Hyak","date":"2018-12-17T04:54:49.000Z","_content":"\n*Here introduces how to setup Gaussian input file, submit it to [Hyak](https://wiki.cac.washington.edu/display/hyakusers/WIKI+for+Hyak+users) (super computer server) and analyze the output file by my python scripts. Scripts attached here are not limited by python versions.*\n\n# Gaussian 16 Input\n\n[Gaussian 16 input](http://gaussian.com/input/) consists of a series of lines in an ASCII text file. In general, the input is free-format and case-insensitive; comments start with an exclamation point(!), could be anywhere on a line; spaces, commas, tabs and forward slashes are all considered as valid delimiters (multi spaces are treated as a single demiliter); keyword=option,kw(op),kw=(op1,op2,...) and kw(op1,op2) are all correct. The common suffixes of the input file are gjf and com. The basic structure includes several different sections:\n\n## <font size=3>[Link 0 Commands](http://gaussian.com/link0/)</font>\n- locate and name scratch files \n- not blank line terminated\n- examples\n  - %LindaWorker\n    - add it when using 2 or more nodes on Hyak\n  - %NProcShared=*N*\n    - use up to N processors/cores on shared memory on one node\n    - default: 28 on Hyak-mox, 16 on Hyak-ikt\n  - %UseSSH\n    - start linda workers by ssh instead of rsh(default)\n    - rsh, remote shell, can execute command on another computer as another user\n    - ssh: a more secure way to communicate between computers\n    - some parallel jobs may mess up by using rsh\n  - %Mem=*N*\n    - set the dynamics of memory, can follow by MB,GB,etc. 800mb for g16 by default\n    - some gaussian jobs will select the appropriate algorithm automatically based on the setting of %Mem and [MaxDisk](#maxdisk).\n    - specifing more mem than availble will cause very poor performance; leave several GBs for operating system\n  - %RWF=*file*\n    - locate and name the  read-write file, a super huge file, used to [restart](http://gaussian.com/restart/) a job(not need for opt)\n    - usually followed by *`%NoSave`*, everything before nosave will deleted if job completes normally\n    - a suggested location  on Hyak is [`/gscratch/scrubbed/` ](https://wiki.cac.washington.edu/display/hyakusers/Hyak_disk_quota)\n    - how to locate it if not include %RWF(Hyak version):\n      - all scratch files are at [`/scr/`](https://wiki.cac.washington.edu/display/hyakusers/Managing+your+Files#ManagingyourFiles-HomeDirectories) of the local node ( `ssh nodenumber` to enter that node)\n      - the scratch disk of that node will be cleaned up after walltime runs out \n      - general version and more about restarting opt and freq jobs: [*click  me*](http://gaussian.com/faq2/)\n    - Related key word: [MaxDisk](#maxdisk)\n  - %Chk=*file*\n    - locate and name the checkpoint file\n    - used to restart jobs(especially [opt](#rstopt)), [add more states for td](#addtd) and [visualize molecular orbitals for td](#vistd)\n  - %OldChk=*file*\n    - use with *`%Chk=newfile`*: copy *file* to *newfile* and then write new chk info to *newfile*\n\n## <font size=3>[Route section (# lines)](http://gaussian.com/route/)</font>\n- job type and method\n- blank line terminated\n- examples\n  - print form\n    - *`#N`*: normal print, by default if not specify\n    - *`#P`*: print more info\n    - *`#T`*: terse print \n  - job type\n    - *[SP](http://gaussian.com/sp/)* : single point energy, by default if not specify\n    - *[OPT](http://gaussian.com/opt/)* : geometry optimization\n    - *[FREQ](http://gaussian.com/freq/)* : vibrational frequency and thermal information\n    - *[TD(NStates=n)](http://gaussian.com/td/)* : calculate n excited transitions\n  - other keywords\n    - [POP](http://gaussian.com/population/)\n      - charge and spin distribution\n      - `pop=min` by default except guess=only\n    - [SCF](http://gaussian.com/scf/)\n      - control the functioning of the SCF procedure\n      - `scf=tight` by default\n      - `scf=xqc` is helpful for difficult conversion case\n      - `NoSymm` or `Symmetry=None`: release orbital symmetry constraints\n    - [SCRF](http://gaussian.com/scrf/)\n      - in the presence of solvent, place solute in a cavity within the solvent reaction field.\n       - `scrf=pcm` by default\n       - ex: `scrf=(pcm,solvent=water)`\n  \n    - <font color=gray>[CacheSize](http://gaussian.com/cachesize/)\n      - the amount of cache per processor to use with various cache-blocking algorithms (in 8-byte words)\n      - ex: from `/proc/cpuinfo` find the cache available(35840kb) and a good value is its 50% ( $35840\\times1024\\div8\\times50\\%=2293760$): `cachesize=2293760`\n      - no need to add it for Hyak</font>\n    - [<jump id='maxdisk'>MaxDisk</jump>](http://gaussian.com/maxdisk/)\n      - the amount of disk storage available for [scratch data](https://gaussian.com/running/?tabid=6) \n      - disk space of one node on Hyak is ~100GB. `lsblk -d` or `df -h` can show physical disk info of linux system\n      - the more disk space available, the faster the evaluation, especially for MP2. Some jobs have fixed or minimum disk requirments, click [me](http://gaussian.com/maxdisk/) for more info.\n\n## <font size=3>Title section</font>\n- any descriptions within 5 lines\n- avoid special character: @  #  !  –  _  \\  control characters (especially Ctrl-G)\n- blank line terminated\n\n## <font size=3>[Molecule specification](http://gaussian.com/molspec/)</font>\n- charge, multiplicity, atoms and coordinates\n  - multiplicity\n    - number of possible spin orientations of the total spin\n    - mp=2S+1, S($\\alpha$ electron)=0.5, S($\\beta$ electron)=-0.5\n  - coordinates\n    - x, y and z coordinates in angstrom\n- blank line terminated\n\n## <font size=3>Optinal additional sections</font>\n- additional input\n- blank line terminated\n\n*Example:*\n\n```\n%mem=32GB\n%nprocshared=28\n%chk=guanosine.chk\n# opt um062x/6-31+g(d,p) pop=min scf=(xqc,tight)\n\nComplex guanosine\n\n1 2\nO       -3.094427        1.959361        0.291777\nC       -4.011153        1.021154       -0.267210\nC       -3.292860       -0.293751       -0.453718\nO       -2.175288       -0.104229       -1.347075\n...           ...             ...             ...\nH       -1.180628        1.929546       -0.412585\nH       -3.574938        2.742899        0.582770\nH        1.100354        3.004366        0.220564\n! a blank line must be here\n```\n\n# Submit to Hyak\n\n1. Run ` ~/Hyak-Gaussian/gaussian-sub.py input_file`, will generate a sbatch file(suffix is sh)\n   \n   Another way to create this file is to run my python script [gaussian-mox.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gaussian-mox.py) \n   - Usage:\n     - `python gaussian-mox.py input-file partition node-num time-hour`\n     - partition can be [stf chem ilahie ckpt]\n     - time is a float in hour\n     - if node-num > 1, \"%lindaworker\" must be in the head of input file\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=???\n#SBATCH --nodes=1\n\n##needed if ckpt partition or  any partitions with 2 or more nodes\n#SBATCH --ntasks-per-node=??\n\n#SBATCH --time=???:00:00\n\n##larger than %mem in input file\n#SBATCH --mem=???\n\n#SBATCH --workdir=??????\n#SBATCH --partition=???\n#SBATCH --account=???\n\n##turn on email notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=???your email???\n\n# load Gaussian environment\nmodule load contrib/g16.b01\n\n# debugging information\necho \"**** Job Debugging Information ****\"\necho \"This job will run on $SLURM_JOB_NODELIST\"\necho \"\"\necho \"ENVIRONMENT VARIABLES\"\nset\necho \"**********************************************\" \n\n# run Gaussian\ng16 ???input file???\n\nexit 0\n```\n\n1. Run `sbatch *.sh` to submit it to hyak.\n\n# Output & Analysis\n\n## <font size=4>I. [OPT](http://gaussian.com/opt/)</font>\n\nIf key word `Tight` or `SCF` is in route card, Berny optimization will be used. This kind of output is dilimited by *GradGradGrad...*. The appearance of the following words marks completion of opt, and the final structure is displayed after that. We always want to extract the optimized standard structure for the next step calculation.\n\n  ```\n             Item               Value     Threshold  Converged?\n Maximum Force            0.000020     0.000450     YES\n RMS     Force            0.000004     0.000300     YES\n Maximum Displacement     0.001510     0.001800     YES\n RMS     Displacement     0.000199     0.001200     YES\n Optimization completed.\n    -- Stationary point found\n  ```\n\n<jump id='rstopt'></jump>If `Stationary point found` is absent in log file, that means the opt job is ended earlier, maybe because of time limit. In this case, we need to write another restarted input file and submit it again to start from where it left, the route card of which should be `# opt=restart` plus the other keywords in the original input. For example: if the original route card is:`# opt ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)` and the chk file is named as *test.chk*. The new input file is like: \n\n```\n%UseSSH\n%mem=32GB\n%nprocshared=28\n%chk=test.chk\n# Opt=Restart ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)\n! a blank line must be here\n```\n\n### <font size=3>1. [optlog2gjfcom.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/optlog2gjfcom.py)</font>\n\n- *Usage*\n  - `python optlog2gjfcom.py opt_log`\n- *Descriptions*\n  - Uses `Stationary point found` as a key to tell if opt finishes\n  - If finished, locates `Standard orientation` after it, reads charge and multiplicity from the very end and then writes them to a new file in the form of gaussian input, named *test_opt.gjf* if original one is *test$.$com*.\n  - If not  finished, writes the restarted input file just as showed above named with *test_rst.gjf* if original one is *test.gjf*. The name of input and chk files, the route card are read from log file. If chk file not found, it will print a warning.\n- *Notes* \n  - The default route card for optimized file and link info for both optimized and restarted one are easily to change:\n  \n    ```\n    LINK='%UseSSH\\n%mem=32GB\\n%nprocshared=28\\n'\n    ROUTE='# td(NStates=25) um062x/6-31+g(d,p) pop=min scf=(xqc,tight)'\n    ```\n\n  - A quick way to walk through all log files in one directory:\n     ```bash\n    for x in *log; do python optlog2gjfcom.py $x; done\n     ```\n\n### <font size=3>2.<jump id='hfenergies'></jump>[HFenergies.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/HFenergies.py)</font>\n\nAnother important information in the output is optimized energy, which is easy to locate by key word *SCF Done*.\n\n- *Usage*\n  - `python HFenergies.py`\n- *Descriptions*\n  - Goes through all **.log* files in the current directory to extract energy\n  - If `Stationary point found` is in the presence of log file, reads the energy after the last `SCF Done`; if not, returns energy=*NA*\n  - Energies are sorted ascendingly and written to *HFenergies.csv* file with corresponding logfile name(without suffix)\n\n## <font size=4>II. [FREQ](http://gaussian.com/freq/)</font>\n\n*3N-6* frequecies can be found in the output file for nonlinear molecules (*3N-5* for linear molecules, *N* is the number of atoms), following by thermochemistry analysis at 298.15K, 1 atm.\nSince the temperature in the Mass Spec is around 310K, we need to extrat all normal modes(frequencies), zero-point vibrational energy(ZPVE) and entropy(S) from the log file and calculate entropy and enthalpy(H) at 310K 1 atm. Also, we correct frequencies by a factor of 0.975.\n\n*Note that the input of freq job should be the optimized structure optimized with the same method and basis set.*\n\n### <font size=3>1.<jump id='freqt'></jump>[freq_thermal.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/freq_thermal.py)</font>\n\n- *Usage*\n  - `python freq_thermal.py freq_log`\n- *Descriptions*\n  - Extracts frequencies from log file. If the first frequency is negative or freq not finished, raises error and stops.\n  - Uses partition functions to calculate enthalpy, entropy and heat capacity and writes the result to file named with *test_freq.csv* if *test.log* is given.\n  - *<font color=gray>explanations of calculation(to be writted)</font>*\n\n### <font size=3>2.[CpExtractor.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/CpExtractor.py)</font>\n\nSometimes, we only want to know the heat capacity at constant pressure. This scripts can extract Cp from all *freq.csv files.\n\n- *Usage*\n  - `python CpExtractor.py`\n- *Descriptions*\n  - Goes through all **_freq.csv* files in the working directory and writes the Cp and its file name into a new file *Cp.csv*\n  - If Cp not found, *NA* will be there instead of a number\n  \n### <font size=3>3.[GibbsEnergy.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/GibbsEnergy.py)</font>\n\nAfter finish all opt and freq jobs, we can use energy file got from *HFenergies$.$py* and *ZPVE*, *H* and *S* from *freq_thermal$.$py* to calculate their free energies.\n\n- *Usage*\n  - `python GibbsEnergy.py energyfile`\n- *Descriptions*\n  - Needs energy($E_{elec}$) file got from [HFenergies.py](#hfenergies) and corresponding *_freq.csv files got from [freq_thermal.py](#freqt) in the same directory. The delimiter of all these files must be comma(by default, don't change it)\n  - Reads structure's name(x) and energy from energy file. The frist row is considered as title, will be skipped. The structure with lowest energy is seen as reference.\n  - Uses x find its freq file: x_freq.csv and reads its 9th row(thermal information); only reads 8th row(title info) for one **_freq.csv*.\n  - $G=E_{elec}+ZPVE_{corr}+H(T)-T\\cdot S(T)$ and $\\Delta G=G-G_{ref}$ are used, the result in $kJ/mol$\n\n## <font size=4>III. [TDDFT](http://gaussian.com/td/)</font>\n\nThe main output of tddft contains the excitation energies, oscillation strength(f, the intensity of that transition) and S\\*\\*2, listed below. A resonable transition should satisfy spin forbidden. For a doublet(multiplicity:2S+1=2) S=0.5, so S\\*\\*2=S(S+1)=0.75. What should be consider is that if not following that rule, the electron flips during the transiton, the total spin momentum S changes from 0.5 to 1.5, and S\\*\\*2=3.75. When running tddft job, the transition is a combination of these two situations, usually the more differ from what S\\*\\*2 should be, the less f is. In our lab, we only keep transitions whose S\\*\\*2<2.6, and use lorentzian equation to calcualte its absorption spectra.\n\n```txt\n Excited State   1:  2.065-A      2.0123 eV  616.13 nm  f=0.0002  <S**2>=0.816\n     62B -> 70B       -0.10013\n     63B -> 70B       -0.16217\n     63B -> 72B       -0.10120\n     67B -> 70B        0.87674\n     68B -> 70B        0.37169\n```\n\n<jump id='addtd'></jump>In experiment, we measure the action spectra from 210nm to 700nm, so we hope the theoritical one can cover that region. If the last transition energy cannot reach 210nm, we should add more states to it. For example, if the original route card is `# TD(Nstates=30) um062x/6-31+g(d,p) pop=none scf=(xqc,tight)` and its chk file is *test.chk* the new input file should be:\n\n```\n%mem=32GB\n%nprocshared=28\n%oldchk=test.chk\n%chk=test_add.chk\n# TD(add=10) Geom=AllCheck um062x/6-31+g(d,p) pop=none scf=(xqc,tight)\n! a blank line must be here\n```\n\n### <font size=3>1.[tddft_lorentzian.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_lorentzian.py)</font>\n\n- *Usage*\n  - `python tddft_lorentzian.py td_log`\n  - `python tddft_lorentzian.py td_log N`\n- *Descriptions*\n  - Reads all excitated frequencies, oscilation strength and S**2 from log file and checks if the last one is below 210nm.\n  - If not, writes the new input file as shown above named with *test_add.gjf* if original input is *test.gjf*. The original input file and chk file must be in the same directory.\n  - Otherwise, uses S\\*\\*2=2.6 as a cut-off to choose excitations and applies lorentzian equation to calculate absorption spectra. The results are written to *test_uvvis.csv* if log named with *test.log*. **If N is specified in the usage command, only select excitations larger than N(nm).**\n\n### <font size=3>2.[tddft_plot.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_plot.py)\n\n- *Usage*\n  - `python tddft_plot.py uvvis.csv`\n  - uvvis.csv is the file got from tddft_lorentzian.py\n  - need import matplotlib, pandas, numpy, `module load anacond3_5.3` if not able to import these modules\n- *Descriptions*\n\n  ![tddft plot](https://raw.githubusercontent.com/yueliu96/blog_images/master/tddftplot_eg.jpg)\n\n### <jump id='vistd'></jump><font size=3>3.[cubegen.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/cubegen.py)</font>\n\nWe can also visualize the molecular orbital if we have tddft chk file. We should first use [`formchk`](http://gaussian.com/formchk/) command to generate fchk file, and then use [`cubegen`](http://gaussian.com/cubegen/) to get the cube file, which can be visualized by Gaussian-View. To use cubegen, we also need to decide the molecular orbital number. For $\\alpha$ orbital, like 68A, just set mo=68. But for $\\beta$ orbital,like 72B, we should find the total number of $\\alpha$ orbitals first: if one molecule has 70 $\\alpha$ electrons(NAE) and 356 virtual $\\alpha$ orbitals(NVA), set mo=498(70+356+72). \n\nIf we run cubegen on the login node, it will take around 1 minutes. Usually we are interested in several orbitals in one or more excited states. In this way, this script comes out. \n\n- *Usage*\n  - `python cubegen.py td_log num_excited_states`\n- *Descriptions*\n  - Finds the name of chk/fchk file from log file. After fchk found, skip to next step; if not, start to locate chk file and generate fchk from chk. If both of them not found, stop processing. \n  - Finds NAE, NVA and unique molecule orbitals in the specified excited state. And writes corresponding cubegen to a txt file.\n  - Loads parallel environment and cats tasklists( the txt file) to the sbatch file.\n  - Submits it to ckpt partition. It should be finished in several seconds\n- *Example*\n  \n   The transition of the first excited state is listed above. If its log is test.log, NAE+NVA=426. Run `python cubegen.py test.log 1`, we will get 2 files: t1_test.txt and t1_test.sh, and it will submit t1_test.sh to ckpt queue.\n  \n    *t1_test.txt*:\n\n    ```\n    cubegen 0 mo=488 test.fchk test_62B.cube 0 h\n    cubegen 0 mo=489 test.fchk test_63B.cube 0 h\n    cubegen 0 mo=493 test.fchk test_67B.cube 0 h\n    cubegen 0 mo=494 test.fchk test_68B.cube 0 h\n    cubegen 0 mo=496 test.fchk test_70B.cube 0 h\n    cubegen 0 mo=498 test.fchk test_72B.cube 0 h\n    ```\n\n    *t1_test.sh*:\n\n     ```bash\n    #!/bin/bash\n    #SBATCH --job-name=fchk_cube\n    #SBATCH --nodes=1\n    #SBATCH --ntasks-per-node=28\n    #SBATCH --time=10:00\n    #SBATCH --mem=100G\n    #SBATCH --workdir=/gscratch/stf/yueliu96/test\n    #SBATCH --partition=ckpt\n    #SBATCH --account=stf-ckpt\n\n    echo 'This job will run on' $SLURM_JOB_NODELIST\n    #set up time\n    start=$(date +%s)\n\n    #load Gaussian environment\n    module load contrib/g16.b01\n\n    #use checkpoint file to generte formatted one\n    formchk test.chk\n\n    #load parallel environment\n    module load parallel-20170722\n    cat t1_test_opt.txt | parallel -j 28\n\n    end=$(date +%s)\n    echo 'Elapsed Time: '$(($end-$start))'s'\n     ```\n    After finish, we can get 6 cube files. Transfer them from hyak to your local work directory. We need to use *GaussView* to see how the orbital looks like:\n    - open test.fchk with *GaussView*\n    - click `Result`$\\rightarrow$`Surfaces/Contours`$\\rightarrow$`Cube Actions`$\\rightarrow$`Load Cube`$\\rightarrow$choose one of  your cube files$\\rightarrow$highlight that cube$\\rightarrow$`Surfacec Actions`$\\rightarrow$`New Surface`\n","source":"_posts/Gaussian-on-Hyak.md","raw":"---\ntitle: Gaussian on Hyak\ndate: 2018-12-16 20:54:49\ntags: \n- Hyak\n- Software Tutorial\ncategories:\n- Turecek Lab Tutorial\n---\n\n*Here introduces how to setup Gaussian input file, submit it to [Hyak](https://wiki.cac.washington.edu/display/hyakusers/WIKI+for+Hyak+users) (super computer server) and analyze the output file by my python scripts. Scripts attached here are not limited by python versions.*\n\n# Gaussian 16 Input\n\n[Gaussian 16 input](http://gaussian.com/input/) consists of a series of lines in an ASCII text file. In general, the input is free-format and case-insensitive; comments start with an exclamation point(!), could be anywhere on a line; spaces, commas, tabs and forward slashes are all considered as valid delimiters (multi spaces are treated as a single demiliter); keyword=option,kw(op),kw=(op1,op2,...) and kw(op1,op2) are all correct. The common suffixes of the input file are gjf and com. The basic structure includes several different sections:\n\n## <font size=3>[Link 0 Commands](http://gaussian.com/link0/)</font>\n- locate and name scratch files \n- not blank line terminated\n- examples\n  - %LindaWorker\n    - add it when using 2 or more nodes on Hyak\n  - %NProcShared=*N*\n    - use up to N processors/cores on shared memory on one node\n    - default: 28 on Hyak-mox, 16 on Hyak-ikt\n  - %UseSSH\n    - start linda workers by ssh instead of rsh(default)\n    - rsh, remote shell, can execute command on another computer as another user\n    - ssh: a more secure way to communicate between computers\n    - some parallel jobs may mess up by using rsh\n  - %Mem=*N*\n    - set the dynamics of memory, can follow by MB,GB,etc. 800mb for g16 by default\n    - some gaussian jobs will select the appropriate algorithm automatically based on the setting of %Mem and [MaxDisk](#maxdisk).\n    - specifing more mem than availble will cause very poor performance; leave several GBs for operating system\n  - %RWF=*file*\n    - locate and name the  read-write file, a super huge file, used to [restart](http://gaussian.com/restart/) a job(not need for opt)\n    - usually followed by *`%NoSave`*, everything before nosave will deleted if job completes normally\n    - a suggested location  on Hyak is [`/gscratch/scrubbed/` ](https://wiki.cac.washington.edu/display/hyakusers/Hyak_disk_quota)\n    - how to locate it if not include %RWF(Hyak version):\n      - all scratch files are at [`/scr/`](https://wiki.cac.washington.edu/display/hyakusers/Managing+your+Files#ManagingyourFiles-HomeDirectories) of the local node ( `ssh nodenumber` to enter that node)\n      - the scratch disk of that node will be cleaned up after walltime runs out \n      - general version and more about restarting opt and freq jobs: [*click  me*](http://gaussian.com/faq2/)\n    - Related key word: [MaxDisk](#maxdisk)\n  - %Chk=*file*\n    - locate and name the checkpoint file\n    - used to restart jobs(especially [opt](#rstopt)), [add more states for td](#addtd) and [visualize molecular orbitals for td](#vistd)\n  - %OldChk=*file*\n    - use with *`%Chk=newfile`*: copy *file* to *newfile* and then write new chk info to *newfile*\n\n## <font size=3>[Route section (# lines)](http://gaussian.com/route/)</font>\n- job type and method\n- blank line terminated\n- examples\n  - print form\n    - *`#N`*: normal print, by default if not specify\n    - *`#P`*: print more info\n    - *`#T`*: terse print \n  - job type\n    - *[SP](http://gaussian.com/sp/)* : single point energy, by default if not specify\n    - *[OPT](http://gaussian.com/opt/)* : geometry optimization\n    - *[FREQ](http://gaussian.com/freq/)* : vibrational frequency and thermal information\n    - *[TD(NStates=n)](http://gaussian.com/td/)* : calculate n excited transitions\n  - other keywords\n    - [POP](http://gaussian.com/population/)\n      - charge and spin distribution\n      - `pop=min` by default except guess=only\n    - [SCF](http://gaussian.com/scf/)\n      - control the functioning of the SCF procedure\n      - `scf=tight` by default\n      - `scf=xqc` is helpful for difficult conversion case\n      - `NoSymm` or `Symmetry=None`: release orbital symmetry constraints\n    - [SCRF](http://gaussian.com/scrf/)\n      - in the presence of solvent, place solute in a cavity within the solvent reaction field.\n       - `scrf=pcm` by default\n       - ex: `scrf=(pcm,solvent=water)`\n  \n    - <font color=gray>[CacheSize](http://gaussian.com/cachesize/)\n      - the amount of cache per processor to use with various cache-blocking algorithms (in 8-byte words)\n      - ex: from `/proc/cpuinfo` find the cache available(35840kb) and a good value is its 50% ( $35840\\times1024\\div8\\times50\\%=2293760$): `cachesize=2293760`\n      - no need to add it for Hyak</font>\n    - [<jump id='maxdisk'>MaxDisk</jump>](http://gaussian.com/maxdisk/)\n      - the amount of disk storage available for [scratch data](https://gaussian.com/running/?tabid=6) \n      - disk space of one node on Hyak is ~100GB. `lsblk -d` or `df -h` can show physical disk info of linux system\n      - the more disk space available, the faster the evaluation, especially for MP2. Some jobs have fixed or minimum disk requirments, click [me](http://gaussian.com/maxdisk/) for more info.\n\n## <font size=3>Title section</font>\n- any descriptions within 5 lines\n- avoid special character: @  #  !  –  _  \\  control characters (especially Ctrl-G)\n- blank line terminated\n\n## <font size=3>[Molecule specification](http://gaussian.com/molspec/)</font>\n- charge, multiplicity, atoms and coordinates\n  - multiplicity\n    - number of possible spin orientations of the total spin\n    - mp=2S+1, S($\\alpha$ electron)=0.5, S($\\beta$ electron)=-0.5\n  - coordinates\n    - x, y and z coordinates in angstrom\n- blank line terminated\n\n## <font size=3>Optinal additional sections</font>\n- additional input\n- blank line terminated\n\n*Example:*\n\n```\n%mem=32GB\n%nprocshared=28\n%chk=guanosine.chk\n# opt um062x/6-31+g(d,p) pop=min scf=(xqc,tight)\n\nComplex guanosine\n\n1 2\nO       -3.094427        1.959361        0.291777\nC       -4.011153        1.021154       -0.267210\nC       -3.292860       -0.293751       -0.453718\nO       -2.175288       -0.104229       -1.347075\n...           ...             ...             ...\nH       -1.180628        1.929546       -0.412585\nH       -3.574938        2.742899        0.582770\nH        1.100354        3.004366        0.220564\n! a blank line must be here\n```\n\n# Submit to Hyak\n\n1. Run ` ~/Hyak-Gaussian/gaussian-sub.py input_file`, will generate a sbatch file(suffix is sh)\n   \n   Another way to create this file is to run my python script [gaussian-mox.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gaussian-mox.py) \n   - Usage:\n     - `python gaussian-mox.py input-file partition node-num time-hour`\n     - partition can be [stf chem ilahie ckpt]\n     - time is a float in hour\n     - if node-num > 1, \"%lindaworker\" must be in the head of input file\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=???\n#SBATCH --nodes=1\n\n##needed if ckpt partition or  any partitions with 2 or more nodes\n#SBATCH --ntasks-per-node=??\n\n#SBATCH --time=???:00:00\n\n##larger than %mem in input file\n#SBATCH --mem=???\n\n#SBATCH --workdir=??????\n#SBATCH --partition=???\n#SBATCH --account=???\n\n##turn on email notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=???your email???\n\n# load Gaussian environment\nmodule load contrib/g16.b01\n\n# debugging information\necho \"**** Job Debugging Information ****\"\necho \"This job will run on $SLURM_JOB_NODELIST\"\necho \"\"\necho \"ENVIRONMENT VARIABLES\"\nset\necho \"**********************************************\" \n\n# run Gaussian\ng16 ???input file???\n\nexit 0\n```\n\n1. Run `sbatch *.sh` to submit it to hyak.\n\n# Output & Analysis\n\n## <font size=4>I. [OPT](http://gaussian.com/opt/)</font>\n\nIf key word `Tight` or `SCF` is in route card, Berny optimization will be used. This kind of output is dilimited by *GradGradGrad...*. The appearance of the following words marks completion of opt, and the final structure is displayed after that. We always want to extract the optimized standard structure for the next step calculation.\n\n  ```\n             Item               Value     Threshold  Converged?\n Maximum Force            0.000020     0.000450     YES\n RMS     Force            0.000004     0.000300     YES\n Maximum Displacement     0.001510     0.001800     YES\n RMS     Displacement     0.000199     0.001200     YES\n Optimization completed.\n    -- Stationary point found\n  ```\n\n<jump id='rstopt'></jump>If `Stationary point found` is absent in log file, that means the opt job is ended earlier, maybe because of time limit. In this case, we need to write another restarted input file and submit it again to start from where it left, the route card of which should be `# opt=restart` plus the other keywords in the original input. For example: if the original route card is:`# opt ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)` and the chk file is named as *test.chk*. The new input file is like: \n\n```\n%UseSSH\n%mem=32GB\n%nprocshared=28\n%chk=test.chk\n# Opt=Restart ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)\n! a blank line must be here\n```\n\n### <font size=3>1. [optlog2gjfcom.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/optlog2gjfcom.py)</font>\n\n- *Usage*\n  - `python optlog2gjfcom.py opt_log`\n- *Descriptions*\n  - Uses `Stationary point found` as a key to tell if opt finishes\n  - If finished, locates `Standard orientation` after it, reads charge and multiplicity from the very end and then writes them to a new file in the form of gaussian input, named *test_opt.gjf* if original one is *test$.$com*.\n  - If not  finished, writes the restarted input file just as showed above named with *test_rst.gjf* if original one is *test.gjf*. The name of input and chk files, the route card are read from log file. If chk file not found, it will print a warning.\n- *Notes* \n  - The default route card for optimized file and link info for both optimized and restarted one are easily to change:\n  \n    ```\n    LINK='%UseSSH\\n%mem=32GB\\n%nprocshared=28\\n'\n    ROUTE='# td(NStates=25) um062x/6-31+g(d,p) pop=min scf=(xqc,tight)'\n    ```\n\n  - A quick way to walk through all log files in one directory:\n     ```bash\n    for x in *log; do python optlog2gjfcom.py $x; done\n     ```\n\n### <font size=3>2.<jump id='hfenergies'></jump>[HFenergies.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/HFenergies.py)</font>\n\nAnother important information in the output is optimized energy, which is easy to locate by key word *SCF Done*.\n\n- *Usage*\n  - `python HFenergies.py`\n- *Descriptions*\n  - Goes through all **.log* files in the current directory to extract energy\n  - If `Stationary point found` is in the presence of log file, reads the energy after the last `SCF Done`; if not, returns energy=*NA*\n  - Energies are sorted ascendingly and written to *HFenergies.csv* file with corresponding logfile name(without suffix)\n\n## <font size=4>II. [FREQ](http://gaussian.com/freq/)</font>\n\n*3N-6* frequecies can be found in the output file for nonlinear molecules (*3N-5* for linear molecules, *N* is the number of atoms), following by thermochemistry analysis at 298.15K, 1 atm.\nSince the temperature in the Mass Spec is around 310K, we need to extrat all normal modes(frequencies), zero-point vibrational energy(ZPVE) and entropy(S) from the log file and calculate entropy and enthalpy(H) at 310K 1 atm. Also, we correct frequencies by a factor of 0.975.\n\n*Note that the input of freq job should be the optimized structure optimized with the same method and basis set.*\n\n### <font size=3>1.<jump id='freqt'></jump>[freq_thermal.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/freq_thermal.py)</font>\n\n- *Usage*\n  - `python freq_thermal.py freq_log`\n- *Descriptions*\n  - Extracts frequencies from log file. If the first frequency is negative or freq not finished, raises error and stops.\n  - Uses partition functions to calculate enthalpy, entropy and heat capacity and writes the result to file named with *test_freq.csv* if *test.log* is given.\n  - *<font color=gray>explanations of calculation(to be writted)</font>*\n\n### <font size=3>2.[CpExtractor.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/CpExtractor.py)</font>\n\nSometimes, we only want to know the heat capacity at constant pressure. This scripts can extract Cp from all *freq.csv files.\n\n- *Usage*\n  - `python CpExtractor.py`\n- *Descriptions*\n  - Goes through all **_freq.csv* files in the working directory and writes the Cp and its file name into a new file *Cp.csv*\n  - If Cp not found, *NA* will be there instead of a number\n  \n### <font size=3>3.[GibbsEnergy.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/GibbsEnergy.py)</font>\n\nAfter finish all opt and freq jobs, we can use energy file got from *HFenergies$.$py* and *ZPVE*, *H* and *S* from *freq_thermal$.$py* to calculate their free energies.\n\n- *Usage*\n  - `python GibbsEnergy.py energyfile`\n- *Descriptions*\n  - Needs energy($E_{elec}$) file got from [HFenergies.py](#hfenergies) and corresponding *_freq.csv files got from [freq_thermal.py](#freqt) in the same directory. The delimiter of all these files must be comma(by default, don't change it)\n  - Reads structure's name(x) and energy from energy file. The frist row is considered as title, will be skipped. The structure with lowest energy is seen as reference.\n  - Uses x find its freq file: x_freq.csv and reads its 9th row(thermal information); only reads 8th row(title info) for one **_freq.csv*.\n  - $G=E_{elec}+ZPVE_{corr}+H(T)-T\\cdot S(T)$ and $\\Delta G=G-G_{ref}$ are used, the result in $kJ/mol$\n\n## <font size=4>III. [TDDFT](http://gaussian.com/td/)</font>\n\nThe main output of tddft contains the excitation energies, oscillation strength(f, the intensity of that transition) and S\\*\\*2, listed below. A resonable transition should satisfy spin forbidden. For a doublet(multiplicity:2S+1=2) S=0.5, so S\\*\\*2=S(S+1)=0.75. What should be consider is that if not following that rule, the electron flips during the transiton, the total spin momentum S changes from 0.5 to 1.5, and S\\*\\*2=3.75. When running tddft job, the transition is a combination of these two situations, usually the more differ from what S\\*\\*2 should be, the less f is. In our lab, we only keep transitions whose S\\*\\*2<2.6, and use lorentzian equation to calcualte its absorption spectra.\n\n```txt\n Excited State   1:  2.065-A      2.0123 eV  616.13 nm  f=0.0002  <S**2>=0.816\n     62B -> 70B       -0.10013\n     63B -> 70B       -0.16217\n     63B -> 72B       -0.10120\n     67B -> 70B        0.87674\n     68B -> 70B        0.37169\n```\n\n<jump id='addtd'></jump>In experiment, we measure the action spectra from 210nm to 700nm, so we hope the theoritical one can cover that region. If the last transition energy cannot reach 210nm, we should add more states to it. For example, if the original route card is `# TD(Nstates=30) um062x/6-31+g(d,p) pop=none scf=(xqc,tight)` and its chk file is *test.chk* the new input file should be:\n\n```\n%mem=32GB\n%nprocshared=28\n%oldchk=test.chk\n%chk=test_add.chk\n# TD(add=10) Geom=AllCheck um062x/6-31+g(d,p) pop=none scf=(xqc,tight)\n! a blank line must be here\n```\n\n### <font size=3>1.[tddft_lorentzian.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_lorentzian.py)</font>\n\n- *Usage*\n  - `python tddft_lorentzian.py td_log`\n  - `python tddft_lorentzian.py td_log N`\n- *Descriptions*\n  - Reads all excitated frequencies, oscilation strength and S**2 from log file and checks if the last one is below 210nm.\n  - If not, writes the new input file as shown above named with *test_add.gjf* if original input is *test.gjf*. The original input file and chk file must be in the same directory.\n  - Otherwise, uses S\\*\\*2=2.6 as a cut-off to choose excitations and applies lorentzian equation to calculate absorption spectra. The results are written to *test_uvvis.csv* if log named with *test.log*. **If N is specified in the usage command, only select excitations larger than N(nm).**\n\n### <font size=3>2.[tddft_plot.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_plot.py)\n\n- *Usage*\n  - `python tddft_plot.py uvvis.csv`\n  - uvvis.csv is the file got from tddft_lorentzian.py\n  - need import matplotlib, pandas, numpy, `module load anacond3_5.3` if not able to import these modules\n- *Descriptions*\n\n  ![tddft plot](https://raw.githubusercontent.com/yueliu96/blog_images/master/tddftplot_eg.jpg)\n\n### <jump id='vistd'></jump><font size=3>3.[cubegen.py](https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/cubegen.py)</font>\n\nWe can also visualize the molecular orbital if we have tddft chk file. We should first use [`formchk`](http://gaussian.com/formchk/) command to generate fchk file, and then use [`cubegen`](http://gaussian.com/cubegen/) to get the cube file, which can be visualized by Gaussian-View. To use cubegen, we also need to decide the molecular orbital number. For $\\alpha$ orbital, like 68A, just set mo=68. But for $\\beta$ orbital,like 72B, we should find the total number of $\\alpha$ orbitals first: if one molecule has 70 $\\alpha$ electrons(NAE) and 356 virtual $\\alpha$ orbitals(NVA), set mo=498(70+356+72). \n\nIf we run cubegen on the login node, it will take around 1 minutes. Usually we are interested in several orbitals in one or more excited states. In this way, this script comes out. \n\n- *Usage*\n  - `python cubegen.py td_log num_excited_states`\n- *Descriptions*\n  - Finds the name of chk/fchk file from log file. After fchk found, skip to next step; if not, start to locate chk file and generate fchk from chk. If both of them not found, stop processing. \n  - Finds NAE, NVA and unique molecule orbitals in the specified excited state. And writes corresponding cubegen to a txt file.\n  - Loads parallel environment and cats tasklists( the txt file) to the sbatch file.\n  - Submits it to ckpt partition. It should be finished in several seconds\n- *Example*\n  \n   The transition of the first excited state is listed above. If its log is test.log, NAE+NVA=426. Run `python cubegen.py test.log 1`, we will get 2 files: t1_test.txt and t1_test.sh, and it will submit t1_test.sh to ckpt queue.\n  \n    *t1_test.txt*:\n\n    ```\n    cubegen 0 mo=488 test.fchk test_62B.cube 0 h\n    cubegen 0 mo=489 test.fchk test_63B.cube 0 h\n    cubegen 0 mo=493 test.fchk test_67B.cube 0 h\n    cubegen 0 mo=494 test.fchk test_68B.cube 0 h\n    cubegen 0 mo=496 test.fchk test_70B.cube 0 h\n    cubegen 0 mo=498 test.fchk test_72B.cube 0 h\n    ```\n\n    *t1_test.sh*:\n\n     ```bash\n    #!/bin/bash\n    #SBATCH --job-name=fchk_cube\n    #SBATCH --nodes=1\n    #SBATCH --ntasks-per-node=28\n    #SBATCH --time=10:00\n    #SBATCH --mem=100G\n    #SBATCH --workdir=/gscratch/stf/yueliu96/test\n    #SBATCH --partition=ckpt\n    #SBATCH --account=stf-ckpt\n\n    echo 'This job will run on' $SLURM_JOB_NODELIST\n    #set up time\n    start=$(date +%s)\n\n    #load Gaussian environment\n    module load contrib/g16.b01\n\n    #use checkpoint file to generte formatted one\n    formchk test.chk\n\n    #load parallel environment\n    module load parallel-20170722\n    cat t1_test_opt.txt | parallel -j 28\n\n    end=$(date +%s)\n    echo 'Elapsed Time: '$(($end-$start))'s'\n     ```\n    After finish, we can get 6 cube files. Transfer them from hyak to your local work directory. We need to use *GaussView* to see how the orbital looks like:\n    - open test.fchk with *GaussView*\n    - click `Result`$\\rightarrow$`Surfaces/Contours`$\\rightarrow$`Cube Actions`$\\rightarrow$`Load Cube`$\\rightarrow$choose one of  your cube files$\\rightarrow$highlight that cube$\\rightarrow$`Surfacec Actions`$\\rightarrow$`New Surface`\n","slug":"Gaussian-on-Hyak","published":1,"updated":"2019-04-08T06:22:30.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2y0eb2s0014mhmofsdwp5mv","content":"<p><em>Here introduces how to setup Gaussian input file, submit it to <a href=\"https://wiki.cac.washington.edu/display/hyakusers/WIKI+for+Hyak+users\" target=\"_blank\" rel=\"noopener\">Hyak</a> (super computer server) and analyze the output file by my python scripts. Scripts attached here are not limited by python versions.</em></p>\n<h1 id=\"Gaussian-16-Input\"><a href=\"#Gaussian-16-Input\" class=\"headerlink\" title=\"Gaussian 16 Input\"></a>Gaussian 16 Input</h1><p><a href=\"http://gaussian.com/input/\" target=\"_blank\" rel=\"noopener\">Gaussian 16 input</a> consists of a series of lines in an ASCII text file. In general, the input is free-format and case-insensitive; comments start with an exclamation point(!), could be anywhere on a line; spaces, commas, tabs and forward slashes are all considered as valid delimiters (multi spaces are treated as a single demiliter); keyword=option,kw(op),kw=(op1,op2,…) and kw(op1,op2) are all correct. The common suffixes of the input file are gjf and com. The basic structure includes several different sections:</p>\n<h2 id=\"Link-0-Commands\"><a href=\"#Link-0-Commands\" class=\"headerlink\" title=\"Link 0 Commands\"></a><font size=\"3\"><a href=\"http://gaussian.com/link0/\" target=\"_blank\" rel=\"noopener\">Link 0 Commands</a></font></h2><ul>\n<li>locate and name scratch files </li>\n<li>not blank line terminated</li>\n<li>examples<ul>\n<li>%LindaWorker<ul>\n<li>add it when using 2 or more nodes on Hyak</li>\n</ul>\n</li>\n<li>%NProcShared=<em>N</em><ul>\n<li>use up to N processors/cores on shared memory on one node</li>\n<li>default: 28 on Hyak-mox, 16 on Hyak-ikt</li>\n</ul>\n</li>\n<li>%UseSSH<ul>\n<li>start linda workers by ssh instead of rsh(default)</li>\n<li>rsh, remote shell, can execute command on another computer as another user</li>\n<li>ssh: a more secure way to communicate between computers</li>\n<li>some parallel jobs may mess up by using rsh</li>\n</ul>\n</li>\n<li>%Mem=<em>N</em><ul>\n<li>set the dynamics of memory, can follow by MB,GB,etc. 800mb for g16 by default</li>\n<li>some gaussian jobs will select the appropriate algorithm automatically based on the setting of %Mem and <a href=\"#maxdisk\">MaxDisk</a>.</li>\n<li>specifing more mem than availble will cause very poor performance; leave several GBs for operating system</li>\n</ul>\n</li>\n<li>%RWF=<em>file</em><ul>\n<li>locate and name the  read-write file, a super huge file, used to <a href=\"http://gaussian.com/restart/\" target=\"_blank\" rel=\"noopener\">restart</a> a job(not need for opt)</li>\n<li>usually followed by <em><code>%NoSave</code></em>, everything before nosave will deleted if job completes normally</li>\n<li>a suggested location  on Hyak is <a href=\"https://wiki.cac.washington.edu/display/hyakusers/Hyak_disk_quota\" target=\"_blank\" rel=\"noopener\"><code>/gscratch/scrubbed/</code> </a></li>\n<li>how to locate it if not include %RWF(Hyak version):<ul>\n<li>all scratch files are at <a href=\"https://wiki.cac.washington.edu/display/hyakusers/Managing+your+Files#ManagingyourFiles-HomeDirectories\" target=\"_blank\" rel=\"noopener\"><code>/scr/</code></a> of the local node ( <code>ssh nodenumber</code> to enter that node)</li>\n<li>the scratch disk of that node will be cleaned up after walltime runs out </li>\n<li>general version and more about restarting opt and freq jobs: <a href=\"http://gaussian.com/faq2/\" target=\"_blank\" rel=\"noopener\"><em>click  me</em></a></li>\n</ul>\n</li>\n<li>Related key word: <a href=\"#maxdisk\">MaxDisk</a></li>\n</ul>\n</li>\n<li>%Chk=<em>file</em><ul>\n<li>locate and name the checkpoint file</li>\n<li>used to restart jobs(especially <a href=\"#rstopt\">opt</a>), <a href=\"#addtd\">add more states for td</a> and <a href=\"#vistd\">visualize molecular orbitals for td</a></li>\n</ul>\n</li>\n<li>%OldChk=<em>file</em><ul>\n<li>use with <em><code>%Chk=newfile</code></em>: copy <em>file</em> to <em>newfile</em> and then write new chk info to <em>newfile</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Route-section-lines\"><a href=\"#Route-section-lines\" class=\"headerlink\" title=\"Route section (# lines)\"></a><font size=\"3\"><a href=\"http://gaussian.com/route/\" target=\"_blank\" rel=\"noopener\">Route section (# lines)</a></font></h2><ul>\n<li>job type and method</li>\n<li>blank line terminated</li>\n<li><p>examples</p>\n<ul>\n<li>print form<ul>\n<li><em><code>#N</code></em>: normal print, by default if not specify</li>\n<li><em><code>#P</code></em>: print more info</li>\n<li><em><code>#T</code></em>: terse print </li>\n</ul>\n</li>\n<li>job type<ul>\n<li><em><a href=\"http://gaussian.com/sp/\" target=\"_blank\" rel=\"noopener\">SP</a></em> : single point energy, by default if not specify</li>\n<li><em><a href=\"http://gaussian.com/opt/\" target=\"_blank\" rel=\"noopener\">OPT</a></em> : geometry optimization</li>\n<li><em><a href=\"http://gaussian.com/freq/\" target=\"_blank\" rel=\"noopener\">FREQ</a></em> : vibrational frequency and thermal information</li>\n<li><em><a href=\"http://gaussian.com/td/\" target=\"_blank\" rel=\"noopener\">TD(NStates=n)</a></em> : calculate n excited transitions</li>\n</ul>\n</li>\n<li><p>other keywords</p>\n<ul>\n<li><a href=\"http://gaussian.com/population/\" target=\"_blank\" rel=\"noopener\">POP</a><ul>\n<li>charge and spin distribution</li>\n<li><code>pop=min</code> by default except guess=only</li>\n</ul>\n</li>\n<li><a href=\"http://gaussian.com/scf/\" target=\"_blank\" rel=\"noopener\">SCF</a><ul>\n<li>control the functioning of the SCF procedure</li>\n<li><code>scf=tight</code> by default</li>\n<li><code>scf=xqc</code> is helpful for difficult conversion case</li>\n<li><code>NoSymm</code> or <code>Symmetry=None</code>: release orbital symmetry constraints</li>\n</ul>\n</li>\n<li><p><a href=\"http://gaussian.com/scrf/\" target=\"_blank\" rel=\"noopener\">SCRF</a></p>\n<ul>\n<li>in the presence of solvent, place solute in a cavity within the solvent reaction field.<ul>\n<li><code>scrf=pcm</code> by default</li>\n<li>ex: <code>scrf=(pcm,solvent=water)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><font color=\"gray\"><a href=\"http://gaussian.com/cachesize/\" target=\"_blank\" rel=\"noopener\">CacheSize</a><br>- the amount of cache per processor to use with various cache-blocking algorithms (in 8-byte words)<br>- ex: from <code>/proc/cpuinfo</code> find the cache available(35840kb) and a good value is its 50% ( $35840\\times1024\\div8\\times50\\%=2293760$): <code>cachesize=2293760</code><br>- no need to add it for Hyak</font></li>\n<li><a href=\"http://gaussian.com/maxdisk/\" target=\"_blank\" rel=\"noopener\"><jump id=\"maxdisk\">MaxDisk</jump></a><ul>\n<li>the amount of disk storage available for <a href=\"https://gaussian.com/running/?tabid=6\" target=\"_blank\" rel=\"noopener\">scratch data</a> </li>\n<li>disk space of one node on Hyak is ~100GB. <code>lsblk -d</code> or <code>df -h</code> can show physical disk info of linux system</li>\n<li>the more disk space available, the faster the evaluation, especially for MP2. Some jobs have fixed or minimum disk requirments, click <a href=\"http://gaussian.com/maxdisk/\" target=\"_blank\" rel=\"noopener\">me</a> for more info.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Title-section\"><a href=\"#Title-section\" class=\"headerlink\" title=\"Title section\"></a><font size=\"3\">Title section</font></h2><ul>\n<li>any descriptions within 5 lines</li>\n<li>avoid special character: @  #  !  –  _    control characters (especially Ctrl-G)</li>\n<li>blank line terminated</li>\n</ul>\n<h2 id=\"Molecule-specification\"><a href=\"#Molecule-specification\" class=\"headerlink\" title=\"Molecule specification\"></a><font size=\"3\"><a href=\"http://gaussian.com/molspec/\" target=\"_blank\" rel=\"noopener\">Molecule specification</a></font></h2><ul>\n<li>charge, multiplicity, atoms and coordinates<ul>\n<li>multiplicity<ul>\n<li>number of possible spin orientations of the total spin</li>\n<li>mp=2S+1, S($\\alpha$ electron)=0.5, S($\\beta$ electron)=-0.5</li>\n</ul>\n</li>\n<li>coordinates<ul>\n<li>x, y and z coordinates in angstrom</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>blank line terminated</li>\n</ul>\n<h2 id=\"Optinal-additional-sections\"><a href=\"#Optinal-additional-sections\" class=\"headerlink\" title=\"Optinal additional sections\"></a><font size=\"3\">Optinal additional sections</font></h2><ul>\n<li>additional input</li>\n<li>blank line terminated</li>\n</ul>\n<p><em>Example:</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=32GB</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%chk=guanosine.chk</span><br><span class=\"line\"># opt um062x/6-31+g(d,p) pop=min scf=(xqc,tight)</span><br><span class=\"line\"></span><br><span class=\"line\">Complex guanosine</span><br><span class=\"line\"></span><br><span class=\"line\">1 2</span><br><span class=\"line\">O       -3.094427        1.959361        0.291777</span><br><span class=\"line\">C       -4.011153        1.021154       -0.267210</span><br><span class=\"line\">C       -3.292860       -0.293751       -0.453718</span><br><span class=\"line\">O       -2.175288       -0.104229       -1.347075</span><br><span class=\"line\">...           ...             ...             ...</span><br><span class=\"line\">H       -1.180628        1.929546       -0.412585</span><br><span class=\"line\">H       -3.574938        2.742899        0.582770</span><br><span class=\"line\">H        1.100354        3.004366        0.220564</span><br><span class=\"line\">! a blank line must be here</span><br></pre></td></tr></table></figure>\n<h1 id=\"Submit-to-Hyak\"><a href=\"#Submit-to-Hyak\" class=\"headerlink\" title=\"Submit to Hyak\"></a>Submit to Hyak</h1><ol>\n<li><p>Run <code>~/Hyak-Gaussian/gaussian-sub.py input_file</code>, will generate a sbatch file(suffix is sh)</p>\n<p>Another way to create this file is to run my python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gaussian-mox.py\" target=\"_blank\" rel=\"noopener\">gaussian-mox.py</a> </p>\n<ul>\n<li>Usage:<ul>\n<li><code>python gaussian-mox.py input-file partition node-num time-hour</code></li>\n<li>partition can be [stf chem ilahie ckpt]</li>\n<li>time is a float in hour</li>\n<li>if node-num &gt; 1, “%lindaworker” must be in the head of input file</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##needed if ckpt partition or  any partitions with 2 or more nodes</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --ntasks-per-node=??</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=???:00:00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##larger than %mem in input file</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=??????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##turn on email notification</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mail-type=ALL</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mail-user=???your email???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load Gaussian environment</span></span><br><span class=\"line\">module load contrib/g16.b01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># debugging information</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**** Job Debugging Information ****\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"This job will run on <span class=\"variable\">$SLURM_JOB_NODELIST</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ENVIRONMENT VARIABLES\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**********************************************\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run Gaussian</span></span><br><span class=\"line\">g16 ???input file???</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Run <code>sbatch *.sh</code> to submit it to hyak.</li>\n</ol>\n<h1 id=\"Output-amp-Analysis\"><a href=\"#Output-amp-Analysis\" class=\"headerlink\" title=\"Output &amp; Analysis\"></a>Output &amp; Analysis</h1><h2 id=\"I-OPT\"><a href=\"#I-OPT\" class=\"headerlink\" title=\"I. OPT\"></a><font size=\"4\">I. <a href=\"http://gaussian.com/opt/\" target=\"_blank\" rel=\"noopener\">OPT</a></font></h2><p>If key word <code>Tight</code> or <code>SCF</code> is in route card, Berny optimization will be used. This kind of output is dilimited by <em>GradGradGrad…</em>. The appearance of the following words marks completion of opt, and the final structure is displayed after that. We always want to extract the optimized standard structure for the next step calculation.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            Item               Value     Threshold  Converged?</span><br><span class=\"line\">Maximum Force            0.000020     0.000450     YES</span><br><span class=\"line\">RMS     Force            0.000004     0.000300     YES</span><br><span class=\"line\">Maximum Displacement     0.001510     0.001800     YES</span><br><span class=\"line\">RMS     Displacement     0.000199     0.001200     YES</span><br><span class=\"line\">Optimization completed.</span><br><span class=\"line\">   -- Stationary point found</span><br></pre></td></tr></table></figure>\n<p><jump id=\"rstopt\"></jump>If <code>Stationary point found</code> is absent in log file, that means the opt job is ended earlier, maybe because of time limit. In this case, we need to write another restarted input file and submit it again to start from where it left, the route card of which should be <code># opt=restart</code> plus the other keywords in the original input. For example: if the original route card is:<code># opt ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)</code> and the chk file is named as <em>test.chk</em>. The new input file is like: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%UseSSH</span><br><span class=\"line\">%mem=32GB</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%chk=test.chk</span><br><span class=\"line\"># Opt=Restart ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)</span><br><span class=\"line\">! a blank line must be here</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-optlog2gjfcom-py\"><a href=\"#1-optlog2gjfcom-py\" class=\"headerlink\" title=\"1. optlog2gjfcom.py\"></a><font size=\"3\">1. <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/optlog2gjfcom.py\" target=\"_blank\" rel=\"noopener\">optlog2gjfcom.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python optlog2gjfcom.py opt_log</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Uses <code>Stationary point found</code> as a key to tell if opt finishes</li>\n<li>If finished, locates <code>Standard orientation</code> after it, reads charge and multiplicity from the very end and then writes them to a new file in the form of gaussian input, named <em>test_opt.gjf</em> if original one is <em>test$.$com</em>.</li>\n<li>If not  finished, writes the restarted input file just as showed above named with <em>test_rst.gjf</em> if original one is <em>test.gjf</em>. The name of input and chk files, the route card are read from log file. If chk file not found, it will print a warning.</li>\n</ul>\n</li>\n<li><p><em>Notes</em> </p>\n<ul>\n<li><p>The default route card for optimized file and link info for both optimized and restarted one are easily to change:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LINK=&apos;%UseSSH\\n%mem=32GB\\n%nprocshared=28\\n&apos;</span><br><span class=\"line\">ROUTE=&apos;# td(NStates=25) um062x/6-31+g(d,p) pop=min scf=(xqc,tight)&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>A quick way to walk through all log files in one directory:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> *<span class=\"built_in\">log</span>; <span class=\"keyword\">do</span> python optlog2gjfcom.py <span class=\"variable\">$x</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-HFenergies-py\"><a href=\"#2-HFenergies-py\" class=\"headerlink\" title=\"2.HFenergies.py\"></a><font size=\"3\">2.<jump id=\"hfenergies\"></jump><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/HFenergies.py\" target=\"_blank\" rel=\"noopener\">HFenergies.py</a></font></h3><p>Another important information in the output is optimized energy, which is easy to locate by key word <em>SCF Done</em>.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python HFenergies.py</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Goes through all <em>*.log</em> files in the current directory to extract energy</li>\n<li>If <code>Stationary point found</code> is in the presence of log file, reads the energy after the last <code>SCF Done</code>; if not, returns energy=<em>NA</em></li>\n<li>Energies are sorted ascendingly and written to <em>HFenergies.csv</em> file with corresponding logfile name(without suffix)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"II-FREQ\"><a href=\"#II-FREQ\" class=\"headerlink\" title=\"II. FREQ\"></a><font size=\"4\">II. <a href=\"http://gaussian.com/freq/\" target=\"_blank\" rel=\"noopener\">FREQ</a></font></h2><p><em>3N-6</em> frequecies can be found in the output file for nonlinear molecules (<em>3N-5</em> for linear molecules, <em>N</em> is the number of atoms), following by thermochemistry analysis at 298.15K, 1 atm.<br>Since the temperature in the Mass Spec is around 310K, we need to extrat all normal modes(frequencies), zero-point vibrational energy(ZPVE) and entropy(S) from the log file and calculate entropy and enthalpy(H) at 310K 1 atm. Also, we correct frequencies by a factor of 0.975.</p>\n<p><em>Note that the input of freq job should be the optimized structure optimized with the same method and basis set.</em></p>\n<h3 id=\"1-freq-thermal-py\"><a href=\"#1-freq-thermal-py\" class=\"headerlink\" title=\"1.freq_thermal.py\"></a><font size=\"3\">1.<jump id=\"freqt\"></jump><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/freq_thermal.py\" target=\"_blank\" rel=\"noopener\">freq_thermal.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python freq_thermal.py freq_log</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Extracts frequencies from log file. If the first frequency is negative or freq not finished, raises error and stops.</li>\n<li>Uses partition functions to calculate enthalpy, entropy and heat capacity and writes the result to file named with <em>test_freq.csv</em> if <em>test.log</em> is given.</li>\n<li><em><font color=\"gray\">explanations of calculation(to be writted)</font></em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-CpExtractor-py\"><a href=\"#2-CpExtractor-py\" class=\"headerlink\" title=\"2.CpExtractor.py\"></a><font size=\"3\">2.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/CpExtractor.py\" target=\"_blank\" rel=\"noopener\">CpExtractor.py</a></font></h3><p>Sometimes, we only want to know the heat capacity at constant pressure. This scripts can extract Cp from all *freq.csv files.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python CpExtractor.py</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Goes through all <em>*_freq.csv</em> files in the working directory and writes the Cp and its file name into a new file <em>Cp.csv</em></li>\n<li>If Cp not found, <em>NA</em> will be there instead of a number</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-GibbsEnergy-py\"><a href=\"#3-GibbsEnergy-py\" class=\"headerlink\" title=\"3.GibbsEnergy.py\"></a><font size=\"3\">3.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/GibbsEnergy.py\" target=\"_blank\" rel=\"noopener\">GibbsEnergy.py</a></font></h3><p>After finish all opt and freq jobs, we can use energy file got from <em>HFenergies$.$py</em> and <em>ZPVE</em>, <em>H</em> and <em>S</em> from <em>freq_thermal$.$py</em> to calculate their free energies.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python GibbsEnergy.py energyfile</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Needs energy($E_{elec}$) file got from <a href=\"#hfenergies\">HFenergies.py</a> and corresponding *_freq.csv files got from <a href=\"#freqt\">freq_thermal.py</a> in the same directory. The delimiter of all these files must be comma(by default, don’t change it)</li>\n<li>Reads structure’s name(x) and energy from energy file. The frist row is considered as title, will be skipped. The structure with lowest energy is seen as reference.</li>\n<li>Uses x find its freq file: x_freq.csv and reads its 9th row(thermal information); only reads 8th row(title info) for one <em>*_freq.csv</em>.</li>\n<li>$G=E_{elec}+ZPVE_{corr}+H(T)-T\\cdot S(T)$ and $\\Delta G=G-G_{ref}$ are used, the result in $kJ/mol$</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"III-TDDFT\"><a href=\"#III-TDDFT\" class=\"headerlink\" title=\"III. TDDFT\"></a><font size=\"4\">III. <a href=\"http://gaussian.com/td/\" target=\"_blank\" rel=\"noopener\">TDDFT</a></font></h2><p>The main output of tddft contains the excitation energies, oscillation strength(f, the intensity of that transition) and S**2, listed below. A resonable transition should satisfy spin forbidden. For a doublet(multiplicity:2S+1=2) S=0.5, so S**2=S(S+1)=0.75. What should be consider is that if not following that rule, the electron flips during the transiton, the total spin momentum S changes from 0.5 to 1.5, and S**2=3.75. When running tddft job, the transition is a combination of these two situations, usually the more differ from what S**2 should be, the less f is. In our lab, we only keep transitions whose S**2&lt;2.6, and use lorentzian equation to calcualte its absorption spectra.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Excited State   1:  2.065-A      2.0123 eV  616.13 nm  f=0.0002  &lt;S**2&gt;=0.816</span><br><span class=\"line\">    62B -&gt; 70B       -0.10013</span><br><span class=\"line\">    63B -&gt; 70B       -0.16217</span><br><span class=\"line\">    63B -&gt; 72B       -0.10120</span><br><span class=\"line\">    67B -&gt; 70B        0.87674</span><br><span class=\"line\">    68B -&gt; 70B        0.37169</span><br></pre></td></tr></table></figure>\n<p><jump id=\"addtd\"></jump>In experiment, we measure the action spectra from 210nm to 700nm, so we hope the theoritical one can cover that region. If the last transition energy cannot reach 210nm, we should add more states to it. For example, if the original route card is <code># TD(Nstates=30) um062x/6-31+g(d,p) pop=none scf=(xqc,tight)</code> and its chk file is <em>test.chk</em> the new input file should be:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=32GB</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%oldchk=test.chk</span><br><span class=\"line\">%chk=test_add.chk</span><br><span class=\"line\"># TD(add=10) Geom=AllCheck um062x/6-31+g(d,p) pop=none scf=(xqc,tight)</span><br><span class=\"line\">! a blank line must be here</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-tddft-lorentzian-py\"><a href=\"#1-tddft-lorentzian-py\" class=\"headerlink\" title=\"1.tddft_lorentzian.py\"></a><font size=\"3\">1.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_lorentzian.py\" target=\"_blank\" rel=\"noopener\">tddft_lorentzian.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python tddft_lorentzian.py td_log</code></li>\n<li><code>python tddft_lorentzian.py td_log N</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Reads all excitated frequencies, oscilation strength and S**2 from log file and checks if the last one is below 210nm.</li>\n<li>If not, writes the new input file as shown above named with <em>test_add.gjf</em> if original input is <em>test.gjf</em>. The original input file and chk file must be in the same directory.</li>\n<li>Otherwise, uses S**2=2.6 as a cut-off to choose excitations and applies lorentzian equation to calculate absorption spectra. The results are written to <em>test_uvvis.csv</em> if log named with <em>test.log</em>. <strong>If N is specified in the usage command, only select excitations larger than N(nm).</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-tddft-plot-py\"><a href=\"#2-tddft-plot-py\" class=\"headerlink\" title=\"2.tddft_plot.py\"></a><font size=\"3\">2.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_plot.py\" target=\"_blank\" rel=\"noopener\">tddft_plot.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python tddft_plot.py uvvis.csv</code></li>\n<li>uvvis.csv is the file got from tddft_lorentzian.py</li>\n<li>need import matplotlib, pandas, numpy, <code>module load anacond3_5.3</code> if not able to import these modules</li>\n</ul>\n</li>\n<li><p><em>Descriptions</em></p>\n<p><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/tddftplot_eg.jpg\" alt=\"tddft plot\"></p>\n</li>\n</ul>\n<h3 id=\"3-cubegen-py\"><a href=\"#3-cubegen-py\" class=\"headerlink\" title=\"3.cubegen.py\"></a><jump id=\"vistd\"></jump><font size=\"3\">3.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/cubegen.py\" target=\"_blank\" rel=\"noopener\">cubegen.py</a></font></h3><p>We can also visualize the molecular orbital if we have tddft chk file. We should first use <a href=\"http://gaussian.com/formchk/\" target=\"_blank\" rel=\"noopener\"><code>formchk</code></a> command to generate fchk file, and then use <a href=\"http://gaussian.com/cubegen/\" target=\"_blank\" rel=\"noopener\"><code>cubegen</code></a> to get the cube file, which can be visualized by Gaussian-View. To use cubegen, we also need to decide the molecular orbital number. For $\\alpha$ orbital, like 68A, just set mo=68. But for $\\beta$ orbital,like 72B, we should find the total number of $\\alpha$ orbitals first: if one molecule has 70 $\\alpha$ electrons(NAE) and 356 virtual $\\alpha$ orbitals(NVA), set mo=498(70+356+72). </p>\n<p>If we run cubegen on the login node, it will take around 1 minutes. Usually we are interested in several orbitals in one or more excited states. In this way, this script comes out. </p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python cubegen.py td_log num_excited_states</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Finds the name of chk/fchk file from log file. After fchk found, skip to next step; if not, start to locate chk file and generate fchk from chk. If both of them not found, stop processing. </li>\n<li>Finds NAE, NVA and unique molecule orbitals in the specified excited state. And writes corresponding cubegen to a txt file.</li>\n<li>Loads parallel environment and cats tasklists( the txt file) to the sbatch file.</li>\n<li>Submits it to ckpt partition. It should be finished in several seconds</li>\n</ul>\n</li>\n<li><p><em>Example</em></p>\n<p> The transition of the first excited state is listed above. If its log is test.log, NAE+NVA=426. Run <code>python cubegen.py test.log 1</code>, we will get 2 files: t1_test.txt and t1_test.sh, and it will submit t1_test.sh to ckpt queue.</p>\n<p>  <em>t1_test.txt</em>:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cubegen 0 mo=488 test.fchk test_62B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=489 test.fchk test_63B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=493 test.fchk test_67B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=494 test.fchk test_68B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=496 test.fchk test_70B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=498 test.fchk test_72B.cube 0 h</span><br></pre></td></tr></table></figure>\n<p>  <em>t1_test.sh</em>:</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=fchk_cube</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --ntasks-per-node=28</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=10:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=100G</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=/gscratch/stf/yueliu96/test</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=ckpt</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=stf-ckpt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'This job will run on'</span> <span class=\"variable\">$SLURM_JOB_NODELIST</span></span><br><span class=\"line\"><span class=\"comment\">#set up time</span></span><br><span class=\"line\">start=$(date +%s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load Gaussian environment</span></span><br><span class=\"line\">module load contrib/g16.b01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#use checkpoint file to generte formatted one</span></span><br><span class=\"line\">formchk test.chk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load parallel environment</span></span><br><span class=\"line\">module load parallel-20170722</span><br><span class=\"line\">cat t1_test_opt.txt | parallel -j 28</span><br><span class=\"line\"></span><br><span class=\"line\">end=$(date +%s)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Elapsed Time: '</span>$((<span class=\"variable\">$end</span>-<span class=\"variable\">$start</span>))<span class=\"string\">'s'</span></span><br></pre></td></tr></table></figure>\n<p>  After finish, we can get 6 cube files. Transfer them from hyak to your local work directory. We need to use <em>GaussView</em> to see how the orbital looks like:</p>\n<ul>\n<li>open test.fchk with <em>GaussView</em></li>\n<li>click <code>Result</code>$\\rightarrow$<code>Surfaces/Contours</code>$\\rightarrow$<code>Cube Actions</code>$\\rightarrow$<code>Load Cube</code>$\\rightarrow$choose one of  your cube files$\\rightarrow$highlight that cube$\\rightarrow$<code>Surfacec Actions</code>$\\rightarrow$<code>New Surface</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><em>Here introduces how to setup Gaussian input file, submit it to <a href=\"https://wiki.cac.washington.edu/display/hyakusers/WIKI+for+Hyak+users\" target=\"_blank\" rel=\"noopener\">Hyak</a> (super computer server) and analyze the output file by my python scripts. Scripts attached here are not limited by python versions.</em></p>\n<h1 id=\"Gaussian-16-Input\"><a href=\"#Gaussian-16-Input\" class=\"headerlink\" title=\"Gaussian 16 Input\"></a>Gaussian 16 Input</h1><p><a href=\"http://gaussian.com/input/\" target=\"_blank\" rel=\"noopener\">Gaussian 16 input</a> consists of a series of lines in an ASCII text file. In general, the input is free-format and case-insensitive; comments start with an exclamation point(!), could be anywhere on a line; spaces, commas, tabs and forward slashes are all considered as valid delimiters (multi spaces are treated as a single demiliter); keyword=option,kw(op),kw=(op1,op2,…) and kw(op1,op2) are all correct. The common suffixes of the input file are gjf and com. The basic structure includes several different sections:</p>\n<h2 id=\"Link-0-Commands\"><a href=\"#Link-0-Commands\" class=\"headerlink\" title=\"Link 0 Commands\"></a><font size=\"3\"><a href=\"http://gaussian.com/link0/\" target=\"_blank\" rel=\"noopener\">Link 0 Commands</a></font></h2><ul>\n<li>locate and name scratch files </li>\n<li>not blank line terminated</li>\n<li>examples<ul>\n<li>%LindaWorker<ul>\n<li>add it when using 2 or more nodes on Hyak</li>\n</ul>\n</li>\n<li>%NProcShared=<em>N</em><ul>\n<li>use up to N processors/cores on shared memory on one node</li>\n<li>default: 28 on Hyak-mox, 16 on Hyak-ikt</li>\n</ul>\n</li>\n<li>%UseSSH<ul>\n<li>start linda workers by ssh instead of rsh(default)</li>\n<li>rsh, remote shell, can execute command on another computer as another user</li>\n<li>ssh: a more secure way to communicate between computers</li>\n<li>some parallel jobs may mess up by using rsh</li>\n</ul>\n</li>\n<li>%Mem=<em>N</em><ul>\n<li>set the dynamics of memory, can follow by MB,GB,etc. 800mb for g16 by default</li>\n<li>some gaussian jobs will select the appropriate algorithm automatically based on the setting of %Mem and <a href=\"#maxdisk\">MaxDisk</a>.</li>\n<li>specifing more mem than availble will cause very poor performance; leave several GBs for operating system</li>\n</ul>\n</li>\n<li>%RWF=<em>file</em><ul>\n<li>locate and name the  read-write file, a super huge file, used to <a href=\"http://gaussian.com/restart/\" target=\"_blank\" rel=\"noopener\">restart</a> a job(not need for opt)</li>\n<li>usually followed by <em><code>%NoSave</code></em>, everything before nosave will deleted if job completes normally</li>\n<li>a suggested location  on Hyak is <a href=\"https://wiki.cac.washington.edu/display/hyakusers/Hyak_disk_quota\" target=\"_blank\" rel=\"noopener\"><code>/gscratch/scrubbed/</code> </a></li>\n<li>how to locate it if not include %RWF(Hyak version):<ul>\n<li>all scratch files are at <a href=\"https://wiki.cac.washington.edu/display/hyakusers/Managing+your+Files#ManagingyourFiles-HomeDirectories\" target=\"_blank\" rel=\"noopener\"><code>/scr/</code></a> of the local node ( <code>ssh nodenumber</code> to enter that node)</li>\n<li>the scratch disk of that node will be cleaned up after walltime runs out </li>\n<li>general version and more about restarting opt and freq jobs: <a href=\"http://gaussian.com/faq2/\" target=\"_blank\" rel=\"noopener\"><em>click  me</em></a></li>\n</ul>\n</li>\n<li>Related key word: <a href=\"#maxdisk\">MaxDisk</a></li>\n</ul>\n</li>\n<li>%Chk=<em>file</em><ul>\n<li>locate and name the checkpoint file</li>\n<li>used to restart jobs(especially <a href=\"#rstopt\">opt</a>), <a href=\"#addtd\">add more states for td</a> and <a href=\"#vistd\">visualize molecular orbitals for td</a></li>\n</ul>\n</li>\n<li>%OldChk=<em>file</em><ul>\n<li>use with <em><code>%Chk=newfile</code></em>: copy <em>file</em> to <em>newfile</em> and then write new chk info to <em>newfile</em></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Route-section-lines\"><a href=\"#Route-section-lines\" class=\"headerlink\" title=\"Route section (# lines)\"></a><font size=\"3\"><a href=\"http://gaussian.com/route/\" target=\"_blank\" rel=\"noopener\">Route section (# lines)</a></font></h2><ul>\n<li>job type and method</li>\n<li>blank line terminated</li>\n<li><p>examples</p>\n<ul>\n<li>print form<ul>\n<li><em><code>#N</code></em>: normal print, by default if not specify</li>\n<li><em><code>#P</code></em>: print more info</li>\n<li><em><code>#T</code></em>: terse print </li>\n</ul>\n</li>\n<li>job type<ul>\n<li><em><a href=\"http://gaussian.com/sp/\" target=\"_blank\" rel=\"noopener\">SP</a></em> : single point energy, by default if not specify</li>\n<li><em><a href=\"http://gaussian.com/opt/\" target=\"_blank\" rel=\"noopener\">OPT</a></em> : geometry optimization</li>\n<li><em><a href=\"http://gaussian.com/freq/\" target=\"_blank\" rel=\"noopener\">FREQ</a></em> : vibrational frequency and thermal information</li>\n<li><em><a href=\"http://gaussian.com/td/\" target=\"_blank\" rel=\"noopener\">TD(NStates=n)</a></em> : calculate n excited transitions</li>\n</ul>\n</li>\n<li><p>other keywords</p>\n<ul>\n<li><a href=\"http://gaussian.com/population/\" target=\"_blank\" rel=\"noopener\">POP</a><ul>\n<li>charge and spin distribution</li>\n<li><code>pop=min</code> by default except guess=only</li>\n</ul>\n</li>\n<li><a href=\"http://gaussian.com/scf/\" target=\"_blank\" rel=\"noopener\">SCF</a><ul>\n<li>control the functioning of the SCF procedure</li>\n<li><code>scf=tight</code> by default</li>\n<li><code>scf=xqc</code> is helpful for difficult conversion case</li>\n<li><code>NoSymm</code> or <code>Symmetry=None</code>: release orbital symmetry constraints</li>\n</ul>\n</li>\n<li><p><a href=\"http://gaussian.com/scrf/\" target=\"_blank\" rel=\"noopener\">SCRF</a></p>\n<ul>\n<li>in the presence of solvent, place solute in a cavity within the solvent reaction field.<ul>\n<li><code>scrf=pcm</code> by default</li>\n<li>ex: <code>scrf=(pcm,solvent=water)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><font color=\"gray\"><a href=\"http://gaussian.com/cachesize/\" target=\"_blank\" rel=\"noopener\">CacheSize</a><br>- the amount of cache per processor to use with various cache-blocking algorithms (in 8-byte words)<br>- ex: from <code>/proc/cpuinfo</code> find the cache available(35840kb) and a good value is its 50% ( $35840\\times1024\\div8\\times50\\%=2293760$): <code>cachesize=2293760</code><br>- no need to add it for Hyak</font></li>\n<li><a href=\"http://gaussian.com/maxdisk/\" target=\"_blank\" rel=\"noopener\"><jump id=\"maxdisk\">MaxDisk</jump></a><ul>\n<li>the amount of disk storage available for <a href=\"https://gaussian.com/running/?tabid=6\" target=\"_blank\" rel=\"noopener\">scratch data</a> </li>\n<li>disk space of one node on Hyak is ~100GB. <code>lsblk -d</code> or <code>df -h</code> can show physical disk info of linux system</li>\n<li>the more disk space available, the faster the evaluation, especially for MP2. Some jobs have fixed or minimum disk requirments, click <a href=\"http://gaussian.com/maxdisk/\" target=\"_blank\" rel=\"noopener\">me</a> for more info.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Title-section\"><a href=\"#Title-section\" class=\"headerlink\" title=\"Title section\"></a><font size=\"3\">Title section</font></h2><ul>\n<li>any descriptions within 5 lines</li>\n<li>avoid special character: @  #  !  –  _    control characters (especially Ctrl-G)</li>\n<li>blank line terminated</li>\n</ul>\n<h2 id=\"Molecule-specification\"><a href=\"#Molecule-specification\" class=\"headerlink\" title=\"Molecule specification\"></a><font size=\"3\"><a href=\"http://gaussian.com/molspec/\" target=\"_blank\" rel=\"noopener\">Molecule specification</a></font></h2><ul>\n<li>charge, multiplicity, atoms and coordinates<ul>\n<li>multiplicity<ul>\n<li>number of possible spin orientations of the total spin</li>\n<li>mp=2S+1, S($\\alpha$ electron)=0.5, S($\\beta$ electron)=-0.5</li>\n</ul>\n</li>\n<li>coordinates<ul>\n<li>x, y and z coordinates in angstrom</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>blank line terminated</li>\n</ul>\n<h2 id=\"Optinal-additional-sections\"><a href=\"#Optinal-additional-sections\" class=\"headerlink\" title=\"Optinal additional sections\"></a><font size=\"3\">Optinal additional sections</font></h2><ul>\n<li>additional input</li>\n<li>blank line terminated</li>\n</ul>\n<p><em>Example:</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=32GB</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%chk=guanosine.chk</span><br><span class=\"line\"># opt um062x/6-31+g(d,p) pop=min scf=(xqc,tight)</span><br><span class=\"line\"></span><br><span class=\"line\">Complex guanosine</span><br><span class=\"line\"></span><br><span class=\"line\">1 2</span><br><span class=\"line\">O       -3.094427        1.959361        0.291777</span><br><span class=\"line\">C       -4.011153        1.021154       -0.267210</span><br><span class=\"line\">C       -3.292860       -0.293751       -0.453718</span><br><span class=\"line\">O       -2.175288       -0.104229       -1.347075</span><br><span class=\"line\">...           ...             ...             ...</span><br><span class=\"line\">H       -1.180628        1.929546       -0.412585</span><br><span class=\"line\">H       -3.574938        2.742899        0.582770</span><br><span class=\"line\">H        1.100354        3.004366        0.220564</span><br><span class=\"line\">! a blank line must be here</span><br></pre></td></tr></table></figure>\n<h1 id=\"Submit-to-Hyak\"><a href=\"#Submit-to-Hyak\" class=\"headerlink\" title=\"Submit to Hyak\"></a>Submit to Hyak</h1><ol>\n<li><p>Run <code>~/Hyak-Gaussian/gaussian-sub.py input_file</code>, will generate a sbatch file(suffix is sh)</p>\n<p>Another way to create this file is to run my python script <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/gaussian-mox.py\" target=\"_blank\" rel=\"noopener\">gaussian-mox.py</a> </p>\n<ul>\n<li>Usage:<ul>\n<li><code>python gaussian-mox.py input-file partition node-num time-hour</code></li>\n<li>partition can be [stf chem ilahie ckpt]</li>\n<li>time is a float in hour</li>\n<li>if node-num &gt; 1, “%lindaworker” must be in the head of input file</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##needed if ckpt partition or  any partitions with 2 or more nodes</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --ntasks-per-node=??</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=???:00:00</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##larger than %mem in input file</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=??????</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=???</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">##turn on email notification</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mail-type=ALL</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mail-user=???your email???</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load Gaussian environment</span></span><br><span class=\"line\">module load contrib/g16.b01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># debugging information</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**** Job Debugging Information ****\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"This job will run on <span class=\"variable\">$SLURM_JOB_NODELIST</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ENVIRONMENT VARIABLES\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"**********************************************\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run Gaussian</span></span><br><span class=\"line\">g16 ???input file???</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">exit</span> 0</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Run <code>sbatch *.sh</code> to submit it to hyak.</li>\n</ol>\n<h1 id=\"Output-amp-Analysis\"><a href=\"#Output-amp-Analysis\" class=\"headerlink\" title=\"Output &amp; Analysis\"></a>Output &amp; Analysis</h1><h2 id=\"I-OPT\"><a href=\"#I-OPT\" class=\"headerlink\" title=\"I. OPT\"></a><font size=\"4\">I. <a href=\"http://gaussian.com/opt/\" target=\"_blank\" rel=\"noopener\">OPT</a></font></h2><p>If key word <code>Tight</code> or <code>SCF</code> is in route card, Berny optimization will be used. This kind of output is dilimited by <em>GradGradGrad…</em>. The appearance of the following words marks completion of opt, and the final structure is displayed after that. We always want to extract the optimized standard structure for the next step calculation.</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">            Item               Value     Threshold  Converged?</span><br><span class=\"line\">Maximum Force            0.000020     0.000450     YES</span><br><span class=\"line\">RMS     Force            0.000004     0.000300     YES</span><br><span class=\"line\">Maximum Displacement     0.001510     0.001800     YES</span><br><span class=\"line\">RMS     Displacement     0.000199     0.001200     YES</span><br><span class=\"line\">Optimization completed.</span><br><span class=\"line\">   -- Stationary point found</span><br></pre></td></tr></table></figure>\n<p><jump id=\"rstopt\"></jump>If <code>Stationary point found</code> is absent in log file, that means the opt job is ended earlier, maybe because of time limit. In this case, we need to write another restarted input file and submit it again to start from where it left, the route card of which should be <code># opt=restart</code> plus the other keywords in the original input. For example: if the original route card is:<code># opt ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)</code> and the chk file is named as <em>test.chk</em>. The new input file is like: </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%UseSSH</span><br><span class=\"line\">%mem=32GB</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%chk=test.chk</span><br><span class=\"line\"># Opt=Restart ub3lyp/6-31+g(d,p) pop=min scf=(xqc,tight)</span><br><span class=\"line\">! a blank line must be here</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-optlog2gjfcom-py\"><a href=\"#1-optlog2gjfcom-py\" class=\"headerlink\" title=\"1. optlog2gjfcom.py\"></a><font size=\"3\">1. <a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/optlog2gjfcom.py\" target=\"_blank\" rel=\"noopener\">optlog2gjfcom.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python optlog2gjfcom.py opt_log</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Uses <code>Stationary point found</code> as a key to tell if opt finishes</li>\n<li>If finished, locates <code>Standard orientation</code> after it, reads charge and multiplicity from the very end and then writes them to a new file in the form of gaussian input, named <em>test_opt.gjf</em> if original one is <em>test$.$com</em>.</li>\n<li>If not  finished, writes the restarted input file just as showed above named with <em>test_rst.gjf</em> if original one is <em>test.gjf</em>. The name of input and chk files, the route card are read from log file. If chk file not found, it will print a warning.</li>\n</ul>\n</li>\n<li><p><em>Notes</em> </p>\n<ul>\n<li><p>The default route card for optimized file and link info for both optimized and restarted one are easily to change:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LINK=&apos;%UseSSH\\n%mem=32GB\\n%nprocshared=28\\n&apos;</span><br><span class=\"line\">ROUTE=&apos;# td(NStates=25) um062x/6-31+g(d,p) pop=min scf=(xqc,tight)&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>A quick way to walk through all log files in one directory:</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> *<span class=\"built_in\">log</span>; <span class=\"keyword\">do</span> python optlog2gjfcom.py <span class=\"variable\">$x</span>; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-HFenergies-py\"><a href=\"#2-HFenergies-py\" class=\"headerlink\" title=\"2.HFenergies.py\"></a><font size=\"3\">2.<jump id=\"hfenergies\"></jump><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/HFenergies.py\" target=\"_blank\" rel=\"noopener\">HFenergies.py</a></font></h3><p>Another important information in the output is optimized energy, which is easy to locate by key word <em>SCF Done</em>.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python HFenergies.py</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Goes through all <em>*.log</em> files in the current directory to extract energy</li>\n<li>If <code>Stationary point found</code> is in the presence of log file, reads the energy after the last <code>SCF Done</code>; if not, returns energy=<em>NA</em></li>\n<li>Energies are sorted ascendingly and written to <em>HFenergies.csv</em> file with corresponding logfile name(without suffix)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"II-FREQ\"><a href=\"#II-FREQ\" class=\"headerlink\" title=\"II. FREQ\"></a><font size=\"4\">II. <a href=\"http://gaussian.com/freq/\" target=\"_blank\" rel=\"noopener\">FREQ</a></font></h2><p><em>3N-6</em> frequecies can be found in the output file for nonlinear molecules (<em>3N-5</em> for linear molecules, <em>N</em> is the number of atoms), following by thermochemistry analysis at 298.15K, 1 atm.<br>Since the temperature in the Mass Spec is around 310K, we need to extrat all normal modes(frequencies), zero-point vibrational energy(ZPVE) and entropy(S) from the log file and calculate entropy and enthalpy(H) at 310K 1 atm. Also, we correct frequencies by a factor of 0.975.</p>\n<p><em>Note that the input of freq job should be the optimized structure optimized with the same method and basis set.</em></p>\n<h3 id=\"1-freq-thermal-py\"><a href=\"#1-freq-thermal-py\" class=\"headerlink\" title=\"1.freq_thermal.py\"></a><font size=\"3\">1.<jump id=\"freqt\"></jump><a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/freq_thermal.py\" target=\"_blank\" rel=\"noopener\">freq_thermal.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python freq_thermal.py freq_log</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Extracts frequencies from log file. If the first frequency is negative or freq not finished, raises error and stops.</li>\n<li>Uses partition functions to calculate enthalpy, entropy and heat capacity and writes the result to file named with <em>test_freq.csv</em> if <em>test.log</em> is given.</li>\n<li><em><font color=\"gray\">explanations of calculation(to be writted)</font></em></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-CpExtractor-py\"><a href=\"#2-CpExtractor-py\" class=\"headerlink\" title=\"2.CpExtractor.py\"></a><font size=\"3\">2.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/CpExtractor.py\" target=\"_blank\" rel=\"noopener\">CpExtractor.py</a></font></h3><p>Sometimes, we only want to know the heat capacity at constant pressure. This scripts can extract Cp from all *freq.csv files.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python CpExtractor.py</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Goes through all <em>*_freq.csv</em> files in the working directory and writes the Cp and its file name into a new file <em>Cp.csv</em></li>\n<li>If Cp not found, <em>NA</em> will be there instead of a number</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-GibbsEnergy-py\"><a href=\"#3-GibbsEnergy-py\" class=\"headerlink\" title=\"3.GibbsEnergy.py\"></a><font size=\"3\">3.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/GibbsEnergy.py\" target=\"_blank\" rel=\"noopener\">GibbsEnergy.py</a></font></h3><p>After finish all opt and freq jobs, we can use energy file got from <em>HFenergies$.$py</em> and <em>ZPVE</em>, <em>H</em> and <em>S</em> from <em>freq_thermal$.$py</em> to calculate their free energies.</p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python GibbsEnergy.py energyfile</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Needs energy($E_{elec}$) file got from <a href=\"#hfenergies\">HFenergies.py</a> and corresponding *_freq.csv files got from <a href=\"#freqt\">freq_thermal.py</a> in the same directory. The delimiter of all these files must be comma(by default, don’t change it)</li>\n<li>Reads structure’s name(x) and energy from energy file. The frist row is considered as title, will be skipped. The structure with lowest energy is seen as reference.</li>\n<li>Uses x find its freq file: x_freq.csv and reads its 9th row(thermal information); only reads 8th row(title info) for one <em>*_freq.csv</em>.</li>\n<li>$G=E_{elec}+ZPVE_{corr}+H(T)-T\\cdot S(T)$ and $\\Delta G=G-G_{ref}$ are used, the result in $kJ/mol$</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"III-TDDFT\"><a href=\"#III-TDDFT\" class=\"headerlink\" title=\"III. TDDFT\"></a><font size=\"4\">III. <a href=\"http://gaussian.com/td/\" target=\"_blank\" rel=\"noopener\">TDDFT</a></font></h2><p>The main output of tddft contains the excitation energies, oscillation strength(f, the intensity of that transition) and S**2, listed below. A resonable transition should satisfy spin forbidden. For a doublet(multiplicity:2S+1=2) S=0.5, so S**2=S(S+1)=0.75. What should be consider is that if not following that rule, the electron flips during the transiton, the total spin momentum S changes from 0.5 to 1.5, and S**2=3.75. When running tddft job, the transition is a combination of these two situations, usually the more differ from what S**2 should be, the less f is. In our lab, we only keep transitions whose S**2&lt;2.6, and use lorentzian equation to calcualte its absorption spectra.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Excited State   1:  2.065-A      2.0123 eV  616.13 nm  f=0.0002  &lt;S**2&gt;=0.816</span><br><span class=\"line\">    62B -&gt; 70B       -0.10013</span><br><span class=\"line\">    63B -&gt; 70B       -0.16217</span><br><span class=\"line\">    63B -&gt; 72B       -0.10120</span><br><span class=\"line\">    67B -&gt; 70B        0.87674</span><br><span class=\"line\">    68B -&gt; 70B        0.37169</span><br></pre></td></tr></table></figure>\n<p><jump id=\"addtd\"></jump>In experiment, we measure the action spectra from 210nm to 700nm, so we hope the theoritical one can cover that region. If the last transition energy cannot reach 210nm, we should add more states to it. For example, if the original route card is <code># TD(Nstates=30) um062x/6-31+g(d,p) pop=none scf=(xqc,tight)</code> and its chk file is <em>test.chk</em> the new input file should be:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">%mem=32GB</span><br><span class=\"line\">%nprocshared=28</span><br><span class=\"line\">%oldchk=test.chk</span><br><span class=\"line\">%chk=test_add.chk</span><br><span class=\"line\"># TD(add=10) Geom=AllCheck um062x/6-31+g(d,p) pop=none scf=(xqc,tight)</span><br><span class=\"line\">! a blank line must be here</span><br></pre></td></tr></table></figure>\n<h3 id=\"1-tddft-lorentzian-py\"><a href=\"#1-tddft-lorentzian-py\" class=\"headerlink\" title=\"1.tddft_lorentzian.py\"></a><font size=\"3\">1.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_lorentzian.py\" target=\"_blank\" rel=\"noopener\">tddft_lorentzian.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python tddft_lorentzian.py td_log</code></li>\n<li><code>python tddft_lorentzian.py td_log N</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Reads all excitated frequencies, oscilation strength and S**2 from log file and checks if the last one is below 210nm.</li>\n<li>If not, writes the new input file as shown above named with <em>test_add.gjf</em> if original input is <em>test.gjf</em>. The original input file and chk file must be in the same directory.</li>\n<li>Otherwise, uses S**2=2.6 as a cut-off to choose excitations and applies lorentzian equation to calculate absorption spectra. The results are written to <em>test_uvvis.csv</em> if log named with <em>test.log</em>. <strong>If N is specified in the usage command, only select excitations larger than N(nm).</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"2-tddft-plot-py\"><a href=\"#2-tddft-plot-py\" class=\"headerlink\" title=\"2.tddft_plot.py\"></a><font size=\"3\">2.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/tddft_plot.py\" target=\"_blank\" rel=\"noopener\">tddft_plot.py</a></font></h3><ul>\n<li><em>Usage</em><ul>\n<li><code>python tddft_plot.py uvvis.csv</code></li>\n<li>uvvis.csv is the file got from tddft_lorentzian.py</li>\n<li>need import matplotlib, pandas, numpy, <code>module load anacond3_5.3</code> if not able to import these modules</li>\n</ul>\n</li>\n<li><p><em>Descriptions</em></p>\n<p><img src=\"https://raw.githubusercontent.com/yueliu96/blog_images/master/tddftplot_eg.jpg\" alt=\"tddft plot\"></p>\n</li>\n</ul>\n<h3 id=\"3-cubegen-py\"><a href=\"#3-cubegen-py\" class=\"headerlink\" title=\"3.cubegen.py\"></a><jump id=\"vistd\"></jump><font size=\"3\">3.<a href=\"https://raw.githubusercontent.com/yueliu96/scripts_for_lab/master/cubegen.py\" target=\"_blank\" rel=\"noopener\">cubegen.py</a></font></h3><p>We can also visualize the molecular orbital if we have tddft chk file. We should first use <a href=\"http://gaussian.com/formchk/\" target=\"_blank\" rel=\"noopener\"><code>formchk</code></a> command to generate fchk file, and then use <a href=\"http://gaussian.com/cubegen/\" target=\"_blank\" rel=\"noopener\"><code>cubegen</code></a> to get the cube file, which can be visualized by Gaussian-View. To use cubegen, we also need to decide the molecular orbital number. For $\\alpha$ orbital, like 68A, just set mo=68. But for $\\beta$ orbital,like 72B, we should find the total number of $\\alpha$ orbitals first: if one molecule has 70 $\\alpha$ electrons(NAE) and 356 virtual $\\alpha$ orbitals(NVA), set mo=498(70+356+72). </p>\n<p>If we run cubegen on the login node, it will take around 1 minutes. Usually we are interested in several orbitals in one or more excited states. In this way, this script comes out. </p>\n<ul>\n<li><em>Usage</em><ul>\n<li><code>python cubegen.py td_log num_excited_states</code></li>\n</ul>\n</li>\n<li><em>Descriptions</em><ul>\n<li>Finds the name of chk/fchk file from log file. After fchk found, skip to next step; if not, start to locate chk file and generate fchk from chk. If both of them not found, stop processing. </li>\n<li>Finds NAE, NVA and unique molecule orbitals in the specified excited state. And writes corresponding cubegen to a txt file.</li>\n<li>Loads parallel environment and cats tasklists( the txt file) to the sbatch file.</li>\n<li>Submits it to ckpt partition. It should be finished in several seconds</li>\n</ul>\n</li>\n<li><p><em>Example</em></p>\n<p> The transition of the first excited state is listed above. If its log is test.log, NAE+NVA=426. Run <code>python cubegen.py test.log 1</code>, we will get 2 files: t1_test.txt and t1_test.sh, and it will submit t1_test.sh to ckpt queue.</p>\n<p>  <em>t1_test.txt</em>:</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cubegen 0 mo=488 test.fchk test_62B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=489 test.fchk test_63B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=493 test.fchk test_67B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=494 test.fchk test_68B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=496 test.fchk test_70B.cube 0 h</span><br><span class=\"line\">cubegen 0 mo=498 test.fchk test_72B.cube 0 h</span><br></pre></td></tr></table></figure>\n<p>  <em>t1_test.sh</em>:</p>\n   <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --job-name=fchk_cube</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --nodes=1</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --ntasks-per-node=28</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --time=10:00</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --mem=100G</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --workdir=/gscratch/stf/yueliu96/test</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --partition=ckpt</span></span><br><span class=\"line\"><span class=\"comment\">#SBATCH --account=stf-ckpt</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'This job will run on'</span> <span class=\"variable\">$SLURM_JOB_NODELIST</span></span><br><span class=\"line\"><span class=\"comment\">#set up time</span></span><br><span class=\"line\">start=$(date +%s)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load Gaussian environment</span></span><br><span class=\"line\">module load contrib/g16.b01</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#use checkpoint file to generte formatted one</span></span><br><span class=\"line\">formchk test.chk</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#load parallel environment</span></span><br><span class=\"line\">module load parallel-20170722</span><br><span class=\"line\">cat t1_test_opt.txt | parallel -j 28</span><br><span class=\"line\"></span><br><span class=\"line\">end=$(date +%s)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">'Elapsed Time: '</span>$((<span class=\"variable\">$end</span>-<span class=\"variable\">$start</span>))<span class=\"string\">'s'</span></span><br></pre></td></tr></table></figure>\n<p>  After finish, we can get 6 cube files. Transfer them from hyak to your local work directory. We need to use <em>GaussView</em> to see how the orbital looks like:</p>\n<ul>\n<li>open test.fchk with <em>GaussView</em></li>\n<li>click <code>Result</code>$\\rightarrow$<code>Surfaces/Contours</code>$\\rightarrow$<code>Cube Actions</code>$\\rightarrow$<code>Load Cube</code>$\\rightarrow$choose one of  your cube files$\\rightarrow$highlight that cube$\\rightarrow$<code>Surfacec Actions</code>$\\rightarrow$<code>New Surface</code></li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2y0eazb0007mhmojh7ms5bn","category_id":"ck2y0eaz50004mhmofbnhu8k7","_id":"ck2y0eazg000amhmo8dq1dkh9"},{"post_id":"ck2y0eayt0000mhmore24aj5o","category_id":"ck2y0eaz50004mhmofbnhu8k7","_id":"ck2y0eazi000dmhmoyz6pvjrr"},{"post_id":"ck2y0eaz10002mhmoudee6kr2","category_id":"ck2y0eaz50004mhmofbnhu8k7","_id":"ck2y0eazj000fmhmodgjif3oz"},{"post_id":"ck2y0eaz70006mhmowtowok1b","category_id":"ck2y0eazh000bmhmo6pbs4zms","_id":"ck2y0eazl000imhmoidi7224y"},{"post_id":"ck2y0eb0a000qmhmoouvgu0u2","category_id":"ck2y0eazh000bmhmo6pbs4zms","_id":"ck2y0eb0e000umhmo2fikykl2"},{"post_id":"ck2y0eb0b000rmhmoglqavtgw","category_id":"ck2y0eazh000bmhmo6pbs4zms","_id":"ck2y0eb0f000vmhmom4s98taa"},{"post_id":"ck2y0eb0d000tmhmosvrfo0zd","category_id":"ck2y0eazh000bmhmo6pbs4zms","_id":"ck2y0eb0g000ymhmouuu2n3qn"},{"post_id":"ck2y0eb2s0014mhmofsdwp5mv","category_id":"ck2y0eazh000bmhmo6pbs4zms","_id":"ck2y0eb2u0017mhmoymltr3hq"}],"PostTag":[{"post_id":"ck2y0eayt0000mhmore24aj5o","tag_id":"ck2y0eaz60005mhmoh123ean4","_id":"ck2y0eazi000emhmoisagl6m5"},{"post_id":"ck2y0eayt0000mhmore24aj5o","tag_id":"ck2y0eaze0009mhmo8kbockbo","_id":"ck2y0eazj000gmhmon9yr6fnx"},{"post_id":"ck2y0eaz10002mhmoudee6kr2","tag_id":"ck2y0eaze0009mhmo8kbockbo","_id":"ck2y0eazl000kmhmoy51sdgz6"},{"post_id":"ck2y0eaz10002mhmoudee6kr2","tag_id":"ck2y0eaz60005mhmoh123ean4","_id":"ck2y0eazl000lmhmobaeqahtu"},{"post_id":"ck2y0eaz70006mhmowtowok1b","tag_id":"ck2y0eazl000jmhmosa5cdrm9","_id":"ck2y0eazm000nmhmoaw8sn2ut"},{"post_id":"ck2y0eazb0007mhmojh7ms5bn","tag_id":"ck2y0eaz60005mhmoh123ean4","_id":"ck2y0eazn000omhmohr0j4iku"},{"post_id":"ck2y0eazb0007mhmojh7ms5bn","tag_id":"ck2y0eaze0009mhmo8kbockbo","_id":"ck2y0eazn000pmhmoc9ax5cxe"},{"post_id":"ck2y0eb0a000qmhmoouvgu0u2","tag_id":"ck2y0eb0c000smhmobwfwhzqa","_id":"ck2y0eb0g000xmhmos3q8rdra"},{"post_id":"ck2y0eb0b000rmhmoglqavtgw","tag_id":"ck2y0eazl000jmhmosa5cdrm9","_id":"ck2y0eb0h0010mhmopsimu4kw"},{"post_id":"ck2y0eb0b000rmhmoglqavtgw","tag_id":"ck2y0eb0c000smhmobwfwhzqa","_id":"ck2y0eb0h0011mhmogflm0zsd"},{"post_id":"ck2y0eb0d000tmhmosvrfo0zd","tag_id":"ck2y0eazl000jmhmosa5cdrm9","_id":"ck2y0eb0h0012mhmo26br3poj"},{"post_id":"ck2y0eb0d000tmhmosvrfo0zd","tag_id":"ck2y0eb0c000smhmobwfwhzqa","_id":"ck2y0eb0i0013mhmolsggenh4"},{"post_id":"ck2y0eb2s0014mhmofsdwp5mv","tag_id":"ck2y0eazl000jmhmosa5cdrm9","_id":"ck2y0eb2t0015mhmogvtioqui"},{"post_id":"ck2y0eb2s0014mhmofsdwp5mv","tag_id":"ck2y0eb0c000smhmobwfwhzqa","_id":"ck2y0eb2u0016mhmommypv0zz"}],"Tag":[{"name":"Math","_id":"ck2y0eaz60005mhmoh123ean4"},{"name":"Probability","_id":"ck2y0eaze0009mhmo8kbockbo"},{"name":"Hyak","_id":"ck2y0eazl000jmhmosa5cdrm9"},{"name":"Software Tutorial","_id":"ck2y0eb0c000smhmobwfwhzqa"}]}}